From 420480a1b2af560be508951afb11502a409af503 Mon Sep 17 00:00:00 2001
From: "Brian J. Burg" <burg@cs.washington.edu>
Date: Mon, 9 Feb 2015 21:44:02 -0800
Subject: [PATCH] Show a content view for snapshot images.

---
 Source/WebInspectorUI/UserInterface/Base/Main.js   |  5 ++-
 .../UserInterface/Controllers/DOMTracingManager.js |  8 ++++
 Source/WebInspectorUI/UserInterface/Main.html      |  1 +
 .../UserInterface/Views/ContentView.js             |  5 +++
 .../Views/ElementSnapshotContentView.js            | 45 ++++++++++++++++++++++
 .../Views/ElementTrackingTimelineView.js           |  7 +++-
 6 files changed, 68 insertions(+), 3 deletions(-)
 create mode 100644 Source/WebInspectorUI/UserInterface/Views/ElementSnapshotContentView.js

diff --git a/Source/WebInspectorUI/UserInterface/Base/Main.js b/Source/WebInspectorUI/UserInterface/Base/Main.js
index 0e4031d..c0cace4 100644
--- a/Source/WebInspectorUI/UserInterface/Base/Main.js
+++ b/Source/WebInspectorUI/UserInterface/Base/Main.js
@@ -389,21 +389,24 @@ WebInspector.sidebarPanelForRepresentedObject = function(representedObject)
     if (representedObject instanceof WebInspector.Frame || representedObject instanceof WebInspector.Resource ||
         representedObject instanceof WebInspector.Script || representedObject instanceof WebInspector.ContentFlow)
         return this.resourceSidebarPanel;
 
     if (representedObject instanceof WebInspector.DOMStorageObject || representedObject instanceof WebInspector.CookieStorageObject ||
         representedObject instanceof WebInspector.DatabaseTableObject || representedObject instanceof WebInspector.DatabaseObject ||
         representedObject instanceof WebInspector.ApplicationCacheFrame || representedObject instanceof WebInspector.IndexedDatabaseObjectStore ||
         representedObject instanceof WebInspector.IndexedDatabaseObjectStoreIndex)
         return this.resourceSidebarPanel;
 
-    if (representedObject instanceof WebInspector.TimelineRecording)
+    if (representedObject instanceof WebInspector.TimelineRecording ||
+        representedObject instanceof WebInspector.TimelineRecord ||
+        representedObject instanceof WebInspector.Timeline ||
+        representedObject instanceof WebInspector.ElementSnapshot)
         return this.timelineSidebarPanel;
 
     // The console does not have a sidebar.
     if (representedObject instanceof WebInspector.LogObject)
         return null;
 
     console.error("Unknown representedObject: ", representedObject);
     return null;
 };
 
diff --git a/Source/WebInspectorUI/UserInterface/Controllers/DOMTracingManager.js b/Source/WebInspectorUI/UserInterface/Controllers/DOMTracingManager.js
index 215ce07..a2c48ba 100644
--- a/Source/WebInspectorUI/UserInterface/Controllers/DOMTracingManager.js
+++ b/Source/WebInspectorUI/UserInterface/Controllers/DOMTracingManager.js
@@ -22,20 +22,22 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  * THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 WebInspector.DOMTracingManager = function()
 {
     WebInspector.Object.call(this);
 
     this._snapshotMap = new Map;
     this._targetNode = null;
+
+    WebInspector.TimelineManager.addEventListener(WebInspector.TimelineManager.Event.CapturingStopped, this._timelineCapturingStopped, this);
 };
 
 WebInspector.DOMTracingManager.prototype = {
     constructor: WebInspector.DOMTracingManager,
     __proto__: WebInspector.Object.prototype,
 
     // Public
 
     startTrackingElement: function(node)
     {
@@ -81,12 +83,18 @@ WebInspector.DOMTracingManager.prototype = {
         var record = new WebInspector.ElementTrackingTimelineRecord(eventType, snapshot);
         WebInspector.timelineManager.activeRecording.addRecord(record);
         console.log("Added snapshot record: ", record, snapshot);
     },
 
     // Private
 
     _clearBindings: function()
     {
         this._snapshotMap.clear();
+    },
+
+    _timelineCapturingStopped: function(event)
+    {
+        if (this._targetNode)
+            this.stopTracking();
     }
 };
diff --git a/Source/WebInspectorUI/UserInterface/Main.html b/Source/WebInspectorUI/UserInterface/Main.html
index 193045d..cd37374 100644
--- a/Source/WebInspectorUI/UserInterface/Main.html
+++ b/Source/WebInspectorUI/UserInterface/Main.html
@@ -397,20 +397,21 @@
     <script src="Views/DatabaseContentView.js"></script>
     <script src="Views/DatabaseHostTreeElement.js"></script>
     <script src="Views/DatabaseTableContentView.js"></script>
     <script src="Views/DatabaseTableTreeElement.js"></script>
     <script src="Views/DatabaseTreeElement.js"></script>
     <script src="Views/DebuggerDashboardView.js"></script>
     <script src="Views/DebuggerSidebarPanel.js"></script>
     <script src="Views/DefaultDashboardView.js"></script>
     <script src="Views/DividerNavigationItem.js"></script>
     <script src="Views/EditingSupport.js"></script>
+    <script src="Views/ElementSnapshotContentView.js"></script>
     <script src="Views/ElementTrackingTimelineDataGridNode.js"></script>
     <script src="Views/ElementTrackingTimelineView.js"></script>
     <script src="Views/ElementTrackingTimelineOverviewGraph.js"></script>
     <script src="Views/EventListenerSection.js"></script>
     <script src="Views/EventListenerSectionGroup.js"></script>
     <script src="Views/FilterBar.js"></script>
     <script src="Views/FilterBarButton.js"></script>
     <script src="Views/FindBanner.js"></script>
     <script src="Views/FlexibleSpaceNavigationItem.js"></script>
     <script src="Views/FontResourceContentView.js"></script>
diff --git a/Source/WebInspectorUI/UserInterface/Views/ContentView.js b/Source/WebInspectorUI/UserInterface/Views/ContentView.js
index 7ff1064..f8fb7bf 100644
--- a/Source/WebInspectorUI/UserInterface/Views/ContentView.js
+++ b/Source/WebInspectorUI/UserInterface/Views/ContentView.js
@@ -83,20 +83,23 @@ WebInspector.ContentView = function(representedObject)
 
         if (representedObject instanceof WebInspector.DOMTree)
             return new WebInspector.FrameDOMTreeContentView(representedObject);
 
         if (representedObject instanceof WebInspector.LogObject)
             return new WebInspector.LogContentView(representedObject);
 
         if (representedObject instanceof WebInspector.ContentFlow)
             return new WebInspector.ContentFlowDOMTreeContentView(representedObject);
 
+        if (representedObject instanceof WebInspector.ElementSnapshot)
+            return new WebInspector.ElementSnapshotContentView(representedObject);
+
         if (typeof representedObject === "string" || representedObject instanceof String)
             return new WebInspector.TextContentView(representedObject);
 
         console.assert(!WebInspector.ContentView.isViewable(representedObject));
 
         throw "Can't make a ContentView for an unknown representedObject.";
     }
 
     // Concrete object instantiation.
     console.assert(this.constructor !== WebInspector.ContentView && this instanceof WebInspector.ContentView);
@@ -141,20 +144,22 @@ WebInspector.ContentView.isViewable = function(representedObject)
     if (representedObject instanceof WebInspector.IndexedDatabaseObjectStoreIndex)
         return true;
     if (representedObject instanceof WebInspector.ApplicationCacheFrame)
         return true;
     if (representedObject instanceof WebInspector.DOMTree)
         return true;
     if (representedObject instanceof WebInspector.LogObject)
         return true;
     if (representedObject instanceof WebInspector.ContentFlow)
         return true;
+    if (representedObject instanceof WebInspector.ElementSnapshot)
+        return true;
     if (typeof representedObject === "string" || representedObject instanceof String)
         return true;
     return false;
 };
 
 WebInspector.ContentView.StyleClassName = "content-view";
 
 WebInspector.ContentView.Event = {
     SelectionPathComponentsDidChange: "content-view-selection-path-components-did-change",
     SupplementalRepresentedObjectsDidChange: "content-view-supplemental-represented-objects-did-change",
diff --git a/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotContentView.js b/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotContentView.js
new file mode 100644
index 0000000..64d5cff
--- /dev/null
+++ b/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotContentView.js
@@ -0,0 +1,45 @@
+/*
+ * Copyright (C) 2015 University of Washington. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
+ * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
+ * THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+WebInspector.ElementSnapshotContentView = function(snapshot)
+{
+    WebInspector.ContentView.call(this, snapshot, WebInspector.ElementSnapshotContentView.StyleClassName);
+
+    this._imageElement = document.createElement("img");
+    this._imageElement.style.width = snapshot.boundingRect.size.width + 'px';
+    this._imageElement.style.height = snapshot.boundingRect.size.height + 'px';
+    this.element.appendChild(this._imageElement);
+
+    snapshot.fetchImageData().then(function(data) {
+        this._imageElement.src = this.representedObject.contentURL;
+    }.bind(this));
+};
+
+WebInspector.ElementSnapshotContentView.StyleClassName = "element-snapshot";
+
+WebInspector.ElementSnapshotContentView.prototype = {
+    constructor: WebInspector.ElementSnapshotContentView,
+    __proto__: WebInspector.ContentView.prototype,
+};
diff --git a/Source/WebInspectorUI/UserInterface/Views/ElementTrackingTimelineView.js b/Source/WebInspectorUI/UserInterface/Views/ElementTrackingTimelineView.js
index dee6dc3..173784e 100644
--- a/Source/WebInspectorUI/UserInterface/Views/ElementTrackingTimelineView.js
+++ b/Source/WebInspectorUI/UserInterface/Views/ElementTrackingTimelineView.js
@@ -217,26 +217,29 @@ WebInspector.ElementTrackingTimelineView.prototype = {
         if (treeElement instanceof WebInspector.FolderTreeElement)
             return;
 
         if (!(treeElement instanceof WebInspector.TimelineRecordTreeElement)) {
             console.error("Unknown tree element selected.");
             return;
         }
 
         this._updateHighlight();
 
-        if (!treeElement.record.sourceCodeLocation) {
+        if (treeElement.record.sourceCodeLocation)
+            WebInspector.resourceSidebarPanel.showOriginalOrFormattedSourceCodeLocation(treeElement.record.sourceCodeLocation);
+        else if (treeElement.representedObject instanceof WebInspector.ElementTrackingTimelineRecord)
+            WebInspector.contentBrowser.showContentViewForRepresentedObject(treeElement.representedObject.snapshot);
+        else {
             WebInspector.timelineSidebarPanel.showTimelineViewForTimeline(this.representedObject);
             return;
         }
 
-        WebInspector.resourceSidebarPanel.showOriginalOrFormattedSourceCodeLocation(treeElement.record.sourceCodeLocation);
         this._updateTreeElementWithCloseButton(treeElement);
     },
 
     _updateTreeElementWithCloseButton: function(treeElement)
     {
         if (this._closeStatusButton) {
             treeElement.status = this._closeStatusButton.element;
             return;
         }
 
-- 
2.3.5

