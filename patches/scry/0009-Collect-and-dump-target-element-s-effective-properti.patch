From d248f72d1b59e6710347c84a1bd69783879ac340 Mon Sep 17 00:00:00 2001
From: "Brian J. Burg" <burg@cs.washington.edu>
Date: Fri, 27 Feb 2015 11:09:08 -0800
Subject: [PATCH] Collect and dump target element's effective properties and
 their sources in a 'style snapshot'.

---
 Source/JavaScriptCore/inspector/protocol/CSS.json  |   1 +
 .../inspector/protocol/DOMTracing.json             |  33 +++-
 Source/WebCore/inspector/InspectorCSSAgent.cpp     |   1 +
 Source/WebCore/inspector/InspectorController.cpp   |   6 +-
 .../WebCore/inspector/InspectorDOMTracingAgent.cpp | 210 ++++++++++++++++++++-
 .../WebCore/inspector/InspectorDOMTracingAgent.h   |  21 ++-
 .../inspector/InspectorStyleDeclaration.cpp        |  24 +++
 .../WebCore/inspector/InspectorStyleDeclaration.h  |   5 +
 .../WebCore/inspector/InspectorStyleProperty.cpp   |   6 +
 Source/WebCore/inspector/InspectorStyleProperty.h  |   2 +
 10 files changed, 292 insertions(+), 17 deletions(-)

diff --git a/Source/JavaScriptCore/inspector/protocol/CSS.json b/Source/JavaScriptCore/inspector/protocol/CSS.json
index aef4a02..25a7900 100644
--- a/Source/JavaScriptCore/inspector/protocol/CSS.json
+++ b/Source/JavaScriptCore/inspector/protocol/CSS.json
@@ -38,20 +38,21 @@
             "properties": [
                 { "name": "pseudoId", "type": "integer", "description": "Pseudo style identifier (see <code>enum PseudoId</code> in <code>RenderStyleConstants.h</code>)."},
                 { "name": "matches", "type": "array", "items": { "$ref": "RuleMatch" }, "description": "Matches of CSS rules applicable to the pseudo style."}
             ],
             "description": "CSS rule collection for a single pseudo style."
         },
         {
             "id": "InheritedStyleEntry",
             "type": "object",
             "properties": [
+               { "name": "nodeId", "$ref": "DOM.NodeId", "description": "Id for the ancestor element that contributed inherited styles."},
                 { "name": "inlineStyle", "$ref": "CSSStyle", "optional": true, "description": "The ancestor element's inline style, if any, in the style inheritance chain." },
                 { "name": "matchedCSSRules", "type": "array", "items": { "$ref": "RuleMatch" }, "description": "Matches of CSS rules matching the ancestor node in the style inheritance chain." }
             ],
             "description": "Inline styles and matched rules for an ancestor element that contributes inherited style properties."
         },
         {
             "id": "RuleMatch",
             "type": "object",
             "properties": [
                 { "name": "rule", "$ref": "CSSRule", "description": "CSS rule in the match." },
diff --git a/Source/JavaScriptCore/inspector/protocol/DOMTracing.json b/Source/JavaScriptCore/inspector/protocol/DOMTracing.json
index 191aabf..c68f475 100644
--- a/Source/JavaScriptCore/inspector/protocol/DOMTracing.json
+++ b/Source/JavaScriptCore/inspector/protocol/DOMTracing.json
@@ -26,24 +26,55 @@
                 { "name": "snapshotId", "$ref": "SnapshotId" },
                 { "name": "boundingBox", "$ref": "FloatRect", "description": "Bounding box for the element's fragments in root view (global, absolute) coordinates." },
                 { "name": "elapsedTimestamp", "type": "number", "description": "Elapsed time since the start of page execution when the snapshot was created." }
             ]
         },
         {
             "id": "ElementSnapshotPayload",
             "type": "object",
             "properties": [
                 { "name": "snapshotId", "$ref": "SnapshotId" },
-                { "name": "imageData", "type": "string", "description": "Base64-encoded image data for the snapshot." }
+                { "name": "imageData", "type": "string", "description": "Base64-encoded image data for the snapshot." },
+                { "name": "styleData", "$ref": "EffectiveStyle", "description": "Effective style for element based on properties contributed from inline styles and rules." }
             ]
         },
         {
+            "id": "EffectiveStyle",
+            "type": "object",
+            "properties": [
+                { "name": "targetElement", "$ref": "DOM.NodeId", "description": "The id for the element that was snapshotted."},
+                { "name": "elements", "type": "array", "items": { "$ref": "ElementEntry" }, "description": "Elements that contributed styles from rules and inline styles, ordered from target element to root." },
+                { "name": "properties", "type": "array", "items": { "$ref": "PropertyEntry"}, "description": "Effective properties for the target element." }
+            ],
+            "description": "Describes the effective styles for the target element and where the style properties came from."
+        },
+        {
+            "id": "PropertyEntry",
+            "type": "object",
+            "properties": [
+                { "name": "property", "$ref": "CSS.CSSProperty", "description": "A property that forms part of the effective element style." },
+                { "name": "sourceRule", "$ref": "CSS.CSSRuleId", "optional": true, "description": "If property was contributed by a rule, the rule's identifier at time of snapshot."},
+                { "name": "sourceElement", "$ref": "DOM.NodeId", "optional": true, "description": "If property was contributed by an element's inline style, the element's identifier at time of snapshot."}
+            ],
+            "description": "An effective style property contributed by a rule or inline style."
+         },
+        {
+            "id": "ElementEntry",
+            "type": "object",
+            "properties": [
+                { "name": "nodeId", "$ref": "DOM.NodeId", "description": "Id for the ancestor element that contributed inherited styles."},
+                { "name": "inlineStyle", "$ref": "CSS.CSSStyle", "optional": true, "description": "The ancestor element's inline style, if any, in the style inheritance chain." },
+                { "name": "matchedRules", "type": "array", "items": { "$ref": "CSS.RuleMatch" }, "description": "Matches of CSS rules matching the ancestor node in the style inheritance chain." }
+            ],
+            "description": "Inline styles and matched rules for an element that contributes style properties."
+        },
+        {
             "id": "TraceOperationType",
             "type": "string",
             "enum": [
                 "ElementInserted",
                 "ElementRemoved",
                 "AttributeModified",
                 "AttributeRemoved"
             ]
         },
         {
diff --git a/Source/WebCore/inspector/InspectorCSSAgent.cpp b/Source/WebCore/inspector/InspectorCSSAgent.cpp
index a752f79..75a03bc 100644
--- a/Source/WebCore/inspector/InspectorCSSAgent.cpp
+++ b/Source/WebCore/inspector/InspectorCSSAgent.cpp
@@ -571,20 +571,21 @@ void InspectorCSSAgent::getMatchedStylesForNode(ErrorString& errorString, int no
     }
 
     // Inherited styles.
     if (!includeInherited || *includeInherited) {
         auto entries = Inspector::Protocol::Array<Inspector::Protocol::CSS::InheritedStyleEntry>::create();
         Element* parentElement = element->parentElement();
         while (parentElement) {
             StyleResolver& parentStyleResolver = parentElement->document().ensureStyleResolver();
             auto parentMatchedRules = parentStyleResolver.styleRulesForElement(parentElement, StyleResolver::AllCSSRules);
             auto entry = Inspector::Protocol::CSS::InheritedStyleEntry::create()
+                .setNodeId(m_domAgent->pushNodePathToFrontend(parentElement))
                 .setMatchedCSSRules(buildArrayForMatchedRuleList(parentMatchedRules, *parentElement))
                 .release();
 
             if (is<StyledElement>(parentElement)) {
                 InlineStyleRuleSet& ruleSet = ruleSetForInlineStyle(downcast<StyledElement>(*parentElement));
                 ruleSet.withInlineStyle([&] (Inspector::StyleDeclaration& style) {
                     entry->setInlineStyle(buildObjectForStyle(style));
                 });
             }
 
diff --git a/Source/WebCore/inspector/InspectorController.cpp b/Source/WebCore/inspector/InspectorController.cpp
index 8cb943b..625519f 100644
--- a/Source/WebCore/inspector/InspectorController.cpp
+++ b/Source/WebCore/inspector/InspectorController.cpp
@@ -112,39 +112,41 @@ InspectorController::InspectorController(Page& page, InspectorClient* inspectorC
 
     auto runtimeAgentPtr = std::make_unique<PageRuntimeAgent>(m_injectedScriptManager.get(), &page, pageAgent);
     PageRuntimeAgent* runtimeAgent = runtimeAgentPtr.get();
     m_instrumentingAgents->setPageRuntimeAgent(runtimeAgent);
     m_agents.append(WTF::move(runtimeAgentPtr));
 
     auto domAgentPtr = std::make_unique<InspectorDOMAgent>(m_instrumentingAgents.get(), pageAgent, m_injectedScriptManager.get(), m_overlay.get());
     m_domAgent = domAgentPtr.get();
     m_agents.append(WTF::move(domAgentPtr));
 
-    m_agents.append(std::make_unique<InspectorCSSAgent>(m_instrumentingAgents.get(), m_domAgent));
+    auto cssAgentPtr = std::make_unique<InspectorCSSAgent>(m_instrumentingAgents.get(), m_domAgent);
+    InspectorCSSAgent* cssAgent = cssAgentPtr.get();
+    m_agents.append(WTF::move(cssAgentPtr));
 
     auto databaseAgentPtr = std::make_unique<InspectorDatabaseAgent>(m_instrumentingAgents.get());
     InspectorDatabaseAgent* databaseAgent = databaseAgentPtr.get();
     m_agents.append(WTF::move(databaseAgentPtr));
 
 #if ENABLE(INDEXED_DATABASE)
     m_agents.append(std::make_unique<InspectorIndexedDBAgent>(m_instrumentingAgents.get(), m_injectedScriptManager.get(), pageAgent));
 #endif
 
 #if ENABLE(WEB_REPLAY)
     m_agents.append(std::make_unique<InspectorReplayAgent>(m_instrumentingAgents.get(), pageAgent));
 #endif
 
     auto domStorageAgentPtr = std::make_unique<InspectorDOMStorageAgent>(m_instrumentingAgents.get(), m_pageAgent);
     InspectorDOMStorageAgent* domStorageAgent = domStorageAgentPtr.get();
     m_agents.append(WTF::move(domStorageAgentPtr));
 
-    m_agents.append(std::make_unique<DOMTracingAgent>(m_instrumentingAgents.get(), m_domAgent));
+    m_agents.append(std::make_unique<DOMTracingAgent>(m_instrumentingAgents.get(), m_domAgent, cssAgent));
 
     auto timelineAgentPtr = std::make_unique<InspectorTimelineAgent>(m_instrumentingAgents.get(), pageAgent, InspectorTimelineAgent::PageInspector, inspectorClient);
     m_timelineAgent = timelineAgentPtr.get();
     m_agents.append(WTF::move(timelineAgentPtr));
 
     auto resourceAgentPtr = std::make_unique<InspectorResourceAgent>(m_instrumentingAgents.get(), pageAgent, inspectorClient);
     m_resourceAgent = resourceAgentPtr.get();
     m_agents.append(WTF::move(resourceAgentPtr));
 
     auto consoleAgentPtr = std::make_unique<PageConsoleAgent>(m_injectedScriptManager.get(), m_domAgent);
diff --git a/Source/WebCore/inspector/InspectorDOMTracingAgent.cpp b/Source/WebCore/inspector/InspectorDOMTracingAgent.cpp
index b432b53..f4c5eb8 100644
--- a/Source/WebCore/inspector/InspectorDOMTracingAgent.cpp
+++ b/Source/WebCore/inspector/InspectorDOMTracingAgent.cpp
@@ -25,41 +25,54 @@
 
 #include "config.h"
 
 #include "InspectorDOMTracingAgent.h"
 
 #include "Element.h"
 #include "ElementTraceOperations.h"
 #include "FrameSnapshotting.h"
 #include "FrameView.h"
 #include "ImageBuffer.h"
+#include "InspectorCSSAgent.h"
 #include "InspectorDOMAgent.h"
+#include "InspectorInlineStyleRuleSet.h"
 #include "InspectorPageAgent.h"
+#include "InspectorStyleDeclaration.h"
 #include "InstrumentingAgents.h"
 #include "JSMainThreadExecState.h"
 #include "Logging.h"
 #include "MainFrame.h"
 #include "Node.h"
 #include "Page.h"
 #include "RenderObject.h"
+#include "StyledElement.h"
+#include "StyleProperties.h"
+#include "StyleResolver.h"
+#include "StyleRule.h"
+#include <bitset>
 #include <inspector/InspectorFrontendChannel.h>
 #include <inspector/ScriptCallStack.h>
 #include <inspector/ScriptCallStackFactory.h>
 #include <wtf/Stopwatch.h>
 #include <wtf/TemporaryChange.h>
 
 using namespace WebCore;
 
 namespace Inspector {
 
 static int maxCallStackDepth = 5;
 
+StyleSnapshot::StyleSnapshot(RefPtr<Inspector::Protocol::DOMTracing::EffectiveStyle>&& encodedData)
+    : encodedData(encodedData)
+{
+}
+
 ElementSnapshot::ElementSnapshot() { }
 ElementSnapshot::~ElementSnapshot() { }
 
 ElementSnapshot::ElementSnapshot(std::unique_ptr<ImageBuffer> data, const LayoutRect& bounds, uint64_t snapshotId)
     : imageData(std::move(data))
     , boundingBox(bounds)
     , snapshotId(snapshotId)
 {
 }
 
@@ -71,42 +84,216 @@ bool operator==(const ElementSnapshot& a, const ElementSnapshot& b)
     // These are root frame view coordinates, so scrolling will not affect equality.
     if (a.boundingBox != b.boundingBox)
         return false;
 
     ASSERT(a.imageData->logicalSize() == b.imageData->logicalSize());
 
     float diffPercent = ImageBuffer::computeDifference(*a.imageData, *b.imageData);
     return diffPercent < 0.01f;
 }
 
-DOMTracingAgent::DOMTracingAgent(InstrumentingAgents* instrumentingAgents, InspectorDOMAgent* domAgent)
+DOMTracingAgent::DOMTracingAgent(InstrumentingAgents* instrumentingAgents, InspectorDOMAgent* domAgent, InspectorCSSAgent* cssAgent)
     : InspectorAgentBase(ASCIILiteral("DOMTracing"), instrumentingAgents)
     , m_domAgent(domAgent)
+    , m_cssAgent(cssAgent)
 {
 }
 
 DOMTracingAgent::~DOMTracingAgent()
 {
 }
 
 std::unique_ptr<ElementSnapshot> DOMTracingAgent::createSnapshot(Element& element)
 {
     TemporaryChange<bool> suppressDidPaintCalls(m_isSnapshottingElement, true);
 
     if (!element.renderer())
         return std::make_unique<ElementSnapshot>();
 
     std::unique_ptr<ImageBuffer> imageData = snapshotNode(element.renderer()->frame().mainFrame(), element);
     IntRect bounds = element.boundsInRootViewSpace();
     return std::make_unique<ElementSnapshot>(std::move(imageData), bounds, m_nextSnapshotId++);
 }
 
+// This is duplicated from CSSAgent.cpp because that functor implementation explicitly tracks
+// active/inactive properties as it builds multiple objects, rather than precomputing status.
+// (Maybe StyleDeclaration::populateProperties should handle this and give such data to StyleProperty...)
+static RefPtr<Inspector::Protocol::CSS::CSSProperty> buildObjectForProperty(StyleDeclaration& declaration, CSSPropertyID propertyId)
+{
+    RefPtr<Inspector::Protocol::CSS::CSSProperty> result;
+    declaration.withPropertyForId(propertyId, [&result] (StyleProperty& property) {
+        result = Inspector::Protocol::CSS::CSSProperty::create()
+            .setName(property.propertyName().lower())
+            .setValue(property.propertyValue())
+            .release();
+
+        result->setParsedOk(property.parsedOk());
+        result->setImplicit(property.isImplicit());
+        auto status = Inspector::Protocol::CSS::CSSPropertyStatus::Active;
+        if (!property.isFromSource())
+            status = Inspector::Protocol::CSS::CSSPropertyStatus::Style;
+        else {
+            result->setText(property.rawText());
+
+            TextPosition start, end;
+            property.getTextRange(start, end);
+            result->setRange(buildObjectForSourceRange(start, end));
+        }
+        result->setStatus(status);
+    });
+
+    return WTF::move(result);
+}
+
+std::unique_ptr<StyleSnapshot> DOMTracingAgent::createStyleSnapshot(Element& targetElement)
+{
+    std::bitset<numCSSProperties> propertyIsClaimed;
+    HashMap<CSSPropertyID, WebCore::StyleRule*> winningRuleMap;
+    HashMap<CSSPropertyID, Element*> winningInlineStyleMap;
+    HashMap<Element*, std::unique_ptr<Vector<RefPtr<WebCore::StyleRule>>>> rulesToKeepForElement;
+    HashSet<Element*> elementsWithUsefulInlineStyle;
+
+    StyleResolver& styleResolver = targetElement.document().ensureStyleResolver();
+
+    for (Element* element = &targetElement; element; element = element->parentElement()) {
+        // First try to claim properties in the inline style, as it has highest specificity.
+        const StyleProperties* properties = nullptr;
+        if (is<StyledElement>(element))
+            properties = downcast<StyledElement>(element)->inlineStyle();
+
+        unsigned size = properties ? properties->propertyCount() : 0;
+
+        if (size)
+            LOG(WebReplay, "Checking inline style for element: %p\n", element);
+
+        bool claimedPropertyFromInlineStyle = false;
+        for (unsigned i = 0; i < size; ++i) {
+            auto property = properties->propertyAt(i);
+            if (!propertyIsClaimed[property.id()]) {
+                propertyIsClaimed.set(property.id());
+                claimedPropertyFromInlineStyle = true;
+                auto addResult = winningInlineStyleMap.set(property.id(), element);
+                ASSERT_UNUSED(addResult, addResult.isNewEntry);
+                LOG(WebReplay, "Claimed property  %s: %s\n", getPropertyName(property.id()), property.value()->cssText().utf8().data());
+            }
+        }
+
+        if (claimedPropertyFromInlineStyle)
+            elementsWithUsefulInlineStyle.add(element);
+
+        // Then try to claim properties from each rule that matches this element.
+        // Rules are already sorted by descending specificity, so higher specificity
+        // rules and earlier rules will claim properties first.
+        auto matchedRules = styleResolver.styleRulesForElement(element, StyleResolver::AuthorCSSRules);
+        for (RefPtr<WebCore::StyleRule> rule : matchedRules) {
+            LOG(WebReplay, "Checking rule with selector: %s\n", rule->selectorList().selectorsText().utf8().data());
+
+            bool onlyConsiderInheritedProperties = (element != &targetElement);
+            const StyleProperties& properties = rule->properties();
+            bool claimedPropertyFromRule = false;
+            unsigned size = properties.propertyCount();
+            for (unsigned i = 0; i < size; ++i) {
+                auto property = properties.propertyAt(i);
+                if (onlyConsiderInheritedProperties && !CSSProperty::isInheritedProperty(property.id()))
+                    continue;
+                if (!propertyIsClaimed[property.id()]) {
+                    propertyIsClaimed.set(property.id());
+                    claimedPropertyFromRule = true;
+                    auto addResult = winningRuleMap.set(property.id(), rule.get());
+                    ASSERT_UNUSED(addResult, addResult.isNewEntry);
+                    LOG(WebReplay, "Claimed property  %s: %s\n", getPropertyName(property.id()), property.value()->cssText().utf8().data());
+                }
+            }
+            if (!claimedPropertyFromRule)
+                continue;
+
+            if (!rulesToKeepForElement.contains(element))
+                rulesToKeepForElement.set(element, std::make_unique<Vector<RefPtr<WebCore::StyleRule>>>());
+
+            if (Vector<RefPtr<WebCore::StyleRule>>* rulesToKeep = rulesToKeepForElement.get(element))
+                rulesToKeep->append(WTF::move(rule));
+        }
+        // TODO: add matched pseudo style rules. See CSSAgent. It could be folded into above.
+    }
+
+    // For now, serialize the data directly to inspector objects since we don't do any analysis on
+    // the backend. In the future, we may want to use a different intermediate format for that.
+    auto elementsArray = Inspector::Protocol::Array<Inspector::Protocol::DOMTracing::ElementEntry>::create();
+    for (Element* element = &targetElement; element; element = element->parentElement()) {
+        auto matchedRulesArray = Inspector::Protocol::Array<Inspector::Protocol::CSS::RuleMatch>::create();
+
+        if (const Vector<RefPtr<WebCore::StyleRule>>* rulesToKeep = rulesToKeepForElement.get(element)) {
+            for (RefPtr<WebCore::StyleRule> rule : *rulesToKeep)
+                matchedRulesArray->addItem(m_cssAgent->buildObjectForMatchedRule(*rule, *element));
+        }
+
+        auto elementObject = Inspector::Protocol::DOMTracing::ElementEntry::create()
+            .setNodeId(m_domAgent->pushNodePathToFrontend(element))
+            .setMatchedRules(WTF::move(matchedRulesArray))
+            .release();
+
+        if (elementsWithUsefulInlineStyle.contains(element)) {
+            ASSERT(is<StyledElement>(element));
+            RefPtr<Inspector::Protocol::CSS::CSSStyle> styleObject;
+            m_cssAgent->withWrappedStyle(*element->style(), [&styleObject] (StyleDeclaration& style) {
+                styleObject = buildObjectForStyle(style);
+            });
+            ASSERT(styleObject);
+            elementObject->setInlineStyle(WTF::move(styleObject));
+        }
+        elementsArray->addItem(WTF::move(elementObject));
+    }
+
+    auto propertiesArray = Inspector::Protocol::Array<Inspector::Protocol::DOMTracing::PropertyEntry>::create();
+    for (auto entry : winningRuleMap) {
+        RefPtr<Inspector::Protocol::DOMTracing::PropertyEntry> entryObject;
+        m_cssAgent->withWrappedRule(*entry.value, targetElement.document(), [&] (Inspector::StyleRule& rule) {
+            RefPtr<Inspector::Protocol::CSS::CSSProperty> propertyObject;
+            rule.withStyle([&] (Inspector::StyleDeclaration& style) {
+                CSSPropertyID propertyId = entry.key;
+                propertyObject = buildObjectForProperty(style, propertyId);
+            });
+            entryObject = Inspector::Protocol::DOMTracing::PropertyEntry::create()
+                .setProperty(WTF::move(propertyObject))
+                .release();
+
+            entryObject->setSourceRule(rule.ruleId().asProtocolValue<Inspector::Protocol::CSS::CSSRuleId>());
+        });
+        propertiesArray->addItem(WTF::move(entryObject));
+    }
+
+    for (auto entry : winningInlineStyleMap) {
+        ASSERT(is<StyledElement>(entry.value));
+        InlineStyleRuleSet& inlineStyle = m_cssAgent->ruleSetForInlineStyle(*entry.value);
+        RefPtr<Inspector::Protocol::CSS::CSSProperty> propertyObject;
+        RefPtr<Inspector::Protocol::DOMTracing::PropertyEntry> entryObject;
+        inlineStyle.withInlineStyle([&] (StyleDeclaration& style) {
+            CSSPropertyID propertyId = entry.key;
+            propertyObject = buildObjectForProperty(style, propertyId);
+            entryObject = Inspector::Protocol::DOMTracing::PropertyEntry::create()
+                .setProperty(WTF::move(propertyObject))
+                .release();
+        });
+
+        entryObject->setSourceElement(m_domAgent->pushNodePathToFrontend(entry.value));
+        propertiesArray->addItem(WTF::move(entryObject));
+    }
+
+    auto effectiveStyleObject = Inspector::Protocol::DOMTracing::EffectiveStyle::create()
+        .setTargetElement(m_domAgent->pushNodePathToFrontend(&targetElement))
+        .setElements(WTF::move(elementsArray))
+        .setProperties(WTF::move(propertiesArray))
+        .release();
+
+    return std::make_unique<StyleSnapshot>(WTF::move(effectiveStyleObject));
+}
+
 void DOMTracingAgent::didCreateFrontendAndBackend(FrontendChannel* frontendChannel, BackendDispatcher* backendDispatcher)
 {
     m_frontendDispatcher = std::make_unique<DOMTracingFrontendDispatcher>(frontendChannel);
     m_backendDispatcher = DOMTracingBackendDispatcher::create(backendDispatcher, this);
 
     m_instrumentingAgents->setDOMTracingAgent(this);
 }
 
 void DOMTracingAgent::willDestroyFrontendAndBackend(DisconnectReason)
 {
@@ -154,36 +341,37 @@ void DOMTracingAgent::stopTracking(ErrorString& error, int nodeId)
 
 void DOMTracingAgent::getSnapshotPayload(ErrorString& error, int snapshotId, RefPtr<Inspector::Protocol::DOMTracing::ElementSnapshotPayload>& out_snapshotPayload)
 {
     uint64_t lookupKey = static_cast<uint64_t>(snapshotId);
     if (snapshotId <= 0 || lookupKey >= m_nextSnapshotId) {
         error = ASCIILiteral("Invalid snapshot id.");
         return;
     }
 
     auto findResult = m_savedSnapshotMap.find(lookupKey);
-
-    ImageBuffer* buffer = nullptr;
+    const ElementSnapshot* foundSnapshot = nullptr;
     ASSERT(m_currentSnapshot);
     if (m_currentSnapshot->snapshotId == lookupKey)
-        buffer = m_currentSnapshot->imageData.get();
-    else if (findResult == m_savedSnapshotMap.end()) {
+        foundSnapshot = m_currentSnapshot.get();
+    else if (findResult != m_savedSnapshotMap.end())
+        foundSnapshot = findResult->value.get();
+    else {
         error = ASCIILiteral("Unknown snapshot id.");
         return;
-    } else
-        buffer = findResult->value->imageData.get();
+    }
 
-    ASSERT(buffer);
+    ASSERT(foundSnapshot);
 
     out_snapshotPayload = Inspector::Protocol::DOMTracing::ElementSnapshotPayload::create()
         .setSnapshotId(lookupKey)
-        .setImageData(buffer->toDataURL(ASCIILiteral("image/png")))
+        .setImageData(foundSnapshot->imageData->toDataURL(ASCIILiteral("image/png")))
+        .setStyleData(foundSnapshot->effectiveStyle->encodedData)
         .release();
 }
 
 // InspectorInstrumentation entry points.
 
 void DOMTracingAgent::frameNavigated(Frame& frame)
 {
     // If the target node was in this frame, its document will soon be detached.
     if (!m_targetElement || m_targetElement->document().frame() == &frame)
         setTargetElement(nullptr);
@@ -334,22 +522,24 @@ void DOMTracingAgent::commitSnapshot(std::unique_ptr<ElementSnapshot> snapshot)
     // Empty snapshots are loaded when tracking is stopped. Don't save those.
     if (m_currentSnapshot && m_currentSnapshot->snapshotId) {
         uint64_t key = m_currentSnapshot->snapshotId;
         m_savedSnapshotMap.set(key, WTF::move(m_currentSnapshot));
     }
     m_currentSnapshot = WTF::move(snapshot);
 
     if (!m_currentSnapshot->snapshotId)
         return;
 
-    // Send the committed non-empty snapshot to the inspector frontend.
     ASSERT(m_targetElement);
+    m_currentSnapshot->effectiveStyle = createStyleSnapshot(*m_targetElement);
+
+    // Send the committed non-empty snapshot to the inspector frontend.
     int nodeId = m_domAgent->pushNodePathToFrontend(m_targetElement.get());
     ASSERT(nodeId); // This should get an already assigned id, or bind the node and get a new one.
 
     double elapsedTime = m_instrumentingAgents->inspectorEnvironment().executionStopwatch()->elapsedTime();
 
     auto snapshotObject = Inspector::Protocol::DOMTracing::ElementSnapshot::create()
         .setNodeId(nodeId)
         .setSnapshotId(m_currentSnapshot->snapshotId)
         .setBoundingBox(createProtocolObjectForFloatRect(FloatRect(m_currentSnapshot->boundingBox)))
         .setElapsedTimestamp(elapsedTime)
diff --git a/Source/WebCore/inspector/InspectorDOMTracingAgent.h b/Source/WebCore/inspector/InspectorDOMTracingAgent.h
index 2abbb53..07000b4e 100644
--- a/Source/WebCore/inspector/InspectorDOMTracingAgent.h
+++ b/Source/WebCore/inspector/InspectorDOMTracingAgent.h
@@ -23,59 +23,69 @@
  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 #ifndef InspectorDOMTracingAgent_h
 #define InspectorDOMTracingAgent_h
 
 #include "InspectorWebAgentBase.h"
 #include "LayoutRect.h"
 #include <inspector/InspectorBackendDispatchers.h>
 #include <inspector/InspectorFrontendDispatchers.h>
+#include <inspector/InspectorProtocolObjects.h>
 #include <wtf/Forward.h>
 #include <wtf/WeakPtr.h>
 
 namespace WebCore {
 class CharacterData;
 class Document;
 class Element;
 class Frame;
 class ImageBuffer;
+class InspectorCSSAgent;
 class InspectorDOMAgent;
 class Node;
 class RenderObject;
 }
 
 namespace Inspector {
 
 struct TraceOperation;
 
+struct StyleSnapshot {
+    StyleSnapshot(RefPtr<Inspector::Protocol::DOMTracing::EffectiveStyle>&&);
+    ~StyleSnapshot() { }
+
+    RefPtr<Inspector::Protocol::DOMTracing::EffectiveStyle> encodedData;
+};
+
 struct ElementSnapshot {
     std::unique_ptr<WebCore::ImageBuffer> imageData;
+    std::unique_ptr<StyleSnapshot> effectiveStyle;
     WebCore::LayoutRect boundingBox;
     uint64_t snapshotId {0};
 
     bool isEmpty() const { return !imageData || boundingBox.isEmpty(); }
 
     ElementSnapshot();
     ~ElementSnapshot();
     ElementSnapshot(std::unique_ptr<WebCore::ImageBuffer>, const WebCore::LayoutRect& bounds, uint64_t snapshotId);
 };
 
 bool operator==(const ElementSnapshot&, const ElementSnapshot&);
 inline bool operator!=(const ElementSnapshot& a, const ElementSnapshot& b) { return !(a == b); }
 
 class DOMTracingAgent final : public WebCore::InspectorAgentBase
                             , public DOMTracingBackendDispatcherHandler {
     WTF_MAKE_NONCOPYABLE(DOMTracingAgent);
     WTF_MAKE_FAST_ALLOCATED;
 public:
-    DOMTracingAgent(WebCore::InstrumentingAgents*, WebCore::InspectorDOMAgent*);
+    DOMTracingAgent(WebCore::InstrumentingAgents*, WebCore::InspectorDOMAgent*, WebCore::InspectorCSSAgent*);
     virtual ~DOMTracingAgent();
 
     virtual void didCreateFrontendAndBackend(FrontendChannel*, BackendDispatcher*) override;
     virtual void willDestroyFrontendAndBackend(DisconnectReason) override;
 
     // Methods called from the frontend.
     virtual void startTrackingElement(ErrorString&, int nodeId) override;
     virtual void stopTracking(ErrorString&, int nodeId) override;
     virtual void getSnapshotPayload(ErrorString&, int nodeId, RefPtr<Inspector::Protocol::DOMTracing::ElementSnapshotPayload>&) override;
 
@@ -83,36 +93,39 @@ public:
     void frameNavigated(WebCore::Frame&);
     void didPaint(WebCore::RenderObject&, const WebCore::LayoutRect&);
 
     void didInsertDOMNode(WebCore::Node&);
     void didRemoveDOMNode(WebCore::Node&);
     void didModifyDOMAttr(WebCore::Element&, const AtomicString& name, const AtomicString& value);
     void didRemoveDOMAttr(WebCore::Element&, const AtomicString& name);
 
     bool setTargetElement(WebCore::Element*);
 private:
-    // Use this rather than manually constructing ElementSnapshot to avoid reentrancy issues.
-    std::unique_ptr<ElementSnapshot> createSnapshot(WebCore::Element&);
-
     void commitSnapshot(std::unique_ptr<ElementSnapshot>);
     void elementAppearanceChanged();
     void pushOperationToFrontend(const Inspector::TraceOperation&);
 
+    // Use this rather than manually constructing ElementSnapshot to avoid reentrancy issues.
+    std::unique_ptr<ElementSnapshot> createSnapshot(WebCore::Element&);
+    std::unique_ptr<StyleSnapshot> createStyleSnapshot(WebCore::Element&);
+
     std::unique_ptr<DOMTracingFrontendDispatcher> m_frontendDispatcher;
     RefPtr<DOMTracingBackendDispatcher> m_backendDispatcher;
 
     WebCore::InspectorDOMAgent* m_domAgent {nullptr};
+    WebCore::InspectorCSSAgent* m_cssAgent {nullptr};
 
     HashMap<uint64_t, std::unique_ptr<ElementSnapshot>> m_savedSnapshotMap;
     uint64_t m_nextSnapshotId {1};
 
     WeakPtr<WebCore::Element> m_targetElement;
+
     // Used to detect rendering differences between paint events.
     std::unique_ptr<ElementSnapshot> m_currentSnapshot;
 
     // Used to prevent re-entrancy to didPaint(). This could happen because
     // didPaint() instrumentation fires underneath the node snapshotting code.
     bool m_isSnapshottingElement {false};
 };
 
 } // namespace Inspector
 
diff --git a/Source/WebCore/inspector/InspectorStyleDeclaration.cpp b/Source/WebCore/inspector/InspectorStyleDeclaration.cpp
index bee845e..4cf25c7 100644
--- a/Source/WebCore/inspector/InspectorStyleDeclaration.cpp
+++ b/Source/WebCore/inspector/InspectorStyleDeclaration.cpp
@@ -43,20 +43,44 @@ StyleDeclaration::StyleDeclaration(const CSSId& styleId, CSSStyleDeclaration& de
     : m_styleId(styleId)
     , m_declaration(declaration)
     , m_ruleSet(ruleSet)
 {
 }
 
 StyleDeclaration::~StyleDeclaration()
 {
 }
 
+bool StyleDeclaration::withPropertyForId(CSSPropertyID propertyId, std::function<void(Inspector::StyleProperty&)> callback)
+{
+    Vector<StyleProperty> properties;
+    populateProperties(properties);
+
+    for (StyleProperty& property : properties) {
+        if (!property.isImportant() || property.propertyId() == propertyId)
+            continue;
+
+        callback(property);
+        return true;
+    }
+
+    for (StyleProperty& property : properties) {
+        if (property.propertyId() != propertyId)
+            continue;
+
+        callback(property);
+        return true;
+    }
+
+    return false;
+}
+
 void StyleDeclaration::populateProperties(Vector<StyleProperty>& result)
 {
     HashSet<String> foundProperties;
 
     if (RefPtr<WebCore::CSSRuleSourceData> sourceData = styleSourceData()) {
         Vector<WebCore::CSSPropertySourceData>& sourcePropertyData = sourceData->styleSourceData->propertyData;
 
         for (auto& data : sourcePropertyData) {
             foundProperties.add(data.name.lower());
             result.append(StyleProperty(*this, data, true));
diff --git a/Source/WebCore/inspector/InspectorStyleDeclaration.h b/Source/WebCore/inspector/InspectorStyleDeclaration.h
index b0e1a5c..d3f6bc0 100644
--- a/Source/WebCore/inspector/InspectorStyleDeclaration.h
+++ b/Source/WebCore/inspector/InspectorStyleDeclaration.h
@@ -60,20 +60,25 @@ public:
     bool getStyleText(String& result);
     bool setStyleText(const String&);
 
     bool getStyleTextRange(TextPosition& start, TextPosition& end);
 
     // StyleProperty objects are not heap-allocated to avoid cyclic reference counting.
     // Thus, they are noncopyable and only available through a functor callback.
     template<typename Functor>
     typename Functor::ReturnType forEachProperty(Functor&);
 
+    // Invoke a callback with the StyleProperty for the winning 'declared value' for the
+    // specified CSSPropertyID. This is the first !important declared value for the property,
+    // else the first declared value for the property. Return value indicates invoked callback.
+    bool withPropertyForId(WebCore::CSSPropertyID, std::function<void(Inspector::StyleProperty&)>);
+
     // FIXME: remove
     String shorthandValue(const String& shorthandProperty);
 
 private:
     void populateProperties(Vector<StyleProperty>&);
 
     CSSId m_styleId;
     WebCore::CSSStyleDeclaration& m_declaration;
     StyleRuleSet* m_ruleSet;
 };
diff --git a/Source/WebCore/inspector/InspectorStyleProperty.cpp b/Source/WebCore/inspector/InspectorStyleProperty.cpp
index 12f7fe5..1f692a5 100644
--- a/Source/WebCore/inspector/InspectorStyleProperty.cpp
+++ b/Source/WebCore/inspector/InspectorStyleProperty.cpp
@@ -18,20 +18,21 @@
  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 #include "config.h"
 #include "InspectorStyleProperty.h"
 
+#include "CSSParser.h"
 #include "CSSStyleDeclaration.h"
 #include "InspectorStyleDeclaration.h"
 #include "InspectorStyleRuleSet.h"
 #include <inspector/ContentSearchUtilities.h>
 #include <wtf/text/StringBuilder.h>
 
 using namespace WebCore;
 
 namespace Inspector {
 
@@ -69,20 +70,25 @@ bool StyleProperty::isImplicit() const
 bool StyleProperty::isImportant() const
 {
     return m_sourceData.important;
 }
 
 bool StyleProperty::parsedOk() const
 {
     return m_sourceData.parsedOk;
 }
 
+CSSPropertyID StyleProperty::propertyId() const
+{
+    return cssPropertyID(propertyName());
+}
+
 String StyleProperty::propertyName() const
 {
     return m_sourceData.name;
 }
 
 String StyleProperty::propertyValue() const
 {
     return m_style.declaration().getPropertyValue(propertyName());
 }
 
diff --git a/Source/WebCore/inspector/InspectorStyleProperty.h b/Source/WebCore/inspector/InspectorStyleProperty.h
index 493ea1b..e1ffba5 100644
--- a/Source/WebCore/inspector/InspectorStyleProperty.h
+++ b/Source/WebCore/inspector/InspectorStyleProperty.h
@@ -19,20 +19,21 @@
  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 #ifndef InspectorStyleProperty_h
 #define InspectorStyleProperty_h
 
+#include "CSSPropertyNames.h"
 #include "CSSPropertySourceData.h"
 
 namespace WebCore {
 class CSSStyleDeclaration;
 }
 
 namespace Inspector {
 
 class StyleDeclaration;
 
@@ -52,20 +53,21 @@ public:
     bool isImplicit() const;
     bool isFromSource() const { return m_fromSource; }
     bool isImportant() const;
     bool parsedOk() const;
 
     String rawText() const;
     void getTextRange(TextPosition& start, TextPosition& end) const;
 
     String propertyName() const;
     String propertyValue() const;
+    WebCore::CSSPropertyID propertyId() const;
     String shorthandPropertyName() const;
     String shorthandPropertyValue() const;
 private:
     WebCore::CSSPropertySourceData m_sourceData;
     StyleDeclaration& m_style;
     bool m_fromSource;
 };
 
 } // namespace Inspector
 
-- 
2.3.2

