From 4486644d8d4a4fcd37963ad266799676e092c2e9 Mon Sep 17 00:00:00 2001
From: "Brian J. Burg" <burg@cs.washington.edu>
Date: Tue, 3 Mar 2015 17:21:15 -0800
Subject: [PATCH] Convert TimelineRecordingContentView to have a
 ContentViewContainer.

make TimelineView a ContentView, and show it in the container.
This is a prerequisite for showing element snapshots while preserving the sidebar and overview graphs.
---
 .../UserInterface/Views/ContentView.js             |   5 +
 .../Views/ElementTrackingTimelineView.js           |   2 +-
 .../UserInterface/Views/LayoutTimelineView.js      |   2 +-
 .../UserInterface/Views/NetworkTimelineView.js     |   2 +-
 .../UserInterface/Views/OverviewTimelineView.js    |   3 +-
 .../UserInterface/Views/ScriptTimelineView.js      |   2 +-
 .../Views/TimelineRecordingContentView.css         |   6 +-
 .../Views/TimelineRecordingContentView.js          | 190 ++++++++++++++-------
 .../UserInterface/Views/TimelineView.js            |  17 +-
 9 files changed, 141 insertions(+), 88 deletions(-)

diff --git a/Source/WebInspectorUI/UserInterface/Views/ContentView.js b/Source/WebInspectorUI/UserInterface/Views/ContentView.js
index 6119fb2..e9f18ea 100644
--- a/Source/WebInspectorUI/UserInterface/Views/ContentView.js
+++ b/Source/WebInspectorUI/UserInterface/Views/ContentView.js
@@ -35,20 +35,23 @@ WebInspector.ContentView = function(representedObject)
 
         if (representedObject instanceof WebInspector.Resource)
             return new WebInspector.ResourceClusterContentView(representedObject);
 
         if (representedObject instanceof WebInspector.Script)
             return new WebInspector.ScriptContentView(representedObject);
 
         if (representedObject instanceof WebInspector.TimelineRecording)
             return new WebInspector.TimelineRecordingContentView(representedObject);
 
+        if (representedObject instanceof WebInspector.Timeline)
+            return new WebInspector.TimelineView(representedObject);
+
         if (representedObject instanceof WebInspector.DOMStorageObject)
             return new WebInspector.DOMStorageContentView(representedObject);
 
         if (representedObject instanceof WebInspector.CookieStorageObject)
             return new WebInspector.CookieStorageContentView(representedObject);
 
         if (representedObject instanceof WebInspector.DatabaseTableObject)
             return new WebInspector.DatabaseTableContentView(representedObject);
 
         if (representedObject instanceof WebInspector.DatabaseObject)
@@ -102,20 +105,22 @@ WebInspector.Object.addConstructorFunctions(WebInspector.ContentView);
 WebInspector.ContentView.isViewable = function(representedObject)
 {
     if (representedObject instanceof WebInspector.Frame)
         return true;
     if (representedObject instanceof WebInspector.Resource)
         return true;
     if (representedObject instanceof WebInspector.Script)
         return true;
     if (representedObject instanceof WebInspector.TimelineRecording)
         return true;
+    if (representedObject instanceof WebInspector.Timeline)
+        return true;
     if (representedObject instanceof WebInspector.DOMStorageObject)
         return true;
     if (representedObject instanceof WebInspector.CookieStorageObject)
         return true;
     if (representedObject instanceof WebInspector.DatabaseTableObject)
         return true;
     if (representedObject instanceof WebInspector.DatabaseObject)
         return true;
     if (representedObject instanceof WebInspector.IndexedDatabaseObjectStore)
         return true;
diff --git a/Source/WebInspectorUI/UserInterface/Views/ElementTrackingTimelineView.js b/Source/WebInspectorUI/UserInterface/Views/ElementTrackingTimelineView.js
index a198006..2b325e7 100644
--- a/Source/WebInspectorUI/UserInterface/Views/ElementTrackingTimelineView.js
+++ b/Source/WebInspectorUI/UserInterface/Views/ElementTrackingTimelineView.js
@@ -195,21 +195,21 @@ WebInspector.ElementTrackingTimelineView.prototype = {
         this.needsLayout();
     },
 
     _dataGridFiltersDidChange: function(event)
     {
         WebInspector.timelineSidebarPanel.updateFilter();
     },
 
     _dataGridNodeSelected: function(event)
     {
-        this.dispatchEventToListeners(WebInspector.TimelineView.Event.SelectionPathComponentsDidChange);
+        this.dispatchEventToListeners(WebInspector.ContentView.Event.SelectionPathComponentsDidChange);
     },
 
     _treeElementDeselected: function(treeElement)
     {
         if (treeElement.status)
             treeElement.status = "";
 
         this._updateHighlight();
     },
 
diff --git a/Source/WebInspectorUI/UserInterface/Views/LayoutTimelineView.js b/Source/WebInspectorUI/UserInterface/Views/LayoutTimelineView.js
index 79cbc96..329cab9 100644
--- a/Source/WebInspectorUI/UserInterface/Views/LayoutTimelineView.js
+++ b/Source/WebInspectorUI/UserInterface/Views/LayoutTimelineView.js
@@ -192,21 +192,21 @@ WebInspector.LayoutTimelineView.prototype = {
         this.needsLayout();
     },
 
     _dataGridFiltersDidChange: function(event)
     {
         WebInspector.timelineSidebarPanel.updateFilter();
     },
 
     _dataGridNodeSelected: function(event)
     {
-        this.dispatchEventToListeners(WebInspector.TimelineView.Event.SelectionPathComponentsDidChange);
+        this.dispatchEventToListeners(WebInspector.ContentView.Event.SelectionPathComponentsDidChange);
     },
 
     _treeElementDeselected: function(treeElement)
     {
         if (treeElement.status)
             treeElement.status = "";
 
         this._updateHighlight();
     },
 
diff --git a/Source/WebInspectorUI/UserInterface/Views/NetworkTimelineView.js b/Source/WebInspectorUI/UserInterface/Views/NetworkTimelineView.js
index 0dff492..81e9eca 100644
--- a/Source/WebInspectorUI/UserInterface/Views/NetworkTimelineView.js
+++ b/Source/WebInspectorUI/UserInterface/Views/NetworkTimelineView.js
@@ -190,21 +190,21 @@ WebInspector.NetworkTimelineView.prototype = {
         this.needsLayout();
     },
 
     _dataGridFiltersDidChange: function(event)
     {
         WebInspector.timelineSidebarPanel.updateFilter();
     },
 
     _dataGridNodeSelected: function(event)
     {
-        this.dispatchEventToListeners(WebInspector.TimelineView.Event.SelectionPathComponentsDidChange);
+        this.dispatchEventToListeners(WebInspector.ContentView.Event.SelectionPathComponentsDidChange);
     },
 
     _treeElementDeselected: function(treeElement)
     {
         if (treeElement.status)
             treeElement.status = "";
     },
 
     _treeElementSelected: function(treeElement, selectedByUser)
     {
diff --git a/Source/WebInspectorUI/UserInterface/Views/OverviewTimelineView.js b/Source/WebInspectorUI/UserInterface/Views/OverviewTimelineView.js
index 392d337..a5bc59e 100644
--- a/Source/WebInspectorUI/UserInterface/Views/OverviewTimelineView.js
+++ b/Source/WebInspectorUI/UserInterface/Views/OverviewTimelineView.js
@@ -315,21 +315,21 @@ WebInspector.OverviewTimelineView.prototype = {
         if (!sourceCodeTimeline)
             return;
 
         this._pendingRepresentedObjects.push(sourceCodeTimeline);
 
         this.needsLayout();
     },
 
     _dataGridNodeSelected: function(event)
     {
-        this.dispatchEventToListeners(WebInspector.TimelineView.Event.SelectionPathComponentsDidChange);
+        this.dispatchEventToListeners(WebInspector.ContentView.Event.SelectionPathComponentsDidChange);
     },
 
     _treeElementDeselected: function(treeElement)
     {
         if (treeElement.status)
             treeElement.status = "";
     },
 
     _treeElementSelected: function(treeElement, selectedByUser)
     {
@@ -345,20 +345,21 @@ WebInspector.OverviewTimelineView.prototype = {
             return;
         }
 
         if (!(treeElement instanceof WebInspector.SourceCodeTimelineTreeElement)) {
             console.error("Unknown tree element selected.");
             return;
         }
 
         if (!treeElement.sourceCodeTimeline.sourceCodeLocation) {
             WebInspector.timelineSidebarPanel.showTimelineOverview();
+            this.dispatchEventToListeners(WebInspector.ContentView.Event.SelectionPathComponentsDidChange);
             return;
         }
 
         WebInspector.resourceSidebarPanel.showOriginalOrFormattedSourceCodeLocation(treeElement.sourceCodeTimeline.sourceCodeLocation);
         this._updateTreeElementWithCloseButton(treeElement);
     },
 
     _updateTreeElementWithCloseButton: function(treeElement)
     {
         if (this._closeStatusButton) {
diff --git a/Source/WebInspectorUI/UserInterface/Views/ScriptTimelineView.js b/Source/WebInspectorUI/UserInterface/Views/ScriptTimelineView.js
index 9502f87..9b08ecf 100644
--- a/Source/WebInspectorUI/UserInterface/Views/ScriptTimelineView.js
+++ b/Source/WebInspectorUI/UserInterface/Views/ScriptTimelineView.js
@@ -236,21 +236,21 @@ WebInspector.ScriptTimelineView.prototype = {
         this.needsLayout();
     },
 
     _dataGridFiltersDidChange: function(event)
     {
         WebInspector.timelineSidebarPanel.updateFilter();
     },
 
     _dataGridNodeSelected: function(event)
     {
-        this.dispatchEventToListeners(WebInspector.TimelineView.Event.SelectionPathComponentsDidChange);
+        this.dispatchEventToListeners(WebInspector.ContentView.Event.SelectionPathComponentsDidChange);
     },
 
     _treeElementDeselected: function(treeElement)
     {
         if (treeElement.status)
             treeElement.status = "";
     },
 
     _treeElementSelected: function(treeElement, selectedByUser)
     {
diff --git a/Source/WebInspectorUI/UserInterface/Views/TimelineRecordingContentView.css b/Source/WebInspectorUI/UserInterface/Views/TimelineRecordingContentView.css
index 392bebd..2c2a1a3 100644
--- a/Source/WebInspectorUI/UserInterface/Views/TimelineRecordingContentView.css
+++ b/Source/WebInspectorUI/UserInterface/Views/TimelineRecordingContentView.css
@@ -23,27 +23,27 @@
  * THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 .content-view.timeline-recording > .timeline-overview {
     position: absolute;
     top: 0;
     left: 0;
     right: 0;
 }
 
-.content-view.timeline-recording > .view-container {
+.content-view.timeline-recording > .content-view-container {
     position: absolute;
     left: 0;
     right: 0;
     bottom: 0;
     overflow: hidden;
 }
 
-.content-view.timeline-recording > .view-container > .timeline-view > .data-grid td {
+.content-view.timeline-recording > .content-view-container > .timeline-view > .data-grid td {
     height: 16px;
     line-height: 16px;
 }
 
-.content-view.timeline-recording > .view-container > .timeline-view > .data-grid table.data {
+.content-view.timeline-recording > .content-view-container > .timeline-view > .data-grid table.data {
     background-image: linear-gradient(to bottom, white, white 50%, rgb(243, 243, 243) 50%, rgb(243, 243, 243));
     background-size: 100% 40px;
 }
diff --git a/Source/WebInspectorUI/UserInterface/Views/TimelineRecordingContentView.js b/Source/WebInspectorUI/UserInterface/Views/TimelineRecordingContentView.js
index 6b1b441..77ea5bb 100644
--- a/Source/WebInspectorUI/UserInterface/Views/TimelineRecordingContentView.js
+++ b/Source/WebInspectorUI/UserInterface/Views/TimelineRecordingContentView.js
@@ -28,81 +28,86 @@ WebInspector.TimelineRecordingContentView = function(recording)
     WebInspector.ContentView.call(this, recording);
 
     this._recording = recording;
 
     this.element.classList.add(WebInspector.TimelineRecordingContentView.StyleClassName);
 
     this._timelineOverview = new WebInspector.TimelineOverview(this._recording);
     this._timelineOverview.addEventListener(WebInspector.TimelineOverview.Event.TimeRangeSelectionChanged, this._timeRangeSelectionChanged, this);
     this.element.appendChild(this._timelineOverview.element);
 
-    this._viewContainerElement = document.createElement("div");
-    this._viewContainerElement.classList.add(WebInspector.TimelineRecordingContentView.ViewContainerStyleClassName);
-    this.element.appendChild(this._viewContainerElement);
+    this._contentViewContainer = new WebInspector.ContentViewContainer();
+    this._contentViewContainer.addEventListener(WebInspector.ContentViewContainer.Event.CurrentContentViewDidChange, this._currentContentViewDidChange, this);
+    this.element.appendChild(this._contentViewContainer.element);
 
     var trashImage;
     if (WebInspector.Platform.isLegacyMacOS)
         trashImage = {src: "Images/Legacy/NavigationItemTrash.svg", width: 16, height: 16};
     else
         trashImage = {src: "Images/NavigationItemTrash.svg", width: 15, height: 15};
 
     this._clearTimelineNavigationItem = new WebInspector.ButtonNavigationItem("clear-timeline", WebInspector.UIString("Clear Timeline"), trashImage.src, trashImage.width, trashImage.height);
     this._clearTimelineNavigationItem.addEventListener(WebInspector.ButtonNavigationItem.Event.Clicked, this._clearTimeline, this);
 
     this._overviewTimelineView = new WebInspector.OverviewTimelineView(recording);
     this._overviewTimelineView.secondsPerPixel = this._timelineOverview.secondsPerPixel;
 
     this._timelineViewMap = new Map;
     this._pathComponentMap = new Map;
 
-    this._currentTimelineView = null;
-    this._currentTimelineViewIdentifier = null;
-
     this._updating = false;
     this._currentTime = NaN;
     this._lastUpdateTimestamp = NaN;
     this._startTimeNeedsReset = true;
 
     this._recording.addEventListener(WebInspector.TimelineRecording.Event.TimelineAdded, this._timelineAdded, this);
     this._recording.addEventListener(WebInspector.TimelineRecording.Event.TimelineRemoved, this._timelineRemoved, this);
     this._recording.addEventListener(WebInspector.TimelineRecording.Event.Reset, this._recordingReset, this);
     this._recording.addEventListener(WebInspector.TimelineRecording.Event.Unloaded, this._recordingUnloaded, this);
 
     WebInspector.timelineManager.addEventListener(WebInspector.TimelineManager.Event.CapturingStarted, this._capturingStarted, this);
     WebInspector.timelineManager.addEventListener(WebInspector.TimelineManager.Event.CapturingStopped, this._capturingStopped, this);
 
     WebInspector.debuggerManager.addEventListener(WebInspector.DebuggerManager.Event.Paused, this._debuggerPaused, this);
     WebInspector.debuggerManager.addEventListener(WebInspector.DebuggerManager.Event.Resumed, this._debuggerResumed, this);
 
+    WebInspector.ContentView.addEventListener(WebInspector.ContentView.Event.SelectionPathComponentsDidChange, this._contentViewSelectionPathComponentDidChange, this);
+    WebInspector.ContentView.addEventListener(WebInspector.ContentView.Event.SupplementalRepresentedObjectsDidChange, this._contentViewSupplementalRepresentedObjectsDidChange, this);
+
     for (var timeline of this._recording.timelines.values())
         this._timelineAdded(timeline);
 
     this.showOverviewTimelineView();
 };
 
 WebInspector.TimelineRecordingContentView.StyleClassName = "timeline-recording";
-WebInspector.TimelineRecordingContentView.ViewContainerStyleClassName = "view-container";
 
 WebInspector.TimelineRecordingContentView.SelectedTimelineTypeCookieKey = "timeline-recording-content-view-selected-timeline-type";
 WebInspector.TimelineRecordingContentView.OverviewTimelineViewCookieValue = "timeline-recording-content-view-overview-timeline-view";
 
 WebInspector.TimelineRecordingContentView.prototype = {
     constructor: WebInspector.TimelineRecordingContentView,
     __proto__: WebInspector.ContentView.prototype,
 
     // Public
 
     showOverviewTimelineView: function()
     {
         this._showTimelineView(this._overviewTimelineView);
     },
 
+    showContentViewForRecord: function(timelineRecord)
+    {
+        console.assert(timelineRecord instanceof WebInspector.TimelineRecord, timelineRecord);
+        this._contentViewContainer.showContentViewForRepresentedObject(timelineRecord.representedObject);
+    },
+
     showTimelineViewForTimeline: function(timeline)
     {
         console.assert(timeline instanceof WebInspector.Timeline, timeline);
         console.assert(this._timelineViewMap.has(timeline), timeline);
         if (!this._timelineViewMap.has(timeline))
             return;
 
         this._showTimelineView(this._timelineViewMap.get(timeline));
     },
 
@@ -112,103 +117,154 @@ WebInspector.TimelineRecordingContentView.prototype = {
     },
 
     get supportsSplitContentBrowser()
     {
         // The layout of the overview and split content browser don't work well.
         return false;
     },
 
     get selectionPathComponents()
     {
-        var pathComponents = [];
-        if (this._currentTimelineView.representedObject instanceof WebInspector.Timeline)
-            pathComponents.push(this._pathComponentMap.get(this._currentTimelineView.representedObject));
-        pathComponents = pathComponents.concat(this._currentTimelineView.selectionPathComponents || []);
+        if (!this._contentViewContainer.currentContentView)
+            return [];
+
+        var pathComponents = this._contentViewContainer.currentContentView.selectionPathComponents || [];
+        var representedObject = this._contentViewContainer.currentContentView.representedObject;
+        if (representedObject instanceof WebInspector.Timeline)
+            pathComponents.unshift(this._pathComponentMap.get(representedObject));
         return pathComponents;
     },
 
+    get supplementalRepresentedObjects()
+    {
+        if (!this._contentViewContainer.currentContentView)
+            return [];
+        return this._contentViewContainer.currentContentView.supplementalRepresentedObjects;
+    },
+
     get navigationItems()
     {
         return [this._clearTimelineNavigationItem];
     },
 
+    get handleCopyEvent()
+    {
+        var currentContentView = this._contentViewContainer.currentContentView;
+        return currentContentView && typeof currentContentView.handleCopyEvent === "function" ? currentContentView.handleCopyEvent.bind(currentContentView) : null;
+    },
+
+    get supportsSave()
+    {
+        var currentContentView = this._contentViewContainer.currentContentView;
+        return currentContentView && currentContentView.supportsSave;
+    },
+
+    get saveData()
+    {
+        var currentContentView = this._contentViewContainer.currentContentView;
+        return currentContentView && currentContentView.saveData || null;
+    },
+
     get currentTimelineView()
     {
-        return this._currentTimelineView;
+        var contentView = this._contentViewContainer.currentContentView;
+        return (contentView instanceof WebInspector.TimelineView) ? contentView : null;
     },
 
     shown: function()
     {
-        if (!this._currentTimelineView)
-            return;
-
         this._timelineOverview.shown();
-        this._currentTimelineView.shown();
+        this._contentViewContainer.shown();
         this._clearTimelineNavigationItem.enabled = this._recording.isWritable();
 
         if (!this._updating && WebInspector.timelineManager.activeRecording === this._recording && WebInspector.timelineManager.isCapturing())
             this._startUpdatingCurrentTime();
     },
 
     hidden: function()
     {
-        if (!this._currentTimelineView)
-            return;
-
         this._timelineOverview.hidden();
-        this._currentTimelineView.hidden();
+        this._contentViewContainer.hidden();
 
         if (this._updating)
             this._stopUpdatingCurrentTime();
     },
 
-    filterDidChange: function()
+    closed: function()
     {
-        if (!this._currentTimelineView)
-            return;
+        this._contentViewContainer.closeAllContentViews();
+
+        WebInspector.ContentView.removeEventListener(WebInspector.ContentView.Event.SelectionPathComponentsDidChange, this._contentViewSelectionPathComponentDidChange, this);
+        WebInspector.ContentView.removeEventListener(WebInspector.ContentView.Event.SupplementalRepresentedObjectsDidChange, this._contentViewSupplementalRepresentedObjectsDidChange, this);
+    },
+
+    canGoBack: function()
+    {
+        return this._contentViewContainer.canGoBack();
+    },
+
+    canGoForward: function()
+    {
+        return this._contentViewContainer.canGoForward();
+    },
+
+    goBack: function()
+    {
+        this._contentViewContainer.goBack();
+    },
 
-        this._currentTimelineView.filterDidChange();
+    goForward: function()
+    {
+        this._contentViewContainer.goForward();
     },
 
     updateLayout: function()
     {
         this._timelineOverview.updateLayoutForResize();
 
-        if (!this._currentTimelineView)
-            return;
-
-        this._currentTimelineView.updateLayout();
+        var currentContentView = this._contentViewContainer.currentContentView;
+        if (currentContentView)
+            currentContentView.updateLayout();
     },
 
     saveToCookie: function(cookie)
     {
         cookie.type = WebInspector.ContentViewCookieType.Timelines;
 
-        if (!this._currentTimelineView || this._currentTimelineView === this._overviewTimelineView)
+        var currentContentView = this._contentViewContainer.currentContentView;
+        if (!currentContentView || currentContentView === this._overviewTimelineView)
             cookie[WebInspector.TimelineRecordingContentView.SelectedTimelineTypeCookieKey] = WebInspector.TimelineRecordingContentView.OverviewTimelineViewCookieValue;
-        else
-            cookie[WebInspector.TimelineRecordingContentView.SelectedTimelineTypeCookieKey] = this._currentTimelineView.representedObject.type;
+        else if (currentContentView.representedObject instanceof WebInspector.Timeline)
+            cookie[WebInspector.TimelineRecordingContentView.SelectedTimelineTypeCookieKey] = this.currentTimelineView.representedObject.type;
     },
 
     restoreFromCookie: function(cookie)
     {
         var timelineType = cookie[WebInspector.TimelineRecordingContentView.SelectedTimelineTypeCookieKey];
 
         if (timelineType === WebInspector.TimelineRecordingContentView.OverviewTimelineViewCookieValue)
             this.showOverviewTimelineView();
         else
             this.showTimelineViewForTimeline(this.representedObject.timelines.get(timelineType));
     },
 
+    filterDidChange: function()
+    {
+        if (!this.currentTimelineView)
+            return;
+
+        this.currentTimelineView.filterDidChange();
+    },
+
     matchTreeElementAgainstCustomFilters: function(treeElement)
     {
-        if (this._currentTimelineView && !this._currentTimelineView.matchTreeElementAgainstCustomFilters(treeElement))
+        if (this.currentTimelineView && !this.currentTimelineView.matchTreeElementAgainstCustomFilters(treeElement))
             return false;
 
         var startTime = this._timelineOverview.selectionStartTime;
         var endTime = this._timelineOverview.selectionStartTime + this._timelineOverview.selectionDuration;
         var currentTime = this._currentTime || this._recording.startTime;
 
         function checkTimeBounds(itemStartTime, itemEndTime)
         {
             itemStartTime = itemStartTime || currentTime;
             itemEndTime = itemEndTime || currentTime;
@@ -250,65 +306,63 @@ WebInspector.TimelineRecordingContentView.prototype = {
             var record = treeElement.record;
             return checkTimeBounds(record.startTime, record.endTime);
         }
 
         console.error("Unknown TreeElement, can't filter by time.");
         return true;
     },
 
     // Private
 
+    _currentContentViewDidChange: function(event)
+    {
+        this.dispatchEventToListeners(WebInspector.ContentView.Event.SelectionPathComponentsDidChange);
+        this.dispatchEventToListeners(WebInspector.ContentView.Event.NavigationItemsDidChange);
+    },
+
     _pathComponentSelected: function(event)
     {
         WebInspector.timelineSidebarPanel.showTimelineViewForTimeline(event.data.pathComponent.representedObject);
     },
 
-    _timelineViewSelectionPathComponentsDidChange: function()
+    _contentViewSelectionPathComponentDidChange: function(event)
     {
+        if (event.target !== this._contentViewContainer.currentContentView)
+            return;
         this.dispatchEventToListeners(WebInspector.ContentView.Event.SelectionPathComponentsDidChange);
     },
 
+    _contentViewSupplementalRepresentedObjectsDidChange: function(event)
+    {
+        if (event.target !== this._contentViewContainer.currentContentView)
+            return;
+        this.dispatchEventToListeners(WebInspector.ContentView.Event.SupplementalRepresentedObjectsDidChange);
+    },
+
     _showTimelineView: function(timelineView)
     {
         console.assert(timelineView instanceof WebInspector.TimelineView);
+        if (!timelineView)
+            return;
         console.assert(timelineView.representedObject === this._recording || this._recording.timelines.has(timelineView.representedObject.type));
 
         // If the content view is shown and then hidden, we must reattach the content tree outline and timeline view.
-        if (timelineView.visible && timelineView === this._currentTimelineView)
+        if (timelineView.visible && timelineView === this.currentTimelineView)
             return;
 
-        if (this._currentTimelineView) {
-            this._currentTimelineView.removeEventListener(WebInspector.TimelineView.Event.SelectionPathComponentsDidChange, this._timelineViewSelectionPathComponentsDidChange, this);
-
-            this._currentTimelineView.hidden();
-            this._currentTimelineView.element.remove();
-        }
-
-        this._currentTimelineView = timelineView;
+        WebInspector.timelineSidebarPanel.contentTreeOutline = timelineView.navigationSidebarTreeOutline;
+        WebInspector.timelineSidebarPanel.contentTreeOutlineLabel = timelineView.navigationSidebarTreeOutlineLabel;
 
-        WebInspector.timelineSidebarPanel.contentTreeOutline = timelineView && timelineView.navigationSidebarTreeOutline;
-        WebInspector.timelineSidebarPanel.contentTreeOutlineLabel = timelineView && timelineView.navigationSidebarTreeOutlineLabel;
-
-        if (this._currentTimelineView) {
-            this._currentTimelineView.addEventListener(WebInspector.TimelineView.Event.SelectionPathComponentsDidChange, this._timelineViewSelectionPathComponentsDidChange, this);
-
-            this._viewContainerElement.appendChild(this._currentTimelineView.element);
-
-            this._currentTimelineView.startTime = this._timelineOverview.selectionStartTime;
-            this._currentTimelineView.endTime = this._timelineOverview.selectionStartTime + this._timelineOverview.selectionDuration;
-            this._currentTimelineView.currentTime = this._currentTime;
-
-            this._currentTimelineView.shown();
-            this._currentTimelineView.updateLayout();
-        }
-
-        this.dispatchEventToListeners(WebInspector.ContentView.Event.SelectionPathComponentsDidChange);
+        timelineView.startTime = this._timelineOverview.selectionStartTime;
+        timelineView.endTime = this._timelineOverview.selectionStartTime + this._timelineOverview.selectionDuration;
+        timelineView.currentTime = this._currentTime;
+        this._contentViewContainer.showContentView(timelineView);
     },
 
     _update: function(timestamp)
     {
         if (this._waitingToResetCurrentTime) {
             requestAnimationFrame(this._updateCallback);
             return;
         }
 
         var startTime = this._recording.startTime;
@@ -343,27 +397,29 @@ WebInspector.TimelineRecordingContentView.prototype = {
             for (var timelineView of this._timelineViewMap.values())
                 timelineView.zeroTime = startTime;
 
             delete this._startTimeNeedsReset;
         }
 
         this._timelineOverview.endTime = Math.max(endTime, currentTime);
 
         this._currentTime = currentTime;
         this._timelineOverview.currentTime = currentTime;
-        this._currentTimelineView.currentTime = currentTime;
+        if (this.currentTimelineView)
+            this.currentTimelineView.currentTime = currentTime;
 
         WebInspector.timelineSidebarPanel.updateFilter();
 
         // Force a layout now since we are already in an animation frame and don't need to delay it until the next.
         this._timelineOverview.updateLayoutIfNeeded();
-        this._currentTimelineView.updateLayoutIfNeeded();
+        if (this.currentTimelineView)
+            this.currentTimelineView.updateLayoutIfNeeded();
     },
 
     _startUpdatingCurrentTime: function()
     {
         console.assert(!this._updating);
         if (this._updating)
             return;
 
         if (!isNaN(this._currentTime)) {
             // We have a current time already, so we likely need to jump into the future to a better current time.
@@ -464,21 +520,21 @@ WebInspector.TimelineRecordingContentView.prototype = {
         this._timelineCountChanged();
     },
 
     _timelineRemoved: function(event)
     {
         var timeline = event.data.timeline;
         console.assert(timeline instanceof WebInspector.Timeline, timeline);
         console.assert(this._timelineViewMap.has(timeline), timeline);
 
         var timelineView = this._timelineViewMap.take(timeline);
-        if (this._currentTimelineView === timelineView)
+        if (this.currentTimelineView === timelineView)
             this.showOverviewTimelineView();
 
         this._pathComponentMap.delete(timeline);
 
         this._timelineCountChanged();
     },
 
     _timelineCountChanged: function()
     {
         var previousPathComponent = null;
@@ -488,21 +544,21 @@ WebInspector.TimelineRecordingContentView.prototype = {
                 pathComponent.previousSibling = previousPathComponent;
             }
 
             previousPathComponent = pathComponent;
         }
 
         var timelineCount = this._recording.timelines.size;
         const timelineHeight = 36;
         const extraOffset = 22;
         this._timelineOverview.element.style.height = (timelineCount * timelineHeight + extraOffset) + "px";
-        this._viewContainerElement.style.top = (timelineCount * timelineHeight + extraOffset) + "px";
+        this._contentViewContainer.element.style.top = (timelineCount * timelineHeight + extraOffset) + "px";
     },
 
     _recordingReset: function(event)
     {
         this._currentTime = NaN;
 
         if (!this._updating) {
             // Force the time ruler and views to reset to 0.
             this._startTimeNeedsReset = true;
             this._updateTimes(0, 0, 0);
@@ -523,25 +579,27 @@ WebInspector.TimelineRecordingContentView.prototype = {
     _recordingUnloaded: function(event)
     {
         console.assert(!this._updating);
 
         WebInspector.timelineManager.removeEventListener(WebInspector.TimelineManager.Event.CapturingStarted, this._capturingStarted, this);
         WebInspector.timelineManager.removeEventListener(WebInspector.TimelineManager.Event.CapturingStopped, this._capturingStopped, this);
     },
 
     _timeRangeSelectionChanged: function(event)
     {
-        this._currentTimelineView.startTime = this._timelineOverview.selectionStartTime;
-        this._currentTimelineView.endTime = this._timelineOverview.selectionStartTime + this._timelineOverview.selectionDuration;
+        if (this.currentTimelineView) {
+            this.currentTimelineView.startTime = this._timelineOverview.selectionStartTime;
+            this.currentTimelineView.endTime = this._timelineOverview.selectionStartTime + this._timelineOverview.selectionDuration;
+        }
 
         // Delay until the next frame to stay in sync with the current timeline view's time-based layout changes.
         requestAnimationFrame(function() {
-            var selectedTreeElement = this._currentTimelineView && this._currentTimelineView.navigationSidebarTreeOutline ? this._currentTimelineView.navigationSidebarTreeOutline.selectedTreeElement : null;
+            var selectedTreeElement = this.currentTimelineView && this.currentTimelineView.navigationSidebarTreeOutline ? this.currentTimelineView.navigationSidebarTreeOutline.selectedTreeElement : null;
             var selectionWasHidden = selectedTreeElement && selectedTreeElement.hidden;
 
             WebInspector.timelineSidebarPanel.updateFilter();
 
             if (selectedTreeElement && selectedTreeElement.hidden !== selectionWasHidden)
                 this.dispatchEventToListeners(WebInspector.ContentView.Event.SelectionPathComponentsDidChange);
         }.bind(this));
     }
 };
diff --git a/Source/WebInspectorUI/UserInterface/Views/TimelineView.js b/Source/WebInspectorUI/UserInterface/Views/TimelineView.js
index 811304a..164d07a 100644
--- a/Source/WebInspectorUI/UserInterface/Views/TimelineView.js
+++ b/Source/WebInspectorUI/UserInterface/Views/TimelineView.js
@@ -42,53 +42,42 @@ WebInspector.TimelineView = function(representedObject)
 
         if (timelineType === WebInspector.TimelineRecord.Type.ElementTracking)
             return new WebInspector.ElementTrackingTimelineView(representedObject);
 
         throw Error("Can't make a Timeline for an unknown representedObject.");
     }
 
     // Concrete object instantiation.
     console.assert(this.constructor !== WebInspector.TimelineView && this instanceof WebInspector.TimelineView);
 
-    WebInspector.Object.call(this);
+    WebInspector.ContentView.call(this, representedObject);
 
     console.assert(representedObject instanceof WebInspector.Timeline || representedObject instanceof WebInspector.TimelineRecording);
-    this._representedObject = representedObject;
 
     this._contentTreeOutline = WebInspector.timelineSidebarPanel.createContentTreeOutline();
 
-    this.element = document.createElement("div");
     this.element.classList.add(WebInspector.TimelineView.StyleClassName);
 
     this._zeroTime = 0;
     this._startTime = 0;
     this._endTime = 5;
     this._currentTime = 0;
 };
 
 WebInspector.TimelineView.StyleClassName = "timeline-view";
 
-WebInspector.TimelineView.Event = {
-    SelectionPathComponentsDidChange: "timeline-view-selection-path-components-did-change"
-};
-
 WebInspector.TimelineView.prototype = {
     constructor: WebInspector.TimelineView,
-    __proto__: WebInspector.Object.prototype,
+    __proto__: WebInspector.ContentView.prototype,
 
     // Public
 
-    get representedObject()
-    {
-        return this._representedObject;
-    },
-
     get navigationSidebarTreeOutline()
     {
         return this._contentTreeOutline;
     },
 
     get navigationSidebarTreeOutlineLabel()
     {
         // Implemented by sub-classes if needed.
         return null;
     },
@@ -220,21 +209,21 @@ WebInspector.TimelineView.prototype = {
 
     updateLayoutIfNeeded: function()
     {
         if (!this._scheduledLayoutUpdateIdentifier)
             return;
         this.updateLayout();
     },
 
     filterUpdated: function()
     {
-        this.dispatchEventToListeners(WebInspector.TimelineView.Event.SelectionPathComponentsDidChange);
+        this.dispatchEventToListeners(WebInspector.ContentView.Event.SelectionPathComponentsDidChange);
     },
 
     // Protected
 
     treeElementPathComponentSelected: function(event)
     {
         // Implemented by sub-classes if needed.
     },
 
     needsLayout: function()
-- 
2.2.2

