From aaee0c0e2e6668865f42c7b82486389e11357c3f Mon Sep 17 00:00:00 2001
From: "Brian J. Burg" <burg@cs.washington.edu>
Date: Wed, 4 Mar 2015 15:46:47 -0800
Subject: [PATCH] Show the ElementSnapshotContentView inside the
 TimelineRecordingContentView's container.

 - Construct path components that include the selected timeline and components for the container's content view.
 - Add icons and tasteful titles/subtitles for Element Snapshot path components and "Output Changed" record tree elements.
---
 .../Localizations/en.lproj/localizedStrings.js     | Bin 60812 -> 60910 bytes
 .../UserInterface/Models/ElementSnapshot.js        |   5 ++-
 .../Models/ElementTrackingTimeline.js              |   5 +++
 .../Views/ElementSnapshotContentView.js            |   9 +++++
 .../Views/ElementTrackingTimelineView.js           |   8 +---
 .../UserInterface/Views/LayoutTimelineView.js      |   5 +--
 .../UserInterface/Views/TimelineIcons.css          |   4 ++
 .../Views/TimelineRecordTreeElement.js             |   4 +-
 .../Views/TimelineRecordingContentView.js          |  27 +++++++++----
 .../UserInterface/Views/TimelineSidebarPanel.js    |  42 +++++++++++++++++++--
 10 files changed, 85 insertions(+), 24 deletions(-)

diff --git a/Source/WebInspectorUI/Localizations/en.lproj/localizedStrings.js b/Source/WebInspectorUI/Localizations/en.lproj/localizedStrings.js
index ad730659143fe78092b2e241113a55459a05a8dd..72da1851573b9ca6b20e634f8c74e32cdda4d085 100644
GIT binary patch
delta 48
ucmeCV&HU~*^9GIc+<6R%3<V6u3>gghlli4Zd4m~{MQo*vH>;gblLG*NR1S6k

delta 14
WcmaENo4MyU^9GIco4d}Z$N>O5ZU<}t

diff --git a/Source/WebInspectorUI/UserInterface/Models/ElementSnapshot.js b/Source/WebInspectorUI/UserInterface/Models/ElementSnapshot.js
index eac2127..e7a2d09 100644
--- a/Source/WebInspectorUI/UserInterface/Models/ElementSnapshot.js
+++ b/Source/WebInspectorUI/UserInterface/Models/ElementSnapshot.js
@@ -19,24 +19,27 @@
  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  * THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 WebInspector.ElementSnapshot = function(payload)
 {
     this.nodeId = payload.nodeId;
-    this.snapshotId = payload.snapshotId;
+    this.snapshotId = payload.snapshotId; // Used when making queries to the backend.
     this.elapsedTime = payload.elapsedTimestamp;
     this.boundingRect = WebInspector.Rect.fromObject(payload.boundingBox);
 
+    // Assigned when a record for the snapshot is added to an ElementTrackingTimeline instance.
+    this.ordinal = NaN;
+
     this._payloadPromise = null;
 }
 
 WebInspector.ElementSnapshot.prototype = {
     constructor: WebInspector.ElementSnapshot,
     __proto__: WebInspector.Object.prototype,
 
     fetchImageData: function()
     {
         if (!this._payloadPromise)
diff --git a/Source/WebInspectorUI/UserInterface/Models/ElementTrackingTimeline.js b/Source/WebInspectorUI/UserInterface/Models/ElementTrackingTimeline.js
index d9788c9..6838d33 100644
--- a/Source/WebInspectorUI/UserInterface/Models/ElementTrackingTimeline.js
+++ b/Source/WebInspectorUI/UserInterface/Models/ElementTrackingTimeline.js
@@ -19,20 +19,22 @@
  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  * THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 WebInspector.ElementTrackingTimeline = function(type)
 {
     WebInspector.Timeline.call(this, type);
+
+    this._snapshotCount = 0;
 };
 
 WebInspector.ElementTrackingTimeline.prototype = {
     constructor: WebInspector.ElementTrackingTimeline,
     __proto__: WebInspector.Timeline.prototype,
 
     // Public
 
     reset: function(suppressEvents)
     {
@@ -46,13 +48,16 @@ WebInspector.ElementTrackingTimeline.prototype = {
 
     get snapshotRecords()
     {
         return this.records.filter(function(record) { return record instanceof WebInspector.ElementTrackingTimelineRecord; });
     },
 
     addRecord: function(record)
     {
         console.assert(record.type === WebInspector.TimelineRecord.Type.ElementTracking, record);
 
+        if (record instanceof WebInspector.ElementTrackingTimelineRecord)
+            record.snapshot.ordinal = ++this._snapshotCount;
+
         WebInspector.Timeline.prototype.addRecord.call(this, record);
     }
 };
diff --git a/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotContentView.js b/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotContentView.js
index 64d5cff..81514c5 100644
--- a/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotContentView.js
+++ b/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotContentView.js
@@ -25,21 +25,30 @@
 
 WebInspector.ElementSnapshotContentView = function(snapshot)
 {
     WebInspector.ContentView.call(this, snapshot, WebInspector.ElementSnapshotContentView.StyleClassName);
 
     this._imageElement = document.createElement("img");
     this._imageElement.style.width = snapshot.boundingRect.size.width + 'px';
     this._imageElement.style.height = snapshot.boundingRect.size.height + 'px';
     this.element.appendChild(this._imageElement);
 
+    var displayName = WebInspector.UIString("Snapshot %d").format(snapshot.ordinal || " ");
+    var classNames = ["resource-icon", "resource-type-image"]; // Hack to use the DocumentImage icon for now.
+    this._pathComponent = new WebInspector.HierarchicalPathComponent(displayName, classNames, snapshot, false, false);
+
     snapshot.fetchImageData().then(function(data) {
         this._imageElement.src = this.representedObject.contentURL;
     }.bind(this));
 };
 
 WebInspector.ElementSnapshotContentView.StyleClassName = "element-snapshot";
 
 WebInspector.ElementSnapshotContentView.prototype = {
     constructor: WebInspector.ElementSnapshotContentView,
     __proto__: WebInspector.ContentView.prototype,
+
+    get selectionPathComponents()
+    {
+        return [this._pathComponent];
+    }
 };
diff --git a/Source/WebInspectorUI/UserInterface/Views/ElementTrackingTimelineView.js b/Source/WebInspectorUI/UserInterface/Views/ElementTrackingTimelineView.js
index 2522249..98d8355 100644
--- a/Source/WebInspectorUI/UserInterface/Views/ElementTrackingTimelineView.js
+++ b/Source/WebInspectorUI/UserInterface/Views/ElementTrackingTimelineView.js
@@ -224,28 +224,22 @@ WebInspector.ElementTrackingTimelineView.prototype = {
         if (treeElement instanceof WebInspector.FolderTreeElement)
             return;
 
         if (!(treeElement instanceof WebInspector.TimelineRecordTreeElement)) {
             console.error("Unknown tree element selected.");
             return;
         }
 
         this._updateHighlight();
 
-        if (treeElement.record.sourceCodeLocation)
-            WebInspector.resourceSidebarPanel.showOriginalOrFormattedSourceCodeLocation(treeElement.record.sourceCodeLocation);
-        else if (treeElement.representedObject instanceof WebInspector.ElementTrackingTimelineRecord)
-            WebInspector.contentBrowser.showContentViewForRepresentedObject(treeElement.representedObject.snapshot);
-        else {
-            WebInspector.timelineSidebarPanel.showTimelineViewForTimeline(this.representedObject);
+        if (!WebInspector.timelineSidebarPanel.showContentViewForRecord(treeElement.record))
             return;
-        }
 
         this._updateTreeElementWithCloseButton(treeElement);
     },
 
     _updateTreeElementWithCloseButton: function(treeElement)
     {
         if (this._closeStatusButton) {
             treeElement.status = this._closeStatusButton.element;
             return;
         }
diff --git a/Source/WebInspectorUI/UserInterface/Views/LayoutTimelineView.js b/Source/WebInspectorUI/UserInterface/Views/LayoutTimelineView.js
index 13776eb..7170c0f 100644
--- a/Source/WebInspectorUI/UserInterface/Views/LayoutTimelineView.js
+++ b/Source/WebInspectorUI/UserInterface/Views/LayoutTimelineView.js
@@ -221,26 +221,23 @@ WebInspector.LayoutTimelineView.prototype = {
         if (treeElement instanceof WebInspector.FolderTreeElement)
             return;
 
         if (!(treeElement instanceof WebInspector.TimelineRecordTreeElement)) {
             console.error("Unknown tree element selected.");
             return;
         }
 
         this._updateHighlight();
 
-        if (!treeElement.record.sourceCodeLocation) {
-            WebInspector.timelineSidebarPanel.showTimelineViewForTimeline(this.representedObject);
+        if (!WebInspector.timelineSidebarPanel.showContentViewForRecord(treeElement.record))
             return;
-        }
 
-        WebInspector.resourceSidebarPanel.showOriginalOrFormattedSourceCodeLocation(treeElement.record.sourceCodeLocation);
         this._updateTreeElementWithCloseButton(treeElement);
     },
 
     _updateTreeElementWithCloseButton: function(treeElement)
     {
         if (this._closeStatusButton) {
             treeElement.status = this._closeStatusButton.element;
             return;
         }
 
diff --git a/Source/WebInspectorUI/UserInterface/Views/TimelineIcons.css b/Source/WebInspectorUI/UserInterface/Views/TimelineIcons.css
index 669081d..2bc3042 100644
--- a/Source/WebInspectorUI/UserInterface/Views/TimelineIcons.css
+++ b/Source/WebInspectorUI/UserInterface/Views/TimelineIcons.css
@@ -112,17 +112,21 @@ body.mac-platform.legacy .colors-icon.large .icon {
 }
 
 .probe-record .icon {
     content: url(../Images/TimelineRecordProbeSampled.svg);
 }
 
 .console-profile-record .icon {
     content: url(../Images/TimelineRecordConsoleProfile.svg);
 }
 
+.output-changed-record .icon {
+    content: -webkit-image-set(url(../Images/DocumentImage.png) 1x, url(../Images/DocumentImage@2x.png) 2x);
+}
+
 .timer-record .icon {
     content: url(../Images/TimelineRecordTimer.svg);
 }
 
 .animation-record .icon {
     content: url(../Images/TimelineRecordAnimation.svg);
 }
diff --git a/Source/WebInspectorUI/UserInterface/Views/TimelineRecordTreeElement.js b/Source/WebInspectorUI/UserInterface/Views/TimelineRecordTreeElement.js
index 9f989f2..16559c1 100644
--- a/Source/WebInspectorUI/UserInterface/Views/TimelineRecordTreeElement.js
+++ b/Source/WebInspectorUI/UserInterface/Views/TimelineRecordTreeElement.js
@@ -100,21 +100,22 @@ WebInspector.TimelineRecordTreeElement = function(timelineRecord, subtitleNameSt
         break;
 
     case WebInspector.TimelineRecord.Type.RunLoop:
         title = WebInspector.UIString("Runloop Executed");
         iconStyleClass = WebInspector.TimelineRecordTreeElement.RunLoopRecordIconStyleClass;
         break;
 
     case WebInspector.TimelineRecord.Type.ElementTracking:
         if (timelineRecord instanceof WebInspector.ElementTrackingTimelineRecord) {
             title = WebInspector.ElementTrackingTimelineRecord.displayNameForEventType(timelineRecord.eventType);
-            iconStyleClass = WebInspector.TimelineRecordTreeElement.AnimationRecordIconStyleClass;
+            subtitle = WebInspector.UIString("Snapshot %d").format(timelineRecord.snapshot.ordinal || " ");
+            iconStyleClass = WebInspector.TimelineRecordTreeElement.OutputChangedIconStyleClass;
         }
 
         if (timelineRecord instanceof WebInspector.TraceOperationTimelineRecord) {
             title = WebInspector.TraceOperationTimelineRecord.displayNameForEventType(timelineRecord.eventType);
             iconStyleClass = WebInspector.TimelineRecordTreeElement.EvaluatedRecordIconStyleClass;
         }
         break;
 
     default:
         console.error("Unknown TimelineRecord type: " + timelineRecord.type, timelineRecord);
@@ -130,20 +131,21 @@ WebInspector.TimelineRecordTreeElement = function(timelineRecord, subtitleNameSt
 
 WebInspector.TimelineRecordTreeElement.StyleRecordIconStyleClass = "style-record";
 WebInspector.TimelineRecordTreeElement.LayoutRecordIconStyleClass = "layout-record";
 WebInspector.TimelineRecordTreeElement.PaintRecordIconStyleClass = "paint-record";
 WebInspector.TimelineRecordTreeElement.RunLoopRecordIconStyleClass = "runloop-record";
 WebInspector.TimelineRecordTreeElement.EvaluatedRecordIconStyleClass = "evaluated-record";
 WebInspector.TimelineRecordTreeElement.EventRecordIconStyleClass = "event-record";
 WebInspector.TimelineRecordTreeElement.TimerRecordIconStyleClass = "timer-record";
 WebInspector.TimelineRecordTreeElement.AnimationRecordIconStyleClass = "animation-record";
 WebInspector.TimelineRecordTreeElement.ProbeRecordIconStyleClass = "probe-record";
+WebInspector.TimelineRecordTreeElement.OutputChangedIconStyleClass = "output-changed-record";
 WebInspector.TimelineRecordTreeElement.ConsoleProfileIconStyleClass = "console-profile-record";
 
 WebInspector.TimelineRecordTreeElement.prototype = {
     constructor: WebInspector.TimelineRecordTreeElement,
     __proto__: WebInspector.GeneralTreeElement.prototype,
 
     // Public
 
     get record()
     {
diff --git a/Source/WebInspectorUI/UserInterface/Views/TimelineRecordingContentView.js b/Source/WebInspectorUI/UserInterface/Views/TimelineRecordingContentView.js
index 1419755..f0d7d0b 100644
--- a/Source/WebInspectorUI/UserInterface/Views/TimelineRecordingContentView.js
+++ b/Source/WebInspectorUI/UserInterface/Views/TimelineRecordingContentView.js
@@ -89,20 +89,25 @@ WebInspector.TimelineRecordingContentView.prototype = {
     constructor: WebInspector.TimelineRecordingContentView,
     __proto__: WebInspector.ContentView.prototype,
 
     // Public
 
     showOverviewTimelineView: function()
     {
         this._contentViewContainer.showContentView(this._overviewTimelineView);
     },
 
+    showContentViewForRepresentedObject: function(representedObject)
+    {
+        this._contentViewContainer.showContentViewForRepresentedObject(representedObject);
+    },
+
     showTimelineViewForTimeline: function(timeline)
     {
         console.assert(timeline instanceof WebInspector.Timeline, timeline);
         console.assert(this._timelineViewMap.has(timeline), timeline);
         if (!this._timelineViewMap.has(timeline))
             return;
 
         this._contentViewContainer.showContentView(this._timelineViewMap.get(timeline));
     },
 
@@ -116,23 +121,24 @@ WebInspector.TimelineRecordingContentView.prototype = {
         // The layout of the overview and split content browser don't work well.
         return false;
     },
 
     get selectionPathComponents()
     {
         if (!this._contentViewContainer.currentContentView)
             return [];
 
         var pathComponents = this._contentViewContainer.currentContentView.selectionPathComponents || [];
-        var representedObject = this._contentViewContainer.currentContentView.representedObject;
-        if (representedObject instanceof WebInspector.Timeline)
-            pathComponents.unshift(this._pathComponentMap.get(representedObject));
+        var selectedTimeline = WebInspector.timelineSidebarPanel.selectedTimeline;
+        if (this._pathComponentMap.has(selectedTimeline))
+            pathComponents.unshift(this._pathComponentMap.get(selectedTimeline));
+
         return pathComponents;
     },
 
     get supplementalRepresentedObjects()
     {
         if (!this._contentViewContainer.currentContentView)
             return [];
         return this._contentViewContainer.currentContentView.supplementalRepresentedObjects;
     },
 
@@ -218,30 +224,37 @@ WebInspector.TimelineRecordingContentView.prototype = {
 
         var currentContentView = this._contentViewContainer.currentContentView;
         if (currentContentView)
             currentContentView.updateLayout();
     },
 
     saveToCookie: function(cookie)
     {
         cookie.type = WebInspector.ContentViewCookieType.Timelines;
 
-        var currentContentView = this._contentViewContainer.currentContentView;
-        if (!currentContentView || currentContentView === this._overviewTimelineView)
+        var timelineView = this.currentTimelineView;
+        if (!timelineView) {
+            // FIXME: this does not save container subview state into a cookie. This could be done by saving
+            // that content view's state into the same cookie, possibly using prefixes if collisions could happen.
+        } else if (timelineView === this._overviewTimelineView)
             cookie[WebInspector.TimelineRecordingContentView.SelectedTimelineTypeCookieKey] = WebInspector.TimelineRecordingContentView.OverviewTimelineViewCookieValue;
-        else if (currentContentView.representedObject instanceof WebInspector.Timeline)
-            cookie[WebInspector.TimelineRecordingContentView.SelectedTimelineTypeCookieKey] = this.currentTimelineView.representedObject.type;
+        else if (timelineView.representedObject instanceof WebInspector.Timeline)
+            cookie[WebInspector.TimelineRecordingContentView.SelectedTimelineTypeCookieKey] = timelineView.representedObject.type;
     },
 
     restoreFromCookie: function(cookie)
     {
         var timelineType = cookie[WebInspector.TimelineRecordingContentView.SelectedTimelineTypeCookieKey];
+        // FIXME: this does not save container subview state into a cookie. This could be done by saving
+        // that content view's state into the same cookie, possibly using prefixes if collisions could happen.
+        if (!timelineType)
+            return;
 
         if (timelineType === WebInspector.TimelineRecordingContentView.OverviewTimelineViewCookieValue)
             this.showOverviewTimelineView();
         else
             this.showTimelineViewForTimeline(this.representedObject.timelines.get(timelineType));
     },
 
     filterDidChange: function()
     {
         if (!this.currentTimelineView)
diff --git a/Source/WebInspectorUI/UserInterface/Views/TimelineSidebarPanel.js b/Source/WebInspectorUI/UserInterface/Views/TimelineSidebarPanel.js
index 2136749..213ec28 100644
--- a/Source/WebInspectorUI/UserInterface/Views/TimelineSidebarPanel.js
+++ b/Source/WebInspectorUI/UserInterface/Views/TimelineSidebarPanel.js
@@ -32,21 +32,21 @@ WebInspector.TimelineSidebarPanel = function()
     this._timelineEventsTitleBarElement.classList.add(WebInspector.TimelineSidebarPanel.TimelineEventsTitleBarStyleClass);
     this.element.insertBefore(this._timelineEventsTitleBarElement, this.element.firstChild);
 
     this.contentTreeOutlineLabel = "";
 
     this._timelinesContentContainerElement = document.createElement("div");
     this._timelinesContentContainerElement.classList.add(WebInspector.TimelineSidebarPanel.TimelinesContentContainerStyleClass);
     this.element.insertBefore(this._timelinesContentContainerElement, this.element.firstChild);
 
     this._displayedRecording = null;
-    this._displayedContentView = null;
+    this._displayedContentView = null; // Always an instance of TimelineRecordingContentView.
 
     // Maintain an invisible tree outline containing tree elements for all recordings.
     // The visible recording's tree element is selected when the content view changes.
     this._recordingTreeElementMap = new Map;
     this._recordingsTreeOutline = this.createContentTreeOutline(true, true);
     this._recordingsTreeOutline.element.classList.add(WebInspector.NavigationSidebarPanel.HideDisclosureButtonsStyleClassName);
     this._recordingsTreeOutline.element.classList.add(WebInspector.NavigationSidebarPanel.ContentTreeOutlineElementHiddenStyleClassName);
     this._recordingsTreeOutline.onselect = this._recordingsTreeElementSelected.bind(this);
     this._timelinesContentContainerElement.appendChild(this._recordingsTreeOutline.element);
 
@@ -165,20 +165,26 @@ WebInspector.TimelineSidebarPanel.prototype = {
     {
         if (this._displayedContentView)
             this.showTimelineOverview();
     },
 
     get hasSelectedElement()
     {
         return !!this._contentTreeOutline.selectedTreeElement || !!this._recordingsTreeOutline.selectedTreeElement;
     },
 
+    get selectedTimeline()
+    {
+        var treeElement = this._timelinesTreeOutline.selectedTreeElement;
+        return treeElement ? treeElement.representedObject : null;
+    },
+
     treeElementForRepresentedObject: function(representedObject)
     {
         if (representedObject instanceof WebInspector.TimelineRecording)
             return this._recordingTreeElementMap.get(representedObject);
 
         // This fails if the timeline does not belong to the selected recording.
         if (representedObject instanceof WebInspector.Timeline) {
             var foundTreeElement = this._timelineTreeElementMap.get(representedObject);
             if (foundTreeElement)
                 return foundTreeElement;
@@ -258,31 +264,56 @@ WebInspector.TimelineSidebarPanel.prototype = {
 
     showTimelineOverview: function()
     {
         if (this._timelinesTreeOutline.selectedTreeElement)
             this._timelinesTreeOutline.selectedTreeElement.deselect();
 
         this._displayedContentView.showOverviewTimelineView();
         WebInspector.contentBrowser.showContentView(this._displayedContentView);
     },
 
-    showTimelineViewForTimeline: function(timeline)
+    showTimelineViewForTimeline: function(timeline, wasSelectedByUser)
     {
         console.assert(timeline instanceof WebInspector.Timeline, timeline);
         console.assert(this._timelineTreeElementMap.has(timeline), "Cannot show timeline because it does not belong to the shown recording.", timeline);
 
         // Defer showing the relevant timeline to the onselect handler of the timelines tree element.
-        const wasSelectedByUser = true;
+        wasSelectedByUser = (typeof wasSelectedByUser === "undefined") ? true : !!wasSelectedByUser;
         const shouldSuppressOnSelect = false;
         this._timelineTreeElementMap.get(timeline).select(true, wasSelectedByUser, shouldSuppressOnSelect, true);
     },
 
+    showContentViewForRecord: function(record)
+    {
+        // Only show records that belong to the currently displayed timeline recording.
+        console.assert(record instanceof WebInspector.TimelineRecord, record);
+        console.assert(this._displayedRecording);
+
+        var timeline = this._displayedRecording.timelines.get(record.type);
+        console.assert(timeline && timeline.records.indexOf(record) !== -1, timeline, record);
+
+        var didChangeView = true;
+        if (record.sourceCodeLocation)
+            WebInspector.resourceSidebarPanel.showOriginalOrFormattedSourceCodeLocation(record.sourceCodeLocation);
+        else if (record instanceof WebInspector.ElementTrackingTimelineRecord) {
+            this.showTimelineViewForTimeline(timeline, false);
+            this._displayedContentView.showContentViewForRepresentedObject(record.snapshot);
+            WebInspector.contentBrowser.showContentView(this._displayedContentView);
+        } else {
+            this.showTimelineViewForTimeline(timeline, false);
+            WebInspector.contentBrowser.showContentView(this._displayedContentView);
+            didChangeView = false;
+        }
+
+        return didChangeView;
+    },
+
     // Protected
 
     updateFilter: function()
     {
         WebInspector.NavigationSidebarPanel.prototype.updateFilter.call(this);
 
         this._displayedContentView.filterDidChange();
     },
 
     hasCustomFilters: function()
@@ -363,21 +394,24 @@ WebInspector.TimelineSidebarPanel.prototype = {
 
         this.updateFilter();
     },
 
     _timelinesTreeElementSelected: function(treeElement, selectedByUser)
     {
         console.assert(this._timelineTreeElementMap.get(treeElement.representedObject) === treeElement, treeElement);
 
         // If not selected by user, then this selection merely synced the tree element with the content view's contents.
         if (!selectedByUser) {
-            console.assert(this._displayedContentView.currentTimelineView.representedObject === treeElement.representedObject);
+            // This could be null if a non-timeline content view is being shown in the timeline recording's view container.
+            // In that case, the synthetic selection of the tree element ensures that the view container is visible.
+            var currentTimelineView = this._displayedContentView.currentTimelineView;
+            console.assert(!currentTimelineView || currentTimelineView.representedObject === treeElement.representedObject);
             return;
         }
 
         var timeline = treeElement.representedObject;
         console.assert(timeline instanceof WebInspector.Timeline, timeline);
         console.assert(this._displayedRecording.timelines.get(timeline.type) === timeline, timeline);
 
         this._displayedContentView.showTimelineViewForTimeline(timeline);
         WebInspector.contentBrowser.showContentView(this._displayedContentView);
     },
-- 
2.3.2

