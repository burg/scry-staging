From 36fbf38d1a694a34e2423072f2d53fbd600d143d Mon Sep 17 00:00:00 2001
From: "Brian J. Burg" <burg@cs.washington.edu>
Date: Thu, 5 Mar 2015 16:51:28 -0800
Subject: [PATCH] When two snapshots are selected, create an
 ElementSnapshotDiff and show it as a subview.

---
 .../Localizations/en.lproj/localizedStrings.js     | Bin 60058 -> 60232 bytes
 .../UserInterface/Controllers/DOMTracingManager.js |  32 +++
 .../WebInspectorUI/UserInterface/Images/Diff.svg   |  12 ++
 Source/WebInspectorUI/UserInterface/Main.html      |   3 +
 .../UserInterface/Models/ElementSnapshot.js        |   2 +-
 .../UserInterface/Models/ElementSnapshotDiff.js    |  39 ++++
 .../UserInterface/Views/ContentView.js             |   5 +
 .../Views/ElementSnapshotDiffContentView.css       |  37 ++++
 .../Views/ElementSnapshotDiffContentView.js        | 111 ++++++++++
 ...ElementSnapshotDiffDetailsClusterContentView.js | 225 +++++++++++++++++++++
 .../Views/ElementTrackingTimelineOverviewGraph.js  |   5 +-
 .../WebInspectorUI/UserInterface/Views/Resizer.js  |  12 +-
 .../UserInterface/Views/TimelineIcons.css          |   4 +
 .../UserInterface/Views/TimelineSidebarPanel.js    |   8 +
 14 files changed, 489 insertions(+), 6 deletions(-)
 create mode 100644 Source/WebInspectorUI/UserInterface/Images/Diff.svg
 create mode 100644 Source/WebInspectorUI/UserInterface/Models/ElementSnapshotDiff.js
 create mode 100644 Source/WebInspectorUI/UserInterface/Views/ElementSnapshotDiffContentView.css
 create mode 100644 Source/WebInspectorUI/UserInterface/Views/ElementSnapshotDiffContentView.js
 create mode 100644 Source/WebInspectorUI/UserInterface/Views/ElementSnapshotDiffDetailsClusterContentView.js

diff --git a/Source/WebInspectorUI/Localizations/en.lproj/localizedStrings.js b/Source/WebInspectorUI/Localizations/en.lproj/localizedStrings.js
index 67b8305a6ce04eaac144648dbebbd2410fa0d506..95bab004ffa5ae57406a5b2a1e41d09acf64f95b 100644
GIT binary patch
delta 146
zcmbPrmHEUq<_#ui>cbc^8B!U_859_t88R3W8S)s?f&5}1UxOhS$V+4>0P->z@)=6N
lqN)rj48jT^Qj<Z6Ar`347KoJ?$TVm2!n1~(&CaCA0RaD;9#;SW

delta 18
acmX?cjd|8p<_#uiCL5gP+5GNIlpFwB$_YgP

diff --git a/Source/WebInspectorUI/UserInterface/Controllers/DOMTracingManager.js b/Source/WebInspectorUI/UserInterface/Controllers/DOMTracingManager.js
index 3422942..be8152b 100644
--- a/Source/WebInspectorUI/UserInterface/Controllers/DOMTracingManager.js
+++ b/Source/WebInspectorUI/UserInterface/Controllers/DOMTracingManager.js
@@ -23,20 +23,24 @@
  * THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 WebInspector.DOMTracingManager = function()
 {
     WebInspector.Object.call(this);
 
     this._snapshotMap = new Map;
     this._targetNode = null;
 
+    // This maps from key "prestate.snapshotId:poststate.snapshotId" to a promise
+    // that resolves to an ElementSnapshotDiff instance for the states.
+    this._snapshotDiffPromises = new Map;
+
     WebInspector.TimelineManager.addEventListener(WebInspector.TimelineManager.Event.CapturingStopped, this._timelineCapturingStopped, this);
 };
 
 WebInspector.DOMTracingManager.prototype = {
     constructor: WebInspector.DOMTracingManager,
     __proto__: WebInspector.Object.prototype,
 
     // Public
 
     startTrackingElement: function(node)
@@ -65,20 +69,48 @@ WebInspector.DOMTracingManager.prototype = {
             return;
 
         return DOMTracingAgent.stopTracking(this._targetNode.id);
     },
 
     get targetElement()
     {
         return this._targetNode;
     },
 
+    snapshotForId: function(snapshotId)
+    {
+        return this._snapshotMap.get(snapshotId);
+    },
+
+    requestSnapshotDiff: function(first, second)
+    {
+        console.assert(first instanceof WebInspector.ElementSnapshot, first);
+        console.assert(second instanceof WebInspector.ElementSnapshot, second);
+        console.assert(first !== second, "Cannot diff a snapshot with itself.");
+
+        var [prestate, poststate] = [first, second];
+        if (first.ordinal > second.ordinal)
+            [prestate, poststate] = [second, first];
+
+        var key = "%d:%d".format(prestate.snapshotId, poststate.snapshotId);
+        if (this._snapshotDiffPromises.has(key))
+            return this._snapshotDiffPromises.get(key);
+
+        var result = Promise.all([prestate.fetchData(), poststate.fetchData()])
+            .then(function([prestateData, poststateData]) {
+                return new WebInspector.ElementSnapshotDiff(prestateData, poststateData);
+            });
+
+        this._snapshotDiffPromises.set(key, result);
+        return result;
+    },
+
     // Protected - Called by DOMTracingObserver
 
     snapshotCreated: function(snapshotPayload)
     {
         var snapshot = new WebInspector.ElementSnapshot(snapshotPayload);
         this._snapshotMap.set(snapshot.snapshotId, snapshot);
 
         var eventType = WebInspector.ElementTrackingTimelineRecord.EventType.OutputChanged;
         var record = new WebInspector.ElementTrackingTimelineRecord(eventType, snapshot);
         WebInspector.timelineManager.activeRecording.addRecord(record);
diff --git a/Source/WebInspectorUI/UserInterface/Images/Diff.svg b/Source/WebInspectorUI/UserInterface/Images/Diff.svg
new file mode 100644
index 0000000..de6453c
--- /dev/null
+++ b/Source/WebInspectorUI/UserInterface/Images/Diff.svg
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright Â© 2015 Apple Inc. All rights reserved. -->
+<svg viewBox="0 0 16 16" version="1.1" xmlns="http://www.w3.org/2000/svg">
+    <path d="M 1.58691425 14.4130857 C 1.949219 14.7753905 2.449219 15 3 15 L 13 15 C 14.101562 15 15 14.101562 15 13 L 15 3 C 15 2.449219 14.7753905 1.949219 14.4130858 1.58691425 L 1.58691425 14.4130857 Z" fill="rgb(242, 159, 159)"/>
+    <path d="M 1.58691425 14.4130858 C 1.2246095 14.050781 1 13.550781 1 13 L 1 3 C 1 1.898438 1.898438 1 3 1 L 13 1 C 13.550781 1 14.050781 1.2246095 14.4130857 1.58691425 L 1.58691425 14.4130857 Z" fill="rgb(172, 209, 136)"/>
+    <path d="M 2.5 13.5 L 13.5 2.5" stroke="rgb(249, 142, 142)" stroke-linecap="square"/>
+    <path d="M 1.58691425 14.4130858 C 1.2246095 14.050781 1 13.550781 1 13 L 1 3 C 1 1.898438 1.898438 1 3 1 L 13 1 C 13.550781 1 14.050781 1.2246095 14.4130857 1.58691425 L 1.58691425 14.4130857 Z M 2.29345713 13.7065429 C 2.11230475 13.5253905 2 13.2753905 2 13 L 2 3 C 2 2.449219 2.449219 2 3 2 L 13 2 C 13.2753905 2 13.5253905 2.11230475 13.7065429 2.29345712 L 2.29345713 13.7065429 Z" fill="rgb(74, 140, 12)" fill-rule="evenodd"/>
+    <path d="M 1.58691425 14.4130857 C 1.949219 14.7753905 2.449219 15 3 15 L 13 15 C 14.101562 15 15 14.101562 15 13 L 15 3 C 15 2.449219 14.7753905 1.949219 14.4130858 1.58691425 L 1.58691425 14.4130857 Z M 13.7065429 2.29345712 C 13.8876953 2.4746095 14 2.7246095 14 3 L 14 13 C 14 13.550781 13.550781 14 13 14 L 3 14 C 2.7246095 14 2.4746095 13.8876953 2.29345712 13.7065429 L 13.7065429 2.29345713 Z" fill="rgb(208, 1, 27)"/>
+    <path d="M 5.5 3.5 L 5.5 7.5" stroke="rgb(63, 114, 16)" stroke-linecap="square"/>
+    <path d="M 3.5 5.5 L 7.5 5.5" stroke="rgb(63, 114, 16)" stroke-linecap="square"/>
+    <path d="M 8.5 10.5 L 12.5 10.5" stroke="rgb(208, 1, 27)" stroke-linecap="square"/>
+</svg>
diff --git a/Source/WebInspectorUI/UserInterface/Main.html b/Source/WebInspectorUI/UserInterface/Main.html
index c8f483a..21b9a81 100644
--- a/Source/WebInspectorUI/UserInterface/Main.html
+++ b/Source/WebInspectorUI/UserInterface/Main.html
@@ -66,20 +66,21 @@
     <link rel="stylesheet" href="Views/DefaultDashboardView.css">
     <link rel="stylesheet" href="Views/DataGrid.css">
     <link rel="stylesheet" href="Views/DatabaseContentView.css">
     <link rel="stylesheet" href="Views/DatabaseIcon.css">
     <link rel="stylesheet" href="Views/DatabaseTableContentView.css">
     <link rel="stylesheet" href="Views/DatabaseTableIcon.css">
     <link rel="stylesheet" href="Views/DebuggerSidebarPanel.css">
     <link rel="stylesheet" href="Views/DetailsSection.css">
     <link rel="stylesheet" href="Views/DividerNavigationItem.css">
     <link rel="stylesheet" href="Views/Editing.css">
+    <link rel="stylesheet" href="Views/ElementSnapshotDiffContentView.css">
     <link rel="stylesheet" href="Views/ElementTrackingTimelineOverviewGraph.css">
     <link rel="stylesheet" href="Views/EventListenerSectionGroup.css">
     <link rel="stylesheet" href="Views/FilterBar.css">
     <link rel="stylesheet" href="Views/FindBanner.css">
     <link rel="stylesheet" href="Views/FlexibleSpaceNavigationItem.css">
     <link rel="stylesheet" href="Views/FolderIcon.css">
     <link rel="stylesheet" href="Views/FontResourceContentView.css">
     <link rel="stylesheet" href="Views/FormattedValue.css">
     <link rel="stylesheet" href="Views/GoToLineDialog.css">
     <link rel="stylesheet" href="Views/GradientSlider.css">
@@ -236,20 +237,21 @@
     <script src="Models/DOMNode.js"></script>
     <script src="Models/DOMNodeStyles.js"></script>
     <script src="Models/DOMSearchMatchObject.js"></script>
     <script src="Models/DOMStorageObject.js"></script>
     <script src="Models/DOMTree.js"></script>
     <script src="Models/DatabaseObject.js"></script>
     <script src="Models/DatabaseTableObject.js"></script>
     <script src="Models/DebuggerDashboard.js"></script>
     <script src="Models/DefaultDashboard.js"></script>
     <script src="Models/ElementSnapshot.js"></script>
+    <script src="Models/ElementSnapshotDiff.js"></script>
     <script src="Models/ElementTrackingTimeline.js"></script>
     <script src="Models/ElementTrackingTimelineRecord.js"></script>
     <script src="Models/ExecutionContext.js"></script>
     <script src="Models/ExecutionContextList.js"></script>
     <script src="Models/Frame.js"></script>
     <script src="Models/Geometry.js"></script>
     <script src="Models/Gradient.js"></script>
     <script src="Models/IndexedDatabase.js"></script>
     <script src="Models/IndexedDatabaseObjectStore.js"></script>
     <script src="Models/IndexedDatabaseObjectStoreIndex.js"></script>
@@ -386,20 +388,21 @@
     <script src="Views/DefaultDashboardView.js"></script>
     <script src="Views/DetailsSection.js"></script>
     <script src="Views/DetailsSectionDataGridRow.js"></script>
     <script src="Views/DetailsSectionGroup.js"></script>
     <script src="Views/DetailsSectionPropertiesRow.js"></script>
     <script src="Views/DetailsSectionSimpleRow.js"></script>
     <script src="Views/DetailsSectionTextRow.js"></script>
     <script src="Views/DividerNavigationItem.js"></script>
     <script src="Views/EditingSupport.js"></script>
     <script src="Views/ElementSnapshotContentView.js"></script>
+    <script src="Views/ElementSnapshotDiffContentView.js"></script>
     <script src="Views/ElementTrackingTimelineDataGridNode.js"></script>
     <script src="Views/ElementTrackingTimelineView.js"></script>
     <script src="Views/ElementTrackingTimelineOverviewGraph.js"></script>
     <script src="Views/EventListenerSection.js"></script>
     <script src="Views/EventListenerSectionGroup.js"></script>
     <script src="Views/FilterBar.js"></script>
     <script src="Views/FindBanner.js"></script>
     <script src="Views/FlexibleSpaceNavigationItem.js"></script>
     <script src="Views/FolderTreeElement.js"></script>
     <script src="Views/FontResourceContentView.js"></script>
diff --git a/Source/WebInspectorUI/UserInterface/Models/ElementSnapshot.js b/Source/WebInspectorUI/UserInterface/Models/ElementSnapshot.js
index 374b7f0..3481654 100644
--- a/Source/WebInspectorUI/UserInterface/Models/ElementSnapshot.js
+++ b/Source/WebInspectorUI/UserInterface/Models/ElementSnapshot.js
@@ -18,21 +18,21 @@
  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  * THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 WebInspector.ElementSnapshotData = function(snapshotId, payload)
 {
-    this._snapshotId = snapshotId;
+    this.snapshotId = snapshotId;
     this._imageDataURL = payload.imageData;
 }
 
 WebInspector.ElementSnapshotData.prototype = {
     constructor: WebInspector.ElementSnapshotData,
     __proto__: WebInspector.Object.prototype,
 
     get contentURL()
     {
         const maximumDataURLSize = 1024 * 1024; // 1 MiB
diff --git a/Source/WebInspectorUI/UserInterface/Models/ElementSnapshotDiff.js b/Source/WebInspectorUI/UserInterface/Models/ElementSnapshotDiff.js
new file mode 100644
index 0000000..897e37e
--- /dev/null
+++ b/Source/WebInspectorUI/UserInterface/Models/ElementSnapshotDiff.js
@@ -0,0 +1,39 @@
+/*
+ * Copyright (C) 2015 University of Washington. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
+ * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
+ * THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+WebInspector.ElementSnapshotDiff = function(preState, postState)
+{
+    console.assert(preState instanceof WebInspector.ElementSnapshotData, preState);
+    console.assert(postState instanceof WebInspector.ElementSnapshotData, postState);
+    console.assert(preState !== postState, "Cannot diff a snapshot with itself.");
+
+    this.preState = preState;
+    this.postState = postState;
+}
+
+WebInspector.ElementSnapshotDiff.prototype = {
+    constructor: WebInspector.ElementSnapshotDiff,
+    __proto__: WebInspector.Object.prototype,
+}
diff --git a/Source/WebInspectorUI/UserInterface/Views/ContentView.js b/Source/WebInspectorUI/UserInterface/Views/ContentView.js
index 24ab03d..5f1c1b6 100644
--- a/Source/WebInspectorUI/UserInterface/Views/ContentView.js
+++ b/Source/WebInspectorUI/UserInterface/Views/ContentView.js
@@ -83,20 +83,23 @@ WebInspector.ContentView = function(representedObject)
 
         if (representedObject instanceof WebInspector.LogObject)
             return new WebInspector.LogContentView(representedObject);
 
         if (representedObject instanceof WebInspector.ContentFlow)
             return new WebInspector.ContentFlowDOMTreeContentView(representedObject);
 
         if (representedObject instanceof WebInspector.ElementSnapshot)
             return new WebInspector.ElementSnapshotContentView(representedObject);
 
+        if (representedObject instanceof WebInspector.ElementSnapshotDiff)
+            return new WebInspector.ElementSnapshotDiffContentView(representedObject);
+
         if (typeof representedObject === "string" || representedObject instanceof String)
             return new WebInspector.TextContentView(representedObject);
 
         console.assert(!WebInspector.ContentView.isViewable(representedObject));
 
         throw "Can't make a ContentView for an unknown representedObject.";
     }
 
     // Concrete object instantiation.
     console.assert(this.constructor !== WebInspector.ContentView && this instanceof WebInspector.ContentView);
@@ -141,20 +144,22 @@ WebInspector.ContentView.isViewable = function(representedObject)
     if (representedObject instanceof WebInspector.ApplicationCacheFrame)
         return true;
     if (representedObject instanceof WebInspector.DOMTree)
         return true;
     if (representedObject instanceof WebInspector.LogObject)
         return true;
     if (representedObject instanceof WebInspector.ContentFlow)
         return true;
     if (representedObject instanceof WebInspector.ElementSnapshot)
         return true;
+    if (representedObject instanceof WebInspector.ElementSnapshotDiff)
+        return true;
     if (typeof representedObject === "string" || representedObject instanceof String)
         return true;
     return false;
 };
 
 WebInspector.ContentView.StyleClassName = "content-view";
 
 WebInspector.ContentView.Event = {
     SelectionPathComponentsDidChange: "content-view-selection-path-components-did-change",
     SupplementalRepresentedObjectsDidChange: "content-view-supplemental-represented-objects-did-change",
diff --git a/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotDiffContentView.css b/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotDiffContentView.css
new file mode 100644
index 0000000..4d1d342
--- /dev/null
+++ b/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotDiffContentView.css
@@ -0,0 +1,37 @@
+/*
+ * Copyright (C) 2015 University of Washington.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
+ * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
+ * THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+.content-view.element-snapshot-diff .split-pane {
+    position: absolute;
+    top: 0;
+    bottom: 0;
+    left: 0;
+    right: 0;
+    background-color: #fff;
+}
+
+.content-view.element-snapshot-diff .resizer {
+    border-left: 1px solid rgb(179, 179, 179);
+}
diff --git a/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotDiffContentView.js b/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotDiffContentView.js
new file mode 100644
index 0000000..8bb4e43
--- /dev/null
+++ b/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotDiffContentView.js
@@ -0,0 +1,111 @@
+/*
+ * Copyright (C) 2015 University of Washington. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
+ * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
+ * THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+WebInspector.ElementSnapshotDiffContentView = function(snapshotDiff)
+{
+    WebInspector.ContentView.call(this, snapshotDiff);
+
+    this._preState = {
+        header: WebInspector.domTracingManager.snapshotForId(snapshotDiff.preState.snapshotId),
+        data: snapshotDiff.preState
+    };
+
+    this._postState = {
+        header: WebInspector.domTracingManager.snapshotForId(snapshotDiff.postState.snapshotId),
+        data: snapshotDiff.postState
+    };
+
+    var displayName = WebInspector.UIString("View Changes (Snapshots %dâ%d)").format(this._preState.header.ordinal, this._postState.header.ordinal);
+    this._pathComponent = new WebInspector.HierarchicalPathComponent(displayName, WebInspector.ElementSnapshotDiffContentView.IconStyleClassName, this, false, false);
+
+    this.element.classList.add(WebInspector.ElementSnapshotDiffContentView.StyleClassName);
+
+    var resizerDelegate = this;
+    this._resizer = new WebInspector.Resizer(WebInspector.Resizer.RuleOrientation.Vertical, resizerDelegate);
+    this.element.appendChild(this._resizer.element);
+
+    this._preimageElement = document.createElement("img");
+    this._preimageElement.className = WebInspector.ElementSnapshotDiffContentView.SplitPaneStyleClassName;
+    this._preimageElement.style.width = this._preState.header.boundingRect.size.width + 'px';
+    this._preimageElement.style.height = this._preState.header.boundingRect.size.height + 'px';
+    this._preimageElement.src = this._preState.data.contentURL;
+    this.element.appendChild(this._preimageElement);
+
+    this._postimageElement = document.createElement("img");
+    this._postimageElement.className = WebInspector.ElementSnapshotDiffContentView.SplitPaneStyleClassName;
+    this._postimageElement.style.width = this._postState.header.boundingRect.size.width + 'px';
+    this._postimageElement.style.height = this._postState.header.boundingRect.size.height + 'px';
+    this._postimageElement.src = this._postState.data.contentURL;
+    this.element.appendChild(this._postimageElement);
+
+    this._repositionSplitPanes(0.5);
+};
+
+WebInspector.ElementSnapshotDiffContentView.StyleClassName = "element-snapshot-diff";
+WebInspector.ElementSnapshotDiffContentView.IconStyleClassName = "snapshot-diff-icon";
+WebInspector.ElementSnapshotDiffContentView.SplitPaneStyleClassName = "split-pane";
+
+WebInspector.ElementSnapshotDiffContentView.prototype = {
+    constructor: WebInspector.ElementSnapshotDiffContentView,
+    __proto__: WebInspector.ContentView.prototype,
+
+    get selectionPathComponents()
+    {
+        return [this._pathComponent];
+    },
+
+    // Disallow the quick console from popping up, we need a lot of space.
+    get supportsSplitContentBrowser()
+    {
+        return false;
+    },
+
+    // Protected
+
+    resizerDragStarted: function(resizer)
+    {
+        this._centerOffsetBeforeDrag = resizer.initialPosition - this.element.totalOffsetLeft;
+    },
+
+    resizerDragging: function(resizer, positionDelta)
+    {
+        var availableWidth = this.element.offsetWidth;
+        var centerPercent = (this._centerOffsetBeforeDrag - positionDelta) / availableWidth;
+        this._repositionSplitPanes(Number.constrain(centerPercent, 0.01, 0.99));
+    },
+
+    // Private
+
+    _repositionSplitPanes: function(centerPercent)
+    {
+        if (centerPercent === this._centerPercent)
+            return;
+
+        this._centerPercent = centerPercent || 0.5;
+        this._resizer.element.style.left = "%.5f".format(this._centerPercent * 100) + '%';
+        this._preimageElement.style.right = "%.5f".format((1.0 - this._centerPercent) * 100) + '%';
+        this._postimageElement.style.left = "%.5f".format(this._centerPercent * 100) + '%';
+    }
+};
diff --git a/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotDiffDetailsClusterContentView.js b/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotDiffDetailsClusterContentView.js
new file mode 100644
index 0000000..ea08ebd
--- /dev/null
+++ b/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotDiffDetailsClusterContentView.js
@@ -0,0 +1,225 @@
+/*
+ * Copyright (C) 2013 Apple Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
+ * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
+ * THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+WebInspector.ElementSnapshotDiffDetailsClusterContentView = function(snapshotDiff)
+{
+    console.assert(snapshotDiff instanceof WebInspector.ElemenSnapshotDiff, snapshotDiff);
+
+    WebInspector.ClusterContentView.call(this, snapshotDiff);
+
+    this._snapshotDiff = snapshotDiff;
+
+    function createPathComponent(displayName, className, identifier)
+    {
+        var pathComponent = new WebInspector.HierarchicalPathComponent(displayName, className, identifier, false, true);
+        pathComponent.addEventListener(WebInspector.HierarchicalPathComponent.Event.SiblingWasSelected, this._pathComponentSelected, this);
+        return pathComponent;
+    }
+
+    this._styleDiffPathComponent = createPathComponent.call(this, WebInspector.UIString("Style Changes"), WebInspector.ElementSnapshotDiffDetailsClusterContentView.StyleChangesIconStyleClassName, WebInspector.ElementSnapshotDiffDetailsClusterContentView.StyleChangesIdentifier);
+    this._domDiffPathComponent = createPathComponent.call(this, WebInspector.UIString("DOM Changes"), WebInspector.ElementSnapshotDiffDetailsClusterContentView.DOMChangesIconStyleClassName, WebInspector.ElementSnapshotDiffDetailsClusterContentView.DOMChangesIdentifier);
+
+    this._styleDiffPathComponent.nextSibling = this._domDiffPathComponent;
+    this._domDiffPathComponent.previousSibling = this._styleDiffPathComponent;
+};
+
+WebInspector.ElementSnapshotDiffDetailsClusterContentView.ContentViewIdentifierCookieKey = "element-snapshot-diff-cluster-content-view-identifier";
+
+WebInspector.ElementSnapshotDiffDetailsClusterContentView.StyleChangesIconStyleClassName = "style-changes-icon";
+WebInspector.ElementSnapshotDiffDetailsClusterContentView.DOMChangesIconStyleClassName = "dom-changes-icon";
+WebInspector.ElementSnapshotDiffDetailsClusterContentView.StyleChangesIdentifier = "style-changes";
+WebInspector.ElementSnapshotDiffDetailsClusterContentView.DOMChangesIdentifier = "dom-changes";
+
+WebInspector.ElementSnapshotDiffDetailsClusterContentView.prototype = {
+    constructor: WebInspector.ElementSnapshotDiffDetailsClusterContentView,
+
+    // Public
+
+    get allowedNavigationSidebarPanels()
+    {
+        return WebInspector.timelineSidebarPanel.identifier;
+    },
+
+    get styleChangesContentView()
+    {
+        if (!this._styleChangesContentView)
+            this._styleChangesContentView = new WebInspector.StyleChangesContentView(this, this._snapshotDiff);
+
+        return this._styleChangesContentView;
+    },
+
+    get domChangesContentView()
+    {
+        if (!this._domChangesContentView)
+            this._domChangesContentView = new WebInspector.DOMChangesContentView(this, this._snapshotDiff);
+
+        return this._domChangesContentView;
+    },
+
+    get selectionPathComponents()
+    {
+        var currentContentView = this._contentViewContainer.currentContentView;
+        if (!currentContentView)
+            return [];
+
+        // Append the current view's path components to the path component representing the current view.
+        var components = [this._pathComponentForContentView(currentContentView)];
+        return components.concat(currentContentView.selectionPathComponents);
+    },
+
+    shown: function()
+    {
+        WebInspector.ClusterContentView.prototype.shown.call(this);
+
+        this._contentViewContainer.shown();
+    },
+
+    closed: function()
+    {
+        WebInspector.ClusterContentView.prototype.closed.call(this);
+
+        this._contentViewContainer.closeAllContentViews();
+    },
+
+    saveToCookie: function(cookie)
+    {
+        // FIXME: implement                                         
+        //cookie[WebInspector.ElementSnapshotDiffDetailsClusterContentView.ContentViewIdentifierCookieKey] = this._currentContentViewSetting.value;
+    },
+
+    restoreFromCookie: function(cookie)
+    {
+        // FIXME: implement                                            
+        var contentView = this._showContentViewForIdentifier(cookie[WebInspector.ElementSnapshotDiffDetailsClusterContentView.ContentViewIdentifierCookieKey]);
+    },
+
+    showRequest: function()
+    {
+        this._shownInitialContent = true;
+
+        return this._showContentViewForIdentifier(WebInspector.ElementSnapshotDiffDetailsClusterContentView.RequestIdentifier);
+    },
+
+    showResponse: function(positionToReveal, textRangeToSelect, forceUnformatted)
+    {
+        this._shownInitialContent = true;
+
+        if (!this._resource.finished) {
+            this._positionToReveal = positionToReveal;
+            this._textRangeToSelect = textRangeToSelect;
+            this._forceUnformatted = forceUnformatted;
+        }
+
+        var responseContentView = this._showContentViewForIdentifier(WebInspector.ElementSnapshotDiffDetailsClusterContentView.ResponseIdentifier);
+        if (typeof responseContentView.revealPosition === "function")
+            responseContentView.revealPosition(positionToReveal, textRangeToSelect, forceUnformatted);
+        return responseContentView;
+    },
+
+    // Private
+
+    _pathComponentForContentView: function(contentView)
+    {
+        console.assert(contentView);
+        if (!contentView)
+            return null;
+        if (contentView === this._requestContentView)
+            return this._requestPathComponent;
+        if (contentView === this._styleChangesContentView)
+            return this._responsePathComponent;
+        console.error("Unknown contentView.");
+        return null;
+    },
+
+    _identifierForContentView: function(contentView)
+    {
+        console.assert(contentView);
+        if (!contentView)
+            return null;
+        if (contentView === this._requestContentView)
+            return WebInspector.ElementSnapshotDiffDetailsClusterContentView.RequestIdentifier;
+        if (contentView === this._styleChangesContentView)
+            return WebInspector.ElementSnapshotDiffDetailsClusterContentView.ResponseIdentifier;
+        console.error("Unknown contentView.");
+        return null;
+    },
+
+    _showContentViewForIdentifier: function(identifier)
+    {
+        var contentViewToShow = null;
+
+        switch (identifier) {
+        case WebInspector.ElementSnapshotDiffDetailsClusterContentView.RequestIdentifier:
+            contentViewToShow = this._canShowRequestContentView() ? this.requestContentView : null;
+            break;
+        case WebInspector.ElementSnapshotDiffDetailsClusterContentView.ResponseIdentifier:
+            contentViewToShow = this.responseContentView;
+            break;
+        }
+
+        if (!contentViewToShow)
+            contentViewToShow = this.responseContentView;
+
+        console.assert(contentViewToShow);
+
+        this._currentContentViewSetting.value = this._identifierForContentView(contentViewToShow);
+
+        return this.contentViewContainer.showContentView(contentViewToShow);
+    },
+
+    _pathComponentSelected: function(event)
+    {
+        this._showContentViewForIdentifier(event.data.pathComponent.representedObject);
+    },
+
+    _resourceTypeDidChange: function(event)
+    {
+        // Since resource views are based on the type, we need to make a new content view and tell the container to replace this
+        // content view with the new one. Make a new ResourceContentView which will use the new resource type to make the correct
+        // concrete ResourceContentView subclass.
+
+        var currentResponseContentView = this._styleChangesContentView;
+        if (!currentResponseContentView)
+            return;
+
+        delete this._styleChangesContentView;
+
+        this.contentViewContainer.replaceContentView(currentResponseContentView, this.responseContentView);
+    },
+
+    _resourceLoadingDidFinish: function(event)
+    {
+        if ("_positionToReveal" in this) {
+            if (this._contentViewContainer.currentContentView === this._styleChangesContentView)
+                this._styleChangesContentView.revealPosition(this._positionToReveal, this._textRangeToSelect, this._forceUnformatted);
+
+            delete this._positionToReveal;
+            delete this._textRangeToSelect;
+            delete this._forceUnformatted;
+        }
+    }
+};
+
+WebInspector.ElementSnapshotDiffDetailsClusterContentView.prototype.__proto__ = WebInspector.ClusterContentView.prototype;
diff --git a/Source/WebInspectorUI/UserInterface/Views/ElementTrackingTimelineOverviewGraph.js b/Source/WebInspectorUI/UserInterface/Views/ElementTrackingTimelineOverviewGraph.js
index 11b6897..8ed4547 100644
--- a/Source/WebInspectorUI/UserInterface/Views/ElementTrackingTimelineOverviewGraph.js
+++ b/Source/WebInspectorUI/UserInterface/Views/ElementTrackingTimelineOverviewGraph.js
@@ -181,14 +181,17 @@ WebInspector.ElementTrackingTimelineOverviewGraph.prototype = {
                 WebInspector.timelineSidebarPanel.showDefaultContentView();
         } else if (this._selectedRecords.length === 1) {
             var treeElement = WebInspector.timelineSidebarPanel.treeElementForRepresentedObject(this._selectedRecords[0].snapshot);
             const omitFocus = true;
             const selectedByUser = true;
             const suppressOnSelect = false;
             const suppressOnDeselect = false;
             treeElement.revealAndSelect(omitFocus, selectedByUser, suppressOnSelect, suppressOnDeselect);
         } else {
             console.assert(this._selectedRecords.length === 2);
-            return; // TODO: request diff object, show it                                              
+            WebInspector.domTracingManager.requestSnapshotDiff(this._selectedRecords[0].snapshot, this._selectedRecords[1].snapshot)
+                .then(function(snapshotDiffObject) {
+                    WebInspector.timelineSidebarPanel.showSubviewForRepresentedObject(snapshotDiffObject);
+                });
         }
     }
 };
diff --git a/Source/WebInspectorUI/UserInterface/Views/Resizer.js b/Source/WebInspectorUI/UserInterface/Views/Resizer.js
index 47866f4..925ff6f 100644
--- a/Source/WebInspectorUI/UserInterface/Views/Resizer.js
+++ b/Source/WebInspectorUI/UserInterface/Views/Resizer.js
@@ -84,36 +84,38 @@ WebInspector.Resizer.prototype = {
             return event.pageY;
 
         console.assert(false, "Should not be reached!");
     },
 
     _resizerMouseDown: function(event)
     {
         if (event.button !== 0 || event.ctrlKey)
             return;
 
+        this._resizerMouseDownPosition = this._currentPosition();
+
         var delegateRequestedAbort = false;
         if (typeof this._delegate.resizerDragStarted === "function")
             delegateRequestedAbort = this._delegate.resizerDragStarted(this, event.target);
 
-        if (delegateRequestedAbort)
+        if (delegateRequestedAbort) {
+            delete this._resizerMouseDownPosition;
             return;
+        }
 
         if (this._orientation === WebInspector.Resizer.RuleOrientation.Vertical)
             document.body.style.cursor = "col-resize";
         else {
              console.assert(this._orientation === WebInspector.Resizer.RuleOrientation.Horizontal);
             document.body.style.cursor = "row-resize";
         }
 
-        this._resizerMouseDownPosition = this._currentPosition();
-
         // Register these listeners on the document so we can track the mouse if it leaves the resizer.
         document.addEventListener("mousemove", this._resizerMouseMovedEventListener, false);
         document.addEventListener("mouseup", this._resizerMouseUpEventListener, false);
 
         event.preventDefault();
         event.stopPropagation();
 
         // Install a global "glass pane" which prevents cursor from changing during the drag interaction.
         // The cursor could change when hovering over links, text, or other elements with cursor cues.
         // FIXME: when Pointer Events support is available this could be implemented by drawing the cursor ourselves.
@@ -146,14 +148,16 @@ WebInspector.Resizer.prototype = {
             WebInspector._elementDraggingGlassPane.parentElement.removeChild(WebInspector._elementDraggingGlassPane);
             delete WebInspector._elementDraggingGlassPane;
         }
 
         document.removeEventListener("mousemove", this._resizerMouseMovedEventListener, false);
         document.removeEventListener("mouseup", this._resizerMouseUpEventListener, false);
 
         event.preventDefault();
         event.stopPropagation();
 
-        if (typeof this._delegate.resizerDragStarted === "function")
+        if (typeof this._delegate.resizerDragEnded === "function")
             this._delegate.resizerDragEnded(this);
+
+        delete this._resizerMouseDownPosition;
     }
 };
diff --git a/Source/WebInspectorUI/UserInterface/Views/TimelineIcons.css b/Source/WebInspectorUI/UserInterface/Views/TimelineIcons.css
index b1f4f6f..7e3904a 100644
--- a/Source/WebInspectorUI/UserInterface/Views/TimelineIcons.css
+++ b/Source/WebInspectorUI/UserInterface/Views/TimelineIcons.css
@@ -103,10 +103,14 @@ body.mac-platform.legacy .colors-icon.large .icon {
     content: -webkit-image-set(url(../Images/DocumentImage.png) 1x, url(../Images/DocumentImage@2x.png) 2x);
 }
 
 .timer-record .icon {
     content: url(../Images/TimelineRecordTimer.svg);
 }
 
 .animation-record .icon {
     content: url(../Images/TimelineRecordAnimation.svg);
 }
+
+.snapshot-diff-icon .icon {
+    content: url(../Images/Diff.svg);
+}
diff --git a/Source/WebInspectorUI/UserInterface/Views/TimelineSidebarPanel.js b/Source/WebInspectorUI/UserInterface/Views/TimelineSidebarPanel.js
index 1fb712b..75f38c8 100644
--- a/Source/WebInspectorUI/UserInterface/Views/TimelineSidebarPanel.js
+++ b/Source/WebInspectorUI/UserInterface/Views/TimelineSidebarPanel.js
@@ -298,20 +298,28 @@ WebInspector.TimelineSidebarPanel.prototype = {
             WebInspector.contentBrowser.showContentView(this._displayedContentView);
         } else {
             this.showTimelineViewForTimeline(timeline, false);
             WebInspector.contentBrowser.showContentView(this._displayedContentView);
             didChangeView = false;
         }
 
         return didChangeView;
     },
 
+    showSubviewForRepresentedObject: function(representedObject)
+    {
+        console.assert(WebInspector.ContentView.isViewable(representedObject), representedObject);
+
+        this._displayedContentView.showContentViewForRepresentedObject(representedObject);
+        WebInspector.contentBrowser.showContentView(this._displayedContentView);
+    },
+
     // Protected
 
     updateFilter: function()
     {
         WebInspector.NavigationSidebarPanel.prototype.updateFilter.call(this);
 
         this._displayedContentView.filterDidChange();
     },
 
     hasCustomFilters: function()
-- 
2.3.1

