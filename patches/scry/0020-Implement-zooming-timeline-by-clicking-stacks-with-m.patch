From c3145a24b9dc0b5b99974960e13a33878085c85e Mon Sep 17 00:00:00 2001
From: "Brian J. Burg" <burg@cs.washington.edu>
Date: Sun, 8 Mar 2015 21:12:19 -0700
Subject: [PATCH] Implement zooming timeline by clicking stacks with multiple
 records. Stop rendering timeline bars in element tracking timeline.

---
 .../Views/ElementSnapshotOutputContentView.js      |  2 -
 .../Views/ElementTrackingTimelineOverviewGraph.js  | 86 ++++++++++++++--------
 2 files changed, 57 insertions(+), 31 deletions(-)

diff --git a/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotOutputContentView.js b/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotOutputContentView.js
index 8145fe4..5d28630 100644
--- a/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotOutputContentView.js
+++ b/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotOutputContentView.js
@@ -26,22 +26,20 @@
 WebInspector.ElementSnapshotOutputContentView = function(snapshot)
 {
     WebInspector.ContentView.call(this, snapshot, WebInspector.ElementSnapshotOutputContentView.StyleClassName);
 
     this._imageElement = null;
 
     this.element.classList.add(WebInspector.ElementSnapshotOutputContentView.StyleClassName);
 
     snapshot.fetchData().then(function(data) {
         this._imageElement = document.createElement("img");
-        //this._imageElement.style.width = snapshot.boundingRect.size.width + 'px';
-        //this._imageElement.style.height = snapshot.boundingRect.size.height + 'px';
         this._imageElement.src = data.contentURL;
         this.element.appendChild(this._imageElement);
     }.bind(this));
 };
 
 WebInspector.ElementSnapshotOutputContentView.StyleClassName = "element-snapshot-output";
 
 WebInspector.ElementSnapshotOutputContentView.prototype = {
     constructor: WebInspector.ElementSnapshotOutputContentView,
     __proto__: WebInspector.ContentView.prototype,
diff --git a/Source/WebInspectorUI/UserInterface/Views/ElementTrackingTimelineOverviewGraph.js b/Source/WebInspectorUI/UserInterface/Views/ElementTrackingTimelineOverviewGraph.js
index 8ed4547..d4fd565 100644
--- a/Source/WebInspectorUI/UserInterface/Views/ElementTrackingTimelineOverviewGraph.js
+++ b/Source/WebInspectorUI/UserInterface/Views/ElementTrackingTimelineOverviewGraph.js
@@ -27,75 +27,49 @@ WebInspector.ElementTrackingTimelineOverviewGraph = function(timeline)
 {
     WebInspector.TimelineOverviewGraph.call(this, timeline);
 
     this.element.classList.add(WebInspector.ElementTrackingTimelineOverviewGraph.StyleClassName);
 
     this.element.addEventListener("click", this._timelineGraphClicked.bind(this));
 
     this.representedObject = timeline;
     this.representedObject.addEventListener(WebInspector.Timeline.Event.RecordAdded, this._timelineRecordAdded, this);
 
-    this._timelineRecordBars = [];
     this._timelineRecordStacks = [];
 
     this._selectedRecords = [];
 
     this.reset();
 };
 
+WebInspector.ElementTrackingTimelineOverviewGraph.ZoomDurationMilliseconds = 250;
 WebInspector.ElementTrackingTimelineOverviewGraph.StyleClassName = "element-tracking";
 
 WebInspector.ElementTrackingTimelineOverviewGraph.prototype = {
     constructor: WebInspector.ElementTrackingTimelineOverviewGraph,
     __proto__: WebInspector.TimelineOverviewGraph.prototype,
 
     // Public
 
     reset: function()
     {
         WebInspector.TimelineOverviewGraph.prototype.reset.call(this);
 
-        this._timelineRecordBarMap = new Map;
-
         this.element.removeChildren();
     },
 
     updateLayout: function()
     {
         WebInspector.TimelineOverviewGraph.prototype.updateLayout.call(this);
 
         var secondsPerPixel = this.timelineOverview.secondsPerPixel;
 
-        var recordBarIndex = 0;
-        function createBar(records, renderMode)
-        {
-            var timelineRecordBar = this._timelineRecordBars[recordBarIndex];
-            if (!timelineRecordBar)
-                timelineRecordBar = this._timelineRecordBars[recordBarIndex] = new WebInspector.TimelineRecordBar(records, renderMode);
-            else {
-                timelineRecordBar.renderMode = renderMode;
-                timelineRecordBar.records = records;
-            }
-            timelineRecordBar.refresh(this);
-            if (!timelineRecordBar.element.parentNode)
-                this.element.appendChild(timelineRecordBar.element);
-            ++recordBarIndex;
-        }
-
-        // Create summary bars for trace operation records.
-        WebInspector.TimelineRecordBar.createCombinedBars(this.representedObject.traceRecords, secondsPerPixel, this, createBar.bind(this));
-        // Remove the remaining unused TimelineRecordBars.
-        for (; recordBarIndex < this._timelineRecordBars.length; ++recordBarIndex) {
-            this._timelineRecordBars[recordBarIndex].records = null;
-            this._timelineRecordBars[recordBarIndex].element.remove();
-        }
-
         // Create preview boxes for output snapshot records.
         var stackIndex = 0;
         function createStack(records)
         {
             var stack = this._timelineRecordStacks[stackIndex];
             if (!stack)
                 stack = this._timelineRecordStacks[stackIndex] = new WebInspector.TimelineRecordStack(records);
             else {
                 stack.records = records;
             }
@@ -139,33 +113,35 @@ WebInspector.ElementTrackingTimelineOverviewGraph.prototype = {
         if (event.target.classList.contains(WebInspector.TimelineRecordStack.StyleClassName))
             this._recordStackClicked(event);
     },
 
     _recordStackClicked: function(event)
     {
         var recordStack = event.target.recordStack;
         console.assert(recordStack instanceof WebInspector.TimelineRecordStack, recordStack);
 
         // Can only select if it represents a single snapshot.
-        if (recordStack.records.length !== 1)
+        if (recordStack.records.length > 1) {
+            this._zoomToSplitRecordStack(recordStack);
             return;
+        }
 
         // Don't process the selection if its tree element is not visible with current filters.
         // FIXME: we may want to revise or delete this if it's too awkward.
         var selectedRecord = recordStack.records[0];
         var provisionalTreeElement = WebInspector.timelineSidebarPanel.treeElementForRepresentedObject(selectedRecord.snapshot);
         if (!provisionalTreeElement || provisionalTreeElement.hidden)
             return;
 
         // If already selected, deselect it.
         var foundIndex = this._selectedRecords.indexOf(selectedRecord);
-        if (foundIndex !== -1)
+        if (foundIndex !== -1 && WebInspector.modifierKeys.metaKey)
             this._selectedRecords.splice(foundIndex, 1);
         // If not a cmd-click, only select one stack.
         else if (!WebInspector.modifierKeys.metaKey)
             this._selectedRecords = [selectedRecord];
         // If two stacks are already selected, replace the most recent selection.
         else if (this._selectedRecords.length == 2)
             this._selectedRecords.splice(1, 1, selectedRecord);
         // This is a cmd-click that adds a second selection.
         else
             this._selectedRecords.push(selectedRecord);
@@ -186,12 +162,64 @@ WebInspector.ElementTrackingTimelineOverviewGraph.prototype = {
             const suppressOnSelect = false;
             const suppressOnDeselect = false;
             treeElement.revealAndSelect(omitFocus, selectedByUser, suppressOnSelect, suppressOnDeselect);
         } else {
             console.assert(this._selectedRecords.length === 2);
             WebInspector.domTracingManager.requestSnapshotDiff(this._selectedRecords[0].snapshot, this._selectedRecords[1].snapshot)
                 .then(function(snapshotDiffObject) {
                     WebInspector.timelineSidebarPanel.showSubviewForRepresentedObject(snapshotDiffObject);
                 });
         }
+    },
+
+    _zoomToSplitRecordStack: function(recordStack)
+    {
+        console.assert(recordStack.records.length > 1);
+
+        var initialSecondsPerPixel = this.timelineOverview.secondsPerPixel;
+        var initialStartTime = this.timelineOverview.scrollStartTime;
+        var initialEndTime = this.timelineOverview.endTime;
+
+        var proposedSecondsPerPixel = initialSecondsPerPixel;
+        var stackCount;
+        do {
+            // A smaller number means higher magnification / more pixels per second.
+            proposedSecondsPerPixel *= 0.9;
+            stackCount = 0;
+            function incrementStackCount() { ++stackCount; }
+            WebInspector.TimelineRecordStack.createStacksForVisibleRecords(recordStack.records, proposedSecondsPerPixel, this.representedObject, incrementStackCount);
+        } while (stackCount < 2);
+
+        var [firstRecord, lastRecord] = [recordStack.records[0], recordStack.records.lastValue];
+        var middleTimeForStack = firstRecord.startTime + (lastRecord.endTime - firstRecord.startTime) / 2;
+        var timelinePixelWidth = this.timelineOverview.visibleDuration / initialSecondsPerPixel;
+        var middlePercentForStack = (middleTimeForStack - initialStartTime) / this.timelineOverview.visibleDuration;
+
+        var proposedVisibleDuration = proposedSecondsPerPixel * timelinePixelWidth;
+        var proposedStartTime = middleTimeForStack - proposedVisibleDuration * middlePercentForStack;
+
+        var animationStartTime = Date.now();
+        var epsilon = 1 / (200 * WebInspector.ElementTrackingTimelineOverviewGraph.ZoomDurationMilliseconds);
+        var spline = new WebInspector.UnitBezier(0.25, 0.1, 0.25, 1);
+
+        function interpolatedValue(from, to, progress)
+        {
+            return from + (to - from) * progress;
+        }
+
+        function setTimelineViewState()
+        {
+            var progress = spline.solve(Math.min((Date.now() - animationStartTime) / WebInspector.ElementTrackingTimelineOverviewGraph.ZoomDurationMilliseconds, 1), epsilon);
+
+            this.timelineOverview.scrollStartTime = interpolatedValue(initialStartTime, proposedStartTime, progress);
+            this.timelineOverview.secondsPerPixel = interpolatedValue(initialSecondsPerPixel, proposedSecondsPerPixel, progress);
+
+            // Synchronously update layout since we are in a requestAnimationFrame.
+            this.timelineOverview.updateLayout();
+
+            if (progress < 1)
+                requestAnimationFrame(setTimelineViewState.bind(this));
+        }
+
+        requestAnimationFrame(setTimelineViewState.bind(this));
     }
 };
-- 
2.3.5

