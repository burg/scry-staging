From 87b4edd059ef856be1378dd3fb48546af1f46caf Mon Sep 17 00:00:00 2001
From: "Brian J. Burg" <burg@cs.washington.edu>
Date: Sun, 8 Mar 2015 16:13:36 -0700
Subject: [PATCH] Improve timeline snapshot styles.

---
 .../UserInterface/Views/TimelineRecordStack.css    | 27 ++++++++++------------
 .../UserInterface/Views/TimelineRecordStack.js     | 21 +++++++++--------
 2 files changed, 24 insertions(+), 24 deletions(-)

diff --git a/Source/WebInspectorUI/UserInterface/Views/TimelineRecordStack.css b/Source/WebInspectorUI/UserInterface/Views/TimelineRecordStack.css
index 1cbd749..d46dde8 100644
--- a/Source/WebInspectorUI/UserInterface/Views/TimelineRecordStack.css
+++ b/Source/WebInspectorUI/UserInterface/Views/TimelineRecordStack.css
@@ -19,44 +19,41 @@
  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  * THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 .timeline-record-stack {
     position: absolute;
-    height: 36px;
     z-index: 10;
-    min-width: 48px;
-    border-left: 2px solid transparent;
-    border-right: 2px solid transparent;
 
-    /* Make a checkered background for transparent colors to show against. */
-    background-image: url(../Images/Checkers.svg);
-    background-color: rgba(230, 230, 230, 0.5);
-    background-repeat: repeat;
-    background-size: 8px;
+    height: 34px;
+    min-width: 36px;
+
+    border: 2px solid rgb(240, 240, 240);
+    background-color: rgb(240, 240, 240);
+
+    cursor: pointer;
 }
 
-.timeline-record-stack .preview-image {
+.timeline-record-stack img.preview-image {
     pointer-events: none;
 
-    position: absolute;
-    width: 48px;
-    height: 35px;
+    /* Parent borders are 2px on top, bottom. */
+    max-height: 30px;
 }
 
 .timeline-record-stack.selected {
-    border-left: 2px solid rgb(150, 150, 150);
-    border-right: 2px solid rgb(150, 150, 150);
+    border-color: rgb(34, 131, 246);
+    border-radius: 4px;
 }
 
 .timeline-record-stack-counter {
     position: absolute;
     bottom: 2px;
     right: 1px;
     height: 13px;
     z-index: 50;
 
     background-color: rgb(150, 150, 150);
diff --git a/Source/WebInspectorUI/UserInterface/Views/TimelineRecordStack.js b/Source/WebInspectorUI/UserInterface/Views/TimelineRecordStack.js
index 9ffb76c..5d3680c 100644
--- a/Source/WebInspectorUI/UserInterface/Views/TimelineRecordStack.js
+++ b/Source/WebInspectorUI/UserInterface/Views/TimelineRecordStack.js
@@ -41,22 +41,24 @@ WebInspector.TimelineRecordStack = function(records)
     // Set this last, since it triggers relayout using the above elements.
     this.records = records;
 };
 
 WebInspector.Object.addConstructorFunctions(WebInspector.TimelineRecordStack);
 
 WebInspector.TimelineRecordStack.StyleClassName = "timeline-record-stack";
 WebInspector.TimelineRecordStack.CounterStyleClassName = "timeline-record-stack-counter";
 WebInspector.TimelineRecordStack.SelectedStyleClassName = "selected";
 WebInspector.TimelineRecordStack.PreviewImageStyleClassName = "preview-image";
-WebInspector.TimelineRecordStack.MinimumWidthPixels = 48;
+WebInspector.TimelineRecordStack.MinimumWidthPixels = 36;
+WebInspector.TimelineRecordStack.MaximumWidthPixels = 48;
 WebInspector.TimelineRecordStack.MinimumMarginPixels = 2;
+WebInspector.TimelineRecordStack.SelectionBorderWidthInPixels = 2;
 
 WebInspector.TimelineRecordStack.createStacksForVisibleRecords = function(records, secondsPerPixel, graphDataSource, createStackCallback)
 {
     if (!records.length)
         return;
 
     var startTime = graphDataSource.startTime;
     var currentTime = graphDataSource.currentTime;
     var endTime = graphDataSource.endTime;
 
@@ -92,33 +94,33 @@ WebInspector.TimelineRecordStack.createStacksForVisibleRecords = function(record
     if (visibleRecords.length === 1) {
         createStackCallback(visibleRecords);
         return;
     }
 
     function compareByActiveStartTime(a, b)
     {
         return a.activeStartTime - b.activeStartTime;
     }
 
-    var minimumDuration = secondsPerPixel * WebInspector.TimelineRecordStack.MinimumWidthPixels;
+    var maximumDuration = secondsPerPixel * WebInspector.TimelineRecordStack.MaximumWidthPixels;
     var minimumMargin = secondsPerPixel * WebInspector.TimelineRecordStack.MinimumMarginPixels;
 
     lastRecordType = null;
 
     var activeStartTime = NaN;
     var activeEndTime = NaN;
     var activeRecords = [];
 
     for (var record of visibleRecords) {
         // Create the active bar if the previous record is far enough away.
         // Also create it if the current record has no active start time.
-        if (!isNaN(activeStartTime) && (activeStartTime + Math.max(activeEndTime - activeStartTime, minimumDuration) + minimumMargin <= record.startTime
+        if (!isNaN(activeStartTime) && (activeStartTime + Math.max(activeEndTime - activeStartTime, maximumDuration) + minimumMargin <= record.startTime
             || (isNaN(record.startTime) && !isNaN(activeEndTime)))) {
             createStackCallback(activeRecords);
             activeRecords = [];
             activeStartTime = NaN;
             activeEndTime = NaN;
         }
 
         if (isNaN(record.startTime))
             continue;
 
@@ -238,33 +240,34 @@ WebInspector.TimelineRecordStack.prototype = {
             this._counterElement.remove();
         else {
             this._counterElement.textContent = this._records.length;
             if (!this._counterElement.parentNode)
                 this._element.appendChild(this._counterElement);
         }
 
         // FIXME: may need to adjust the stack creation code to match ranges used here to avoid visual glitches.
 
         // Find the center of this stack's records, then push out to include max(record span, min width).
+        if (!this._cachedPreviewElementWidth && this._previewElement)
+            this._cachedPreviewElementWidth = this._previewElement.offsetWidth;
+
+        var renderedPreviewWidth = this._cachedPreviewElementWidth || 0;
+        var usedWidthInPixels = Math.max(renderedPreviewWidth + (2 * WebInspector.TimelineRecordStack.SelectionBorderWidthInPixels), WebInspector.TimelineRecordStack.MinimumWidthPixels);
         var secondsPerPixel = graphDataSource.timelineOverview ? graphDataSource.timelineOverview.secondsPerPixel : 0;
+        var adjustedDuration = secondsPerPixel * usedWidthInPixels;
         var barCenterTime = barStartTime + (barEndTime - barStartTime) / 2;
-        var adjustedDuration = Math.max(barEndTime - barStartTime, secondsPerPixel * WebInspector.TimelineRecordStack.MinimumWidthPixels);
         var adjustedStartTime = barCenterTime - (adjustedDuration / 2);
-        var adjustedEndTime = barCenterTime + (adjustedDuration / 2);
 
         var graphDuration = graphEndTime - graphStartTime;
         var newBarLeftPosition = (adjustedStartTime - graphStartTime) / graphDuration;
         this._updateElementPosition(this._element, newBarLeftPosition, "left");
-
-        var newBarWidth = ((adjustedEndTime - graphStartTime) / graphDuration) - newBarLeftPosition;
-        this._updateElementPosition(this._element, newBarWidth, "width");
-
+        this._updateElementPosition(this._element, adjustedDuration / graphDuration, "width");
         return true;
     },
 
     // Private
 
     _updateElementPosition: function(element, newPosition, property)
     {
         newPosition *= 100;
         newPosition = newPosition.toFixed(2);
 
-- 
2.3.2

