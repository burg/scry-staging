From f0a08e6adef8f5c82ac52dd7101def3987f047da Mon Sep 17 00:00:00 2001
From: "Brian J. Burg" <burg@cs.washington.edu>
Date: Tue, 10 Mar 2015 08:54:26 -0700
Subject: [PATCH] Show effective styles for the target element as a subview of
 the snapshot content view.

---
 .../inspector/protocol/DOMTracing.json             |   4 +-
 Source/WebInspectorUI/UserInterface/Main.html      |   3 +
 .../WebInspectorUI/UserInterface/Models/CSSRule.js |  26 +-
 .../UserInterface/Models/CSSStyleDeclaration.js    |  25 +-
 .../UserInterface/Models/EffectiveStyleSnapshot.js | 304 +++++++++++++++++++++
 .../UserInterface/Models/ElementSnapshot.js        |  11 +-
 .../Views/ElementSnapshotContentView.css           |   4 +
 .../Views/ElementSnapshotContentView.js            |  36 ++-
 ...iew.css => ElementSnapshotStyleContentView.css} |   3 +-
 ...View.css => ElementSnapshotStyleContentView.js} |  33 ++-
 10 files changed, 410 insertions(+), 39 deletions(-)
 create mode 100644 Source/WebInspectorUI/UserInterface/Models/EffectiveStyleSnapshot.js
 copy Source/WebInspectorUI/UserInterface/Views/{ElementSnapshotContentView.css => ElementSnapshotStyleContentView.css} (95%)
 copy Source/WebInspectorUI/UserInterface/Views/{ElementSnapshotContentView.css => ElementSnapshotStyleContentView.js} (54%)

diff --git a/Source/JavaScriptCore/inspector/protocol/DOMTracing.json b/Source/JavaScriptCore/inspector/protocol/DOMTracing.json
index c68f475..c69d050 100644
--- a/Source/JavaScriptCore/inspector/protocol/DOMTracing.json
+++ b/Source/JavaScriptCore/inspector/protocol/DOMTracing.json
@@ -38,28 +38,28 @@
             ]
         },
         {
             "id": "EffectiveStyle",
             "type": "object",
             "properties": [
                 { "name": "targetElement", "$ref": "DOM.NodeId", "description": "The id for the element that was snapshotted."},
                 { "name": "elements", "type": "array", "items": { "$ref": "ElementEntry" }, "description": "Elements that contributed styles from rules and inline styles, ordered from target element to root." },
                 { "name": "properties", "type": "array", "items": { "$ref": "PropertyEntry"}, "description": "Effective properties for the target element." }
             ],
-            "description": "Describes the effective styles for the target element and where the style properties came from."
+            "description": "Describes the effective style properties for the target element, with cross-references to the elements that contributed properties via inline styles and matched rules"
         },
         {
             "id": "PropertyEntry",
             "type": "object",
             "properties": [
                 { "name": "property", "$ref": "CSS.CSSProperty", "description": "A property that forms part of the effective element style." },
-                { "name": "sourceRule", "$ref": "CSS.CSSRuleId", "optional": true, "description": "If property was contributed by a rule, the rule's identifier at time of snapshot."},
+                { "name": "sourceRule", "$ref": "CSS.CSSRuleId", "optional": true, "description": "If property was contributed by a rule that matched the target or target's ancestor element, the rule's identifier at time of snapshot. This identifier cross-references to a MatchedRule's CSSRuleId for the element that matched the rule."},
                 { "name": "sourceElement", "$ref": "DOM.NodeId", "optional": true, "description": "If property was contributed by an element's inline style, the element's identifier at time of snapshot."}
             ],
             "description": "An effective style property contributed by a rule or inline style."
          },
         {
             "id": "ElementEntry",
             "type": "object",
             "properties": [
                 { "name": "nodeId", "$ref": "DOM.NodeId", "description": "Id for the ancestor element that contributed inherited styles."},
                 { "name": "inlineStyle", "$ref": "CSS.CSSStyle", "optional": true, "description": "The ancestor element's inline style, if any, in the style inheritance chain." },
diff --git a/Source/WebInspectorUI/UserInterface/Main.html b/Source/WebInspectorUI/UserInterface/Main.html
index 022b2ee..887dc69 100644
--- a/Source/WebInspectorUI/UserInterface/Main.html
+++ b/Source/WebInspectorUI/UserInterface/Main.html
@@ -71,20 +71,21 @@
     <link rel="stylesheet" href="Views/DatabaseIcon.css">
     <link rel="stylesheet" href="Views/DatabaseTableContentView.css">
     <link rel="stylesheet" href="Views/DatabaseTableIcon.css">
     <link rel="stylesheet" href="Views/DebuggerSidebarPanel.css">
     <link rel="stylesheet" href="Views/DetailsSection.css">
     <link rel="stylesheet" href="Views/DividerNavigationItem.css">
     <link rel="stylesheet" href="Views/Editing.css">
     <link rel="stylesheet" href="Views/ElementSnapshotContentView.css">
     <link rel="stylesheet" href="Views/ElementSnapshotDiffContentView.css">
     <link rel="stylesheet" href="Views/ElementSnapshotOutputContentView.css">
+    <link rel="stylesheet" href="Views/ElementSnapshotStyleContentView.css">
     <link rel="stylesheet" href="Views/ElementTrackingTimelineOverviewGraph.css">
     <link rel="stylesheet" href="Views/EventListenerSectionGroup.css">
     <link rel="stylesheet" href="Views/FilterBar.css">
     <link rel="stylesheet" href="Views/FindBanner.css">
     <link rel="stylesheet" href="Views/FlexibleSpaceNavigationItem.css">
     <link rel="stylesheet" href="Views/FolderIcon.css">
     <link rel="stylesheet" href="Views/FontResourceContentView.css">
     <link rel="stylesheet" href="Views/FormattedValue.css">
     <link rel="stylesheet" href="Views/GoToLineDialog.css">
     <link rel="stylesheet" href="Views/GradientSlider.css">
@@ -246,20 +247,21 @@
     <script src="Models/CookieStorageObject.js"></script>
     <script src="Models/DOMNode.js"></script>
     <script src="Models/DOMNodeStyles.js"></script>
     <script src="Models/DOMSearchMatchObject.js"></script>
     <script src="Models/DOMStorageObject.js"></script>
     <script src="Models/DOMTree.js"></script>
     <script src="Models/DatabaseObject.js"></script>
     <script src="Models/DatabaseTableObject.js"></script>
     <script src="Models/DebuggerDashboard.js"></script>
     <script src="Models/DefaultDashboard.js"></script>
+    <script src="Models/EffectiveStyleSnapshot.js"></script>
     <script src="Models/ElementSnapshot.js"></script>
     <script src="Models/ElementSnapshotDiff.js"></script>
     <script src="Models/ElementTrackingTimeline.js"></script>
     <script src="Models/ElementTrackingTimelineRecord.js"></script>
     <script src="Models/ExecutionContext.js"></script>
     <script src="Models/ExecutionContextList.js"></script>
     <script src="Models/Frame.js"></script>
     <script src="Models/Geometry.js"></script>
     <script src="Models/Gradient.js"></script>
     <script src="Models/IndexedDatabase.js"></script>
@@ -406,20 +408,21 @@
     <script src="Views/DatabaseTableTreeElement.js"></script>
     <script src="Views/DatabaseTreeElement.js"></script>
     <script src="Views/DebuggerDashboardView.js"></script>
     <script src="Views/DebuggerSidebarPanel.js"></script>
     <script src="Views/DefaultDashboardView.js"></script>
     <script src="Views/DividerNavigationItem.js"></script>
     <script src="Views/EditingSupport.js"></script>
     <script src="Views/ElementSnapshotContentView.js"></script>
     <script src="Views/ElementSnapshotDiffContentView.js"></script>
     <script src="Views/ElementSnapshotOutputContentView.js"></script>
+    <script src="Views/ElementSnapshotStyleContentView.js"></script>
     <script src="Views/ElementTrackingTimelineDataGridNode.js"></script>
     <script src="Views/ElementTrackingTimelineView.js"></script>
     <script src="Views/ElementTrackingTimelineOverviewGraph.js"></script>
     <script src="Views/EventListenerSection.js"></script>
     <script src="Views/EventListenerSectionGroup.js"></script>
     <script src="Views/FilterBar.js"></script>
     <script src="Views/FilterBarButton.js"></script>
     <script src="Views/FindBanner.js"></script>
     <script src="Views/FlexibleSpaceNavigationItem.js"></script>
     <script src="Views/FontResourceContentView.js"></script>
diff --git a/Source/WebInspectorUI/UserInterface/Models/CSSRule.js b/Source/WebInspectorUI/UserInterface/Models/CSSRule.js
index 8c185d0..440d43b 100644
--- a/Source/WebInspectorUI/UserInterface/Models/CSSRule.js
+++ b/Source/WebInspectorUI/UserInterface/Models/CSSRule.js
@@ -18,26 +18,26 @@
  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  * THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 WebInspector.CSSRule = class CSSRule extends WebInspector.Object
 {
-    constructor(nodeStyles, ownerStyleSheet, id, type, sourceCodeLocation, selectorText, selectors, matchedSelectorIndices, style, mediaList)
+    constructor(updateDelegate, ownerStyleSheet, id, type, sourceCodeLocation, selectorText, selectors, matchedSelectorIndices, style, mediaList)
     {
         super();
 
-        console.assert(nodeStyles);
-        this._nodeStyles = nodeStyles;
+        // A WebInspector.DOMNodeStyles instance if this corresponds to a live, editable style.
+        this._updateDelegate = updateDelegate || null;
 
         this._ownerStyleSheet = ownerStyleSheet || null;
         this._id = id || null;
         this._type = type || null;
 
         this.update(sourceCodeLocation, selectorText, selectors, matchedSelectorIndices, style, mediaList, true);
     }
 
     // Public
 
@@ -46,21 +46,30 @@ WebInspector.CSSRule = class CSSRule extends WebInspector.Object
         return this._id;
     }
 
     get ownerStyleSheet()
     {
         return this._ownerStyleSheet;
     }
 
     get editable()
     {
-        return !!this._id && (this._type === WebInspector.CSSRule.Type.Author || this._type === WebInspector.CSSRule.Type.Inspector);
+        if (!this._id)
+            return false;
+
+        if (!this._updateDelegate)
+            return false;
+
+        if (this._type === WebInspector.CSSRule.Type.Author || this._type === WebInspector.CSSRule.Type.Inspector)
+            return true;
+
+        return false;
     }
 
     update(sourceCodeLocation, selectorText, selectors, matchedSelectorIndices, style, mediaList, dontFireEvents)
     {
         sourceCodeLocation = sourceCodeLocation || null;
         selectorText = selectorText || "";
         selectors = selectors || [];
         matchedSelectorIndices = matchedSelectorIndices || [];
         style = style || null;
         mediaList = mediaList || [];
@@ -110,21 +119,21 @@ WebInspector.CSSRule = class CSSRule extends WebInspector.Object
 
     set selectorText(selectorText)
     {
         console.assert(this.editable);
         if (!this.editable)
             return;
 
         if (this._selectorText === selectorText)
             return;
 
-        this._nodeStyles.changeRuleSelector(this, selectorText);
+        this._updateDelegate.changeRuleSelector(this, selectorText);
     }
 
     get selectors()
     {
         return this._selectors;
     }
 
     get matchedSelectorIndices()
     {
         return this._matchedSelectorIndices;
@@ -174,27 +183,20 @@ WebInspector.CSSRule = class CSSRule extends WebInspector.Object
         return this._mediaList;
     }
 
     isEqualTo(rule)
     {
         if (!rule)
             return false;
 
         return Object.shallowEqual(this._id, rule.id);
     }
-
-    // Protected
-
-    get nodeStyles()
-    {
-        return this._nodeStyles;
-    }
 };
 
 WebInspector.CSSRule.Event = {
     Changed: "css-rule-changed"
 };
 
 WebInspector.CSSRule.Type = {
     Author: "css-rule-type-author",
     User: "css-rule-type-user",
     UserAgent: "css-rule-type-user-agent",
diff --git a/Source/WebInspectorUI/UserInterface/Models/CSSStyleDeclaration.js b/Source/WebInspectorUI/UserInterface/Models/CSSStyleDeclaration.js
index 94078cf..57594ad 100644
--- a/Source/WebInspectorUI/UserInterface/Models/CSSStyleDeclaration.js
+++ b/Source/WebInspectorUI/UserInterface/Models/CSSStyleDeclaration.js
@@ -18,29 +18,30 @@
  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  * THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 WebInspector.CSSStyleDeclaration = class CSSStyleDeclaration extends WebInspector.Object
 {
-    constructor(nodeStyles, ownerStyleSheet, id, type, node, inherited, text, properties, styleSheetTextRange)
+    constructor(updateDelegate, ownerStyleSheet, id, type, node, inherited, text, properties, styleSheetTextRange)
     {
         super();
 
-        console.assert(nodeStyles);
-        this._nodeStyles = nodeStyles;
+        // A WebInspector.DOMNodeStyles instance if this corresponds to a live, editable style.
+        this._updateDelegate = updateDelegate || null;
 
         this._ownerRule = null;
 
+        // Used to indirectly update the style declaration. Consider merging with updateDelegate somehow.
         this._ownerStyleSheet = ownerStyleSheet || null;
         this._id = id || null;
         this._type = type || null;
         this._node = node || null;
         this._inherited = inherited || false;
 
         this._pendingProperties = [];
         this._propertyNameMap = {};
 
         this.update(text, properties, styleSheetTextRange, true);
@@ -71,20 +72,23 @@ WebInspector.CSSStyleDeclaration = class CSSStyleDeclaration extends WebInspecto
     get node()
     {
         return this._node;
     }
 
     get editable()
     {
         if (!this._id)
             return false;
 
+        if (!this._updateDelegate)
+            return false;
+
         if (this._type === WebInspector.CSSStyleDeclaration.Type.Rule)
             return this._ownerRule && this._ownerRule.editable;
 
         if (this._type === WebInspector.CSSStyleDeclaration.Type.Inline)
             return !this._node.isInShadowTree();
 
         return false;
     }
 
     update(text, properties, styleSheetTextRange, dontFireEvents)
@@ -176,22 +180,23 @@ WebInspector.CSSStyleDeclaration = class CSSStyleDeclaration extends WebInspecto
     get text()
     {
         return this._text;
     }
 
     set text(text)
     {
         if (this._text === text)
             return;
 
-        this._nodeStyles.changeStyleText(this, text);
-    }
+        console.assert(this._updateDelegate, "Tried to edit style text of non-editable declaratin.");
+        this._updateDelegate.changeStyleText(this, text);
+    },
 
     get properties()
     {
         return this._properties;
     }
 
     get visibleProperties()
     {
         if (this._visibleProperties)
             return this._visibleProperties;
@@ -252,29 +257,23 @@ WebInspector.CSSStyleDeclaration = class CSSStyleDeclaration extends WebInspecto
         if (bestMatchProperty)
             return bestMatchProperty;
 
         var newProperty = new WebInspector.CSSProperty(NaN, null, name);
         newProperty.ownerStyle = this;
 
         this._pendingProperties.push(newProperty);
 
         return newProperty;
     }
-
-    // Protected
-
-    get nodeStyles()
-    {
-        return this._nodeStyles;
-    }
 };
 
 WebInspector.CSSStyleDeclaration.Event = {
     PropertiesChanged: "css-style-declaration-properties-changed"
 };
 
 WebInspector.CSSStyleDeclaration.Type = {
     Rule: "css-style-declaration-type-rule",
     Inline: "css-style-declaration-type-inline",
     Attribute: "css-style-declaration-type-attribute",
-    Computed: "css-style-declaration-type-computed"
+    Computed: "css-style-declaration-type-computed",
+    Effective: "css-style-declaration-type-effective"
 };
diff --git a/Source/WebInspectorUI/UserInterface/Models/EffectiveStyleSnapshot.js b/Source/WebInspectorUI/UserInterface/Models/EffectiveStyleSnapshot.js
new file mode 100644
index 0000000..5cf0c3e
--- /dev/null
+++ b/Source/WebInspectorUI/UserInterface/Models/EffectiveStyleSnapshot.js
@@ -0,0 +1,304 @@
+/*
+ * Copyright (C) 2015 University of Washington.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
+ * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
+ * THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+// This class acts as a static data source for style data. It can be used in
+// place of WebInspector.DOMNodeStyles. It does not update style data as it
+// changes on the page, nor does it support editing.
+
+WebInspector.EffectiveStyleSnapshot = function(targetElement, properties, matchedRules, inlineStyles)
+{
+    this._targetElement = targetElement;
+    this._properties = properties;
+    this._matchedRules = matchedRules;
+    this._inlineStyles = inlineStyles;
+
+    var args = [
+        null, // updateDelegate
+        null, // ownerStyleSheet
+        null, // id
+        WebInspector.CSSStyleDeclaration.Type.Effective, // type
+        // FIXME: is this actually used anywhere? Not sure where it is used. We could plug in the target element.
+        null, // node
+        false, // inherited
+        null, // text
+        this._properties, // properties
+        null, // styleSheetTextRange
+    ];
+    this._declaration = new WebInspector.CSSStyleDeclaration(...args);
+}
+
+WebInspector.EffectiveStyleSnapshot.fromPayload = function(payload)
+{
+    // Much of this parsing functionality is copied from DOMNodeStyles. It is
+    // simplified in some parts because we do not need to update existing model objects.
+
+    var ruleIdToParsedRuleMap = new Map;
+    var nodeIdToParsedInlineStyleMap = new Map;
+
+    var matchedRules = [];
+    var inlineStyles = [];
+
+    var targetElement = WebInspector.domTreeManager.nodeForId(payload.targetElement);
+
+    for (var elementEntry of payload.elements) {
+        var node = WebInspector.domTreeManager.nodeForId(elementEntry.nodeId);
+        console.assert(node, node);
+        var isInherited = node !== targetElement;
+        if ("inlineStyle" in elementEntry) {
+            var inlineStyle = parseDeclarationPayload(elementEntry.inlineStyle, node, isInherited, WebInspector.CSSStyleDeclaration.Type.Inline);
+            nodeIdToParsedInlineStyleMap.set(elementEntry.nodeId, inlineStyle);
+            inlineStyles.push(inlineStyle);
+        }
+
+        // Iterate matched rules in reverse order to match the cascade order.
+        for (var match of elementEntry.matchedRules) {
+            var rule = parseRulePayload(match.rule, match.matchingSelectors, node, isInherited);
+            if (!rule)
+                continue;
+            var key = "%d:%d".format(rule.id.styleSheetId, rule.id.ordinal);
+            ruleIdToParsedRuleMap.set(key, rule);
+            matchedRules.push(rule);
+        }
+    }
+
+    var effectiveProperties = [];
+    for (var i = 0; i < payload.properties.length; ++i) {
+        var propertyEntry = payload.properties[i];
+        var property = parsePropertyPayload(propertyEntry.property, i, null);
+        // If property came from a rule, find that rule based on its id.
+        if ("sourceRule" in propertyEntry) {
+            var ruleId = propertyEntry.sourceRule;
+            var key = "%d:%d".format(ruleId.styleSheetId, ruleId.ordinal);
+            console.assert(ruleIdToParsedRuleMap.has(key));
+            var originatingRule = ruleIdToParsedRuleMap.get(key);
+            property.ownerStyle = originatingRule.style;
+        }
+        // If property came from an element's inline style, find that.
+        else if ("sourceElement" in propertyEntry) {
+            console.assert(nodeIdToParsedInlineStyleMap.has(propertyEntry.sourceElement));
+            var originatingStyle = nodeIdToParsedInlineStyleMap.get(propertyEntry.sourceElement);
+            property.ownerStyle = originatingStyle;
+        }
+
+        effectiveProperties.push(property);
+    }
+
+    function createSourceCodeLocation(sourceURL, sourceLine, sourceColumn) {
+        if (!sourceURL)
+            return null;
+
+        var sourceCode;
+
+        // Try to use the node to find the frame which has the correct resource first.
+        if (targetElement.ownerDocument) {
+            var mainResource = WebInspector.frameResourceManager.resourceForURL(targetElement.ownerDocument.documentURL);
+            if (mainResource) {
+                var parentFrame = mainResource.parentFrame;
+                sourceCode = parentFrame.resourceForURL(sourceURL);
+            }
+        }
+
+        // If that didn't find the resource, then search all frames.
+        if (!sourceCode)
+            sourceCode = WebInspector.frameResourceManager.resourceForURL(sourceURL);
+
+        if (!sourceCode)
+            return null;
+
+        return sourceCode.createSourceCodeLocation(sourceLine || 0, sourceColumn || 0);
+    };
+
+    return new WebInspector.EffectiveStyleSnapshot(targetElement, effectiveProperties, matchedRules, inlineStyles);
+
+    function parseRulePayload(payload, matchedSelectorIndices, node, isInherited)
+    {
+        if (!payload)
+            return null;
+
+        // User and User Agent rules don't have 'ruleId' in the payload. However, their style's have 'styleId' and
+        // 'styleId' is the same identifier the backend uses for Author rule identifiers, so do the same here.
+        // They are excluded by the backend because they are not editable, however our front-end does not determine
+        // editability solely based on the existence of the id like the open source front-end does.
+        var ruleId = payload.ruleId || payload.style.styleId;
+
+        var style = parseDeclarationPayload(payload.style, node, isInherited, WebInspector.CSSStyleDeclaration.Type.Rule);
+        if (!style)
+            return null;
+
+        var selectorText = payload.selectorList.text;
+        var selectors = parseSelectorListPayload(payload.selectorList);
+        var sourceRange = payload.selectorList.range;
+        var sourceCodeLocation = createSourceCodeLocation(payload.sourceURL, sourceRange.startLine, sourceRange.startColumn);
+        var mediaList = parseMediaListPayload(payload.media);
+
+        var ruleType;
+        switch (payload.origin) {
+        case "regular":
+            ruleType = WebInspector.CSSRule.Type.Author;
+            break;
+        case "user":
+            ruleType = WebInspector.CSSRule.Type.User;
+            break;
+        case "user-agent":
+            ruleType = WebInspector.CSSRule.Type.UserAgent;
+            break;
+        case "inspector":
+            ruleType = WebInspector.CSSRule.Type.Inspector;
+            break;
+        }
+
+        var rule = new WebInspector.CSSRule(null, null, ruleId, ruleType, sourceCodeLocation, selectorText, selectors, matchedSelectorIndices, null, mediaList);
+        style.ownerRule = rule;
+        return rule;
+    }
+
+    function parseMediaListPayload(mediaList)
+    {
+        if (!mediaList)
+            return [];
+
+        var mediaList = [];
+        for (var item of mediaList) {
+            var mediaType;
+            switch (item.source) {
+            case "mediaRule":
+                mediaType = WebInspector.CSSMedia.Type.MediaRule;
+                break;
+            case "importRule":
+                mediaType = WebInspector.CSSMedia.Type.ImportRule;
+                break;
+            case "linkedSheet":
+                mediaType = WebInspector.CSSMedia.Type.LinkedStyleSheet;
+                break;
+            case "inlineSheet":
+                mediaType = WebInspector.CSSMedia.Type.InlineStyleSheet;
+                break;
+            }
+
+            var location = this._createSourceCodeLocation(item.sourceURL, item.sourceLine);
+            mediaList.push(new WebInspector.CSSMedia(mediaType, mediaText, location));
+        }
+        return mediaList;
+    }
+
+    function parseSelectorListPayload(selectorList)
+    {
+        var selectors = selectorList.selectors;
+        if (!selectors.length)
+            return [];
+
+        return selectors.map(function(selectorPayload) {
+            return new WebInspector.CSSSelector(selectorPayload.text, selectorPayload.specificity, selectorPayload.dynamic);
+        });
+    }
+
+    function parseDeclarationPayload(payload, node, isInherited, styleType)
+    {
+        if (!payload)
+            return null;
+
+        var shorthands = {};
+        for (var i = 0; payload.shorthandEntries && i < payload.shorthandEntries.length; ++i) {
+            var shorthand = payload.shorthandEntries[i];
+            shorthands[shorthand.name] = shorthand.value;
+        }
+
+        var inheritedPropertyCount = 0;
+        var cssProperties = [];
+        for (var i = 0; payload.cssProperties && i < payload.cssProperties.length; ++i) {
+            var propertyPayload = payload.cssProperties[i];
+
+            if (isInherited && propertyPayload.name in WebInspector.CSSKeywordCompletions.InheritedProperties)
+                ++inheritedPropertyCount;
+
+            var property = parsePropertyPayload(propertyPayload, i, payload.cssText);
+            cssProperties.push(property);
+        }
+
+        if (isInherited && !inheritedPropertyCount)
+            return null;
+
+        var textRange = parseSourceRangePayload(payload.range);
+        var declaration = new WebInspector.CSSStyleDeclaration(this, null, payload.styleId, styleType, node, isInherited, payload.cssText, cssProperties, textRange);
+        for (var cssProperty of cssProperties)
+            cssProperty.ownerStyle = declaration;
+
+        return declaration;
+    }
+
+    function parsePropertyPayload(payload, index, styleText)
+    {
+        if (!payload)
+            return null;
+
+        var propertyText = payload.text || "";
+        var value = (payload.value || "").replace(/\s*!important\s*$/, "");
+        var priority = payload.priority || "";
+
+        var enabled = true;
+        var overridden = false;
+        var implicit = payload.implicit || false;
+        var valid = "parsedOk" in payload ? payload.parsedOk : true;
+
+        switch (payload.status || "style") {
+        case "active":
+            enabled = true;
+            break;
+        case "inactive":
+            overridden = true;
+            enabled = true;
+            break;
+        case "disabled":
+            enabled = false;
+            break;
+        }
+
+        var styleSheetTextRange = parseSourceRangePayload(payload.range);
+        return new WebInspector.CSSProperty(index, propertyText, payload.name, value, priority, enabled, overridden, implicit, false, valid, styleSheetTextRange, null);
+    }
+
+    function parseSourceRangePayload(payload)
+    {
+        if (!payload)
+            return null;
+
+        return new WebInspector.TextRange(payload.startLine, payload.startColumn, payload.endLine, payload.endColumn);
+    }
+}
+
+WebInspector.EffectiveStyleSnapshot.prototype = {
+    constructor: WebInspector.EffectiveStyleSnapshot,
+    __proto__: WebInspector.Object.prototype,
+
+    get properties()
+    {
+        return this._properties.slice();
+    },
+
+    get declaration()
+    {
+        return this._declaration;
+    }
+}
diff --git a/Source/WebInspectorUI/UserInterface/Models/ElementSnapshot.js b/Source/WebInspectorUI/UserInterface/Models/ElementSnapshot.js
index 23fb55d..e532e42 100644
--- a/Source/WebInspectorUI/UserInterface/Models/ElementSnapshot.js
+++ b/Source/WebInspectorUI/UserInterface/Models/ElementSnapshot.js
@@ -40,38 +40,42 @@ WebInspector.ElementSnapshotHeader.prototype = {
     constructor: WebInspector.ElementSnapshotHeader,
     __proto__: WebInspector.Object.prototype,
 
     fetchData: function()
     {
         if (!this._payloadPromise) {
             this._payloadPromise = DOMTracingAgent.getSnapshotPayload.promise(this.snapshotId)
                 .then(function(response) {
                     console.assert(response.payload.snapshotId === this.snapshotId);
                     return new WebInspector.ElementSnapshot(this, response.payload);
-                }.bind(this));
+                }.bind(this))
+                .catch(function(error) {
+                    console.log(error); throw error;
+                });
         }
 
         return this._payloadPromise;
     },
 
     saveIdentityToCookie: function(cookie)
     {
         // Do nothing, since snapshots are not saved across reloads or reopens.
     }
 }
 
 WebInspector.ElementSnapshot = function(header, payload)
 {
     console.assert(header instanceof WebInspector.ElementSnapshotHeader);
 
     this._header = header;
     this._imageDataURL = payload.imageData;
+    this._effectiveStyle = WebInspector.EffectiveStyleSnapshot.fromPayload(payload.styleData);
 }
 
 WebInspector.ElementSnapshot.prototype = {
     constructor: WebInspector.ElementSnapshot,
     __proto__: WebInspector.Object.prototype,
 
     get snapshotId()
     {
         return this._header.snapshotId;
     },
@@ -87,12 +91,17 @@ WebInspector.ElementSnapshot.prototype = {
 
         if (!this._imageDataURL)
             return null;
 
         if (this._imageDataURL.length > maximumDataURLSize) {
             console.error("Element snapshot too large " + Number.bytesToString(this._imageDataURL.length) + "for data url.");
             return null;
         }
 
         return this._imageDataURL;
+    },
+
+    get effectiveStyle()
+    {
+        return this._effectiveStyle;
     }
 }
diff --git a/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotContentView.css b/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotContentView.css
index 38e821c..0fd118f 100644
--- a/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotContentView.css
+++ b/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotContentView.css
@@ -19,10 +19,14 @@
  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  * THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 .visual-output-icon > .icon {
     content: url(../Images/Camera.svg);
 }
+
+.effective-style-icon > .icon {
+    content: url(../Images/NavigationItemBrushAndRuler.svg);
+}
diff --git a/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotContentView.js b/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotContentView.js
index e6f28b6..23c55f9 100644
--- a/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotContentView.js
+++ b/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotContentView.js
@@ -30,30 +30,36 @@ WebInspector.ElementSnapshotContentView = function(snapshot)
 
     this._snapshot = snapshot;
 
     function createPathComponent(displayName, classNames, identifier)
     {
         var pathComponent = new WebInspector.HierarchicalPathComponent(displayName, classNames, identifier, false, true);
         pathComponent.addEventListener(WebInspector.HierarchicalPathComponent.Event.SiblingWasSelected, this._pathComponentSelected, this);
         return pathComponent;
     }
 
-    this._visualOutputPathComponent = createPathComponent.call(this, WebInspector.UIString("Visual Output"), WebInspector.ElementSnapshotContentView.VisualOutputIconStyleClassName, WebInspector.ElementSnapshotContentView.VisualOutputIdentifier, false, false);
+    this._outputPathComponent = createPathComponent.call(this, WebInspector.UIString("Visual Output"), WebInspector.ElementSnapshotContentView.VisualOutputIconStyleClassName, WebInspector.ElementSnapshotContentView.VisualOutputIdentifier, false, false);
+    this._stylePathComponent = createPathComponent.call(this, WebInspector.UIString("Effective Style"), WebInspector.ElementSnapshotContentView.EffectiveStyleIconStyleClassName, WebInspector.ElementSnapshotContentView.EffectiveStyleIdentifier, false, false);
+
+    this._outputPathComponent.nextSibling = this._stylePathComponent;
+    this._stylePathComponent.previousSibling = this._outputPathComponent;
 
     this._currentContentViewSetting = new WebInspector.Setting("element-snapshot-current-view", WebInspector.ElementSnapshotContentView.VisualOutputIdentifier);
 };
 
 WebInspector.ElementSnapshotContentView.ContentViewIdentifierCookieKey = "element-snapshot-content-view-identifier";
 
 WebInspector.ElementSnapshotContentView.VisualOutputIdentifier = "visual-output";
+WebInspector.ElementSnapshotContentView.EffectiveStyleIdentifier = "effective-style";
 
 WebInspector.ElementSnapshotContentView.VisualOutputIconStyleClassName = "visual-output-icon";
+WebInspector.ElementSnapshotContentView.EffectiveStyleIconStyleClassName = "effective-style-icon";
 
 WebInspector.ElementSnapshotContentView.prototype = {
     constructor: WebInspector.ElementSnapshotContentView,
     __proto__: WebInspector.ClusterContentView.prototype,
 
     // Public
 
     get selectionPathComponents()
     {
         var currentContentView = this._contentViewContainer.currentContentView;
@@ -66,20 +72,28 @@ WebInspector.ElementSnapshotContentView.prototype = {
     },
 
     get visualOutputContentView()
     {
         if (!this._visualOutputContentView)
             this._visualOutputContentView = new WebInspector.ElementSnapshotOutputContentView(this._snapshot);
 
         return this._visualOutputContentView;
     },
 
+    get effectiveStyleContentView()
+    {
+        if (!this._effectiveStyleContentView)
+            this._effectiveStyleContentView = new WebInspector.ElementSnapshotStyleContentView(this._snapshot);
+
+        return this._effectiveStyleContentView;
+    },
+
     shown: function()
     {
         WebInspector.ClusterContentView.prototype.shown.call(this);
 
         if (this._shownInitialContent)
             return;
 
         this._showContentViewForIdentifier(this._currentContentViewSetting.value);
     },
 
@@ -90,64 +104,76 @@ WebInspector.ElementSnapshotContentView.prototype = {
         this._shownInitialContent = false;
     },
 
     saveToCookie: function(cookie)
     {
         cookie[WebInspector.ElementSnapshotContentView.ContentViewIdentifierCookieKey] = this._currentContentViewSetting.value;
     },
 
     restoreFromCookie: function(cookie)
     {
-        var contentView = this._showContentViewForIdentifier(cookie[WebInspector.ElementSnapshotContentView.ContentViewIdentifierCookieKey]);
-        if (typeof contentView.revealPosition === "function" && "lineNumber" in cookie && "columnNumber" in cookie)
-            contentView.revealPosition(new WebInspector.SourceCodePosition(cookie.lineNumber, cookie.columnNumber));
+        this._showContentViewForIdentifier(cookie[WebInspector.ElementSnapshotContentView.ContentViewIdentifierCookieKey]);
     },
 
     showVisualOutput: function()
     {
         this._shownInitialContent = true;
 
         return this._showContentViewForIdentifier(WebInspector.ElementSnapshotContentView.VisualOutputIdentifier);
     },
 
+    showEffectiveStyle: function()
+    {
+        this._shownInitialContent = true;
+
+        return this._showContentViewForIdentifier(WebInspector.ElementSnapshotContentView.EffectiveStyleIdentifier);
+    },
+
     // Private
 
     _pathComponentForContentView: function(contentView)
     {
         console.assert(contentView);
         if (!contentView)
             return null;
         if (contentView === this._visualOutputContentView)
-            return this._visualOutputPathComponent;
+            return this._outputPathComponent;
+        if (contentView === this._effectiveStyleContentView)
+            return this._stylePathComponent;
         console.error("Unknown contentView.");
         return null;
     },
 
     _identifierForContentView: function(contentView)
     {
         console.assert(contentView);
         if (!contentView)
             return null;
         if (contentView === this._visualOutputContentView)
             return WebInspector.ElementSnapshotContentView.VisualOutputIdentifier;
+        if (contentView === this._effectiveStyleContentView)
+            return WebInspector.ElementSnapshotContentView.EffectiveStyleIdentifier;
         console.error("Unknown contentView.");
         return null;
     },
 
     _showContentViewForIdentifier: function(identifier)
     {
         var contentViewToShow = null;
 
         switch (identifier) {
         case WebInspector.ElementSnapshotContentView.VisualOutputIdentifier:
             contentViewToShow = this.visualOutputContentView;
             break;
+        case WebInspector.ElementSnapshotContentView.EffectiveStyleIdentifier:
+            contentViewToShow = this.effectiveStyleContentView;
+            break;
         }
         if (!contentViewToShow)
             contentViewToShow = this.visualOutputContentView;
 
         console.assert(contentViewToShow);
 
         this._currentContentViewSetting.value = this._identifierForContentView(contentViewToShow);
 
         return this.contentViewContainer.showContentView(contentViewToShow);
     },
diff --git a/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotContentView.css b/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotStyleContentView.css
similarity index 95%
copy from Source/WebInspectorUI/UserInterface/Views/ElementSnapshotContentView.css
copy to Source/WebInspectorUI/UserInterface/Views/ElementSnapshotStyleContentView.css
index 38e821c..9746074 100644
--- a/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotContentView.css
+++ b/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotStyleContentView.css
@@ -16,13 +16,12 @@
  * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
  * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  * THE POSSIBILITY OF SUCH DAMAGE.
  */
 
-.visual-output-icon > .icon {
-    content: url(../Images/Camera.svg);
+.content-view.element-snapshot-style {
 }
diff --git a/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotContentView.css b/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotStyleContentView.js
similarity index 54%
copy from Source/WebInspectorUI/UserInterface/Views/ElementSnapshotContentView.css
copy to Source/WebInspectorUI/UserInterface/Views/ElementSnapshotStyleContentView.js
index 38e821c..68e888d 100644
--- a/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotContentView.css
+++ b/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotStyleContentView.js
@@ -1,12 +1,12 @@
 /*
- * Copyright (C) 2015 University of Washington.
+ * Copyright (C) 2015 University of Washington. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
  *    notice, this list of conditions and the following disclaimer.
  * 2. Redistributions in binary form must reproduce the above copyright
  *    notice, this list of conditions and the following disclaimer in the
  *    documentation and/or other materials provided with the distribution.
  *
@@ -16,13 +16,38 @@
  * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
  * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  * THE POSSIBILITY OF SUCH DAMAGE.
  */
 
-.visual-output-icon > .icon {
-    content: url(../Images/Camera.svg);
-}
+WebInspector.ElementSnapshotStyleContentView = function(snapshot)
+{
+    console.assert(snapshot instanceof WebInspector.ElementSnapshot, snapshot);
+    WebInspector.ContentView.call(this, snapshot);
+
+    this.element.classList.add(WebInspector.ElementSnapshotStyleContentView.StyleClassName);
+
+    this._propertiesTextEditor = new WebInspector.CSSStyleDeclarationTextEditor(this, snapshot.effectiveStyle.declaration);
+    this._propertiesTextEditor.showsImplicitProperties = false;
+    this._propertiesTextEditor.sortProperties = true;
+
+    this.element.appendChild(this._propertiesTextEditor.element);
+};
+
+WebInspector.ElementSnapshotStyleContentView.StyleClassName = "element-snapshot-style";
+
+WebInspector.ElementSnapshotStyleContentView.prototype = {
+    constructor: WebInspector.ElementSnapshotStyleContentView,
+    __proto__: WebInspector.ContentView.prototype,
+
+
+    shown: function()
+    {
+        WebInspector.ContentView.prototype.shown.call(this);
+
+        this._propertiesTextEditor.updateLayout();
+    },
+};
-- 
2.3.5

