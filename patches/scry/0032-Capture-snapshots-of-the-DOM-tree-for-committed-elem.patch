From dd68388499eb7b01113a4723bbbaf5baa3bf568f Mon Sep 17 00:00:00 2001
From: "Brian J. Burg" <burg@cs.washington.edu>
Date: Thu, 19 Mar 2015 14:08:01 -0700
Subject: [PATCH] Capture snapshots of the DOM tree for committed element
 snapshots.

---
 .../inspector/InspectorProtocolTypes.h             |   7 +-
 Source/JavaScriptCore/inspector/InspectorValues.h  |   4 +
 .../inspector/protocol/DOMTracing.json             |  28 ++++-
 .../WebCore/inspector/InspectorDOMTracingAgent.cpp |  59 ++++++++-
 .../WebCore/inspector/InspectorDOMTracingAgent.h   |   9 ++
 Source/WebInspectorUI/UserInterface/Main.html      |   2 +
 .../UserInterface/Models/DOMNodeSnapshot.js        | 139 +++++++++++++++++++++
 .../UserInterface/Models/DOMTreeSnapshot.js        |  52 ++++++++
 .../UserInterface/Models/ElementSnapshot.js        |   8 +-
 9 files changed, 304 insertions(+), 4 deletions(-)
 create mode 100644 Source/WebInspectorUI/UserInterface/Models/DOMNodeSnapshot.js
 create mode 100644 Source/WebInspectorUI/UserInterface/Models/DOMTreeSnapshot.js

diff --git a/Source/JavaScriptCore/inspector/InspectorProtocolTypes.h b/Source/JavaScriptCore/inspector/InspectorProtocolTypes.h
index 6f06296..c16ab2d 100644
--- a/Source/JavaScriptCore/inspector/InspectorProtocolTypes.h
+++ b/Source/JavaScriptCore/inspector/InspectorProtocolTypes.h
@@ -86,21 +86,26 @@ public:
     
     void addItem(const String& value)
     {
         openAccessors().pushString(value);
     }
 
     void addItem(int value)
     {
         openAccessors().pushInteger(value);
     }
-    
+
+    void reserveCapacity(size_t newCapacity)
+    {
+        openAccessors().reserveCapacity(newCapacity);
+    }
+
     static Ref<Array<T>> create()
     {
         return adoptRef(*new Array<T>());
     }
 };
 
 // Helper methods for Protocol and other Inspector types are provided by
 // specializations of BindingTraits<T>. Some are generated for protocol types.
 
 template<typename T>
diff --git a/Source/JavaScriptCore/inspector/InspectorValues.h b/Source/JavaScriptCore/inspector/InspectorValues.h
index baffcb0..b00cee3 100644
--- a/Source/JavaScriptCore/inspector/InspectorValues.h
+++ b/Source/JavaScriptCore/inspector/InspectorValues.h
@@ -281,20 +281,22 @@ protected:
 
     RefPtr<InspectorValue> get(size_t index);
 
     virtual void writeJSON(StringBuilder& output) const override;
 
     iterator begin() { return m_data.begin(); }
     iterator end() { return m_data.end(); }
     const_iterator begin() const { return m_data.begin(); }
     const_iterator end() const { return m_data.end(); }
 
+    void reserveCapacity(size_t newCapacity) { m_data.reserveCapacity(newCapacity); }
+
 protected:
     InspectorArrayBase();
 
 private:
     Vector<RefPtr<InspectorValue>> m_data;
 };
 
 class InspectorArray : public InspectorArrayBase {
 public:
     static JS_EXPORT_PRIVATE Ref<InspectorArray> create();
@@ -306,20 +308,22 @@ public:
     using InspectorArrayBase::pushDouble;
     using InspectorArrayBase::pushString;
     using InspectorArrayBase::pushValue;
     using InspectorArrayBase::pushObject;
     using InspectorArrayBase::pushArray;
 
     using InspectorArrayBase::get;
 
     using InspectorArrayBase::begin;
     using InspectorArrayBase::end;
+    
+    using InspectorArrayBase::reserveCapacity;
 };
 
 
 inline InspectorObjectBase::iterator InspectorObjectBase::find(const String& name)
 {
     return m_data.find(name);
 }
 
 inline InspectorObjectBase::const_iterator InspectorObjectBase::find(const String& name) const
 {
diff --git a/Source/JavaScriptCore/inspector/protocol/DOMTracing.json b/Source/JavaScriptCore/inspector/protocol/DOMTracing.json
index bf2c09a..a5c555d 100644
--- a/Source/JavaScriptCore/inspector/protocol/DOMTracing.json
+++ b/Source/JavaScriptCore/inspector/protocol/DOMTracing.json
@@ -27,21 +27,22 @@
                 { "name": "boundingBox", "$ref": "FloatRect", "description": "Bounding box for the element's fragments in root view (global, absolute) coordinates." },
                 { "name": "elapsedTimestamp", "type": "number", "description": "Elapsed time since the start of page execution when the snapshot was created." }
             ]
         },
         {
             "id": "ElementSnapshotPayload",
             "type": "object",
             "properties": [
                 { "name": "snapshotId", "$ref": "SnapshotId" },
                 { "name": "imageData", "$ref": "ImageData", "description": "Base64-encoded image data for the snapshot." },
-                { "name": "styleData", "$ref": "EffectiveStyle", "description": "Effective style for element based on properties contributed from inline styles and rules." }
+                { "name": "styleData", "$ref": "EffectiveStyle", "description": "Effective style for element based on properties contributed from inline styles and rules." },
+                { "name": "subtreeData", "$ref": "DOMTreeSnapshot", "description": "DOM tree snapshot rooted at the target element. "}
             ]
         },
         {
             "id": "ImageData",
             "type": "object",
             "properties": [
                 { "name": "mimeType", "type": "string", "description": "Mime type for the encoded image data." },
                 { "name": "encodedData", "type": "string", "description": "base64-encoded image data." }
             ]
         },
@@ -90,20 +91,45 @@
             "type": "string",
             "enum": [
                 "Target",
                 "Parent",
                 "Child",
                 "Ancestor",
                 "Descendant",
                 "Sibling",
                 "None"
             ]
+        },
+        {
+            "id": "NodeSnapshotOrdinal",
+            "type": "integer",
+            "description": "Refers to a node by its position in a DOMTreeSnapshot array."
+        },
+        {
+            "id": "NodeSnapshot",
+            "type": "object",
+            "description": "A lightweight serialization of a DOM node. It only includes properties that are relevant to CSS rule selectors. Property names follow the Node API (https://developer.mozilla.org/en-US/docs/Web/API/Node).",
+            "properties": [
+                { "name": "children", "type": "array", "optional": true, "items": { "$ref": "NodeSnapshotOrdinal" }, "description": "Snapshot ids for child nodes if any."},
+                { "name": "nodeType", "type": "integer", "description": "Node type (as defined in Node.idl)." },
+                { "name": "nodeName", "type": "string", "description": "Tag name if an element, otherwise #text or #document" },
+                { "name": "nodeValue", "type": "string", "optional": true, "description": "If a text node, the node's text value."},
+                { "name": "attributes", "type": "array", "items": { "type": "string" }, "optional": true, "description": "If an element, a list of attribute keys and values (key1, value1, key2, value2, ...)."}
+            ]
+        },
+        {
+            "id": "DOMTreeSnapshot",
+            "type": "object",
+            "description": "A lightweight serialization of a DOM subtree.",
+            "properties": [
+                { "name": "nodes", "type": "array", "items": { "$ref": "NodeSnapshot" }, "description": "List of node snapshots. "}
+            ]
         }
     ],
     "commands": [
         {
             "name": "startTrackingElement",
             "description": "Sets the element whose changes should be tracked.",
             "parameters": [
                  { "name": "nodeId", "$ref": "DOM.NodeId", "description": "Identifier for the element that should be tracked." }
             ]
         },
diff --git a/Source/WebCore/inspector/InspectorDOMTracingAgent.cpp b/Source/WebCore/inspector/InspectorDOMTracingAgent.cpp
index 00bb277..3ed99bd 100644
--- a/Source/WebCore/inspector/InspectorDOMTracingAgent.cpp
+++ b/Source/WebCore/inspector/InspectorDOMTracingAgent.cpp
@@ -35,20 +35,21 @@
 #include "InspectorCSSAgent.h"
 #include "InspectorDOMAgent.h"
 #include "InspectorInlineStyleRuleSet.h"
 #include "InspectorPageAgent.h"
 #include "InspectorStyleDeclaration.h"
 #include "InstrumentingAgents.h"
 #include "JSMainThreadExecState.h"
 #include "Logging.h"
 #include "MainFrame.h"
 #include "Node.h"
+#include "NodeTraversal.h"
 #include "Page.h"
 #include "RenderObject.h"
 #include "StyledElement.h"
 #include "StyleProperties.h"
 #include "StyleResolver.h"
 #include "StyleRule.h"
 #include <bitset>
 #include <inspector/InspectorFrontendChannel.h>
 #include <inspector/ScriptCallStack.h>
 #include <inspector/ScriptCallStackFactory.h>
@@ -59,20 +60,25 @@ using namespace WebCore;
 
 namespace Inspector {
 
 static int maxCallStackDepth = 5;
 
 StyleSnapshot::StyleSnapshot(RefPtr<Inspector::Protocol::DOMTracing::EffectiveStyle>&& encodedData)
     : encodedData(encodedData)
 {
 }
 
+SubtreeSnapshot::SubtreeSnapshot(RefPtr<Inspector::Protocol::DOMTracing::DOMTreeSnapshot>&& encodedData)
+    : encodedData(encodedData)
+{
+}
+
 ElementSnapshot::ElementSnapshot() { }
 ElementSnapshot::~ElementSnapshot() { }
 
 ElementSnapshot::ElementSnapshot(std::unique_ptr<ImageBuffer> data, const LayoutRect& bounds, uint64_t snapshotId)
     : imageData(std::move(data))
     , boundingBox(bounds)
     , snapshotId(snapshotId)
 {
 }
 
@@ -280,20 +286,70 @@ std::unique_ptr<StyleSnapshot> DOMTracingAgent::createStyleSnapshot(Element& tar
 
     auto effectiveStyleObject = Inspector::Protocol::DOMTracing::EffectiveStyle::create()
         .setTargetElement(m_domAgent->pushNodePathToFrontend(&targetElement))
         .setElements(WTF::move(elementsArray))
         .setProperties(WTF::move(propertiesArray))
         .release();
 
     return std::make_unique<StyleSnapshot>(WTF::move(effectiveStyleObject));
 }
 
+std::unique_ptr<SubtreeSnapshot> DOMTracingAgent::createSubtreeSnapshot(Element& rootElement)
+{
+    auto nodeObjects = Inspector::Protocol::Array<Inspector::Protocol::DOMTracing::NodeSnapshot>::create();
+
+    HashMap<Node*, uint64_t> nodeOrdinals;
+    uint64_t nextOrdinal = 0;
+
+    for (Node* node = &rootElement; node; node = NodeTraversal::next(*node, &rootElement))
+        nodeOrdinals.set(node, nextOrdinal++);
+
+    for (Node* node = &rootElement; node; node = NodeTraversal::next(*node, &rootElement)) {
+        auto nodeObject = Inspector::Protocol::DOMTracing::NodeSnapshot::create()
+            .setNodeType(node->nodeType())
+            .setNodeName(node->nodeName())
+            .release();
+
+        if (node->hasChildNodes()) {
+            auto childOrdinalsArray = Inspector::Protocol::Array<Inspector::Protocol::DOMTracing::NodeSnapshotOrdinal>::create();
+            for (Node* child = node->firstChild(); child; child = child->nextSibling()) {
+                auto findResult = nodeOrdinals.find(child);
+                ASSERT(findResult != nodeOrdinals.end());
+                childOrdinalsArray->addItem(findResult->value);
+            }
+            nodeObject->setChildren(WTF::move(childOrdinalsArray));
+        }
+
+        if (!node->nodeValue().isNull())
+            nodeObject->setNodeValue(node->nodeValue());
+
+        if (node->hasAttributes()) {
+            auto attributesArray = Inspector::Protocol::Array<String>::create();
+            ASSERT(is<Element>(node));
+            const Element& element = downcast<Element>(*node);
+            attributesArray->reserveCapacity(element.attributeCount() * 2);
+            for (const Attribute& attribute : element.attributesIterator()) {
+                attributesArray->addItem(attribute.localName().string());
+                attributesArray->addItem(attribute.value().string());
+            }
+            nodeObject->setAttributes(WTF::move(attributesArray));
+        }
+        nodeObjects->addItem(WTF::move(nodeObject));
+    }
+
+    auto subtreeObject = Inspector::Protocol::DOMTracing::DOMTreeSnapshot::create()
+        .setNodes(WTF::move(nodeObjects))
+        .release();
+
+    return std::make_unique<SubtreeSnapshot>(WTF::move(subtreeObject));
+}
+
 void DOMTracingAgent::didCreateFrontendAndBackend(FrontendChannel* frontendChannel, BackendDispatcher* backendDispatcher)
 {
     m_frontendDispatcher = std::make_unique<DOMTracingFrontendDispatcher>(frontendChannel);
     m_backendDispatcher = DOMTracingBackendDispatcher::create(backendDispatcher, this);
 
     m_instrumentingAgents->setDOMTracingAgent(this);
 }
 
 void DOMTracingAgent::willDestroyFrontendAndBackend(DisconnectReason)
 {
@@ -372,20 +428,21 @@ void DOMTracingAgent::getSnapshotPayload(ErrorString& error, int snapshotId, Ref
 
     auto imageDataObject = Inspector::Protocol::DOMTracing::ImageData::create()
         .setMimeType(mimeType)
         .setEncodedData(dataURL.substringSharingImpl(offsetResult + 8)) // ;base64, is 8 characters
         .release();
 
     out_snapshotPayload = Inspector::Protocol::DOMTracing::ElementSnapshotPayload::create()
         .setSnapshotId(lookupKey)
         .setImageData(WTF::move(imageDataObject))
         .setStyleData(foundSnapshot->effectiveStyle->encodedData)
+        .setSubtreeData(foundSnapshot->subtree->encodedData)
         .release();
 }
 
 // InspectorInstrumentation entry points.
 
 void DOMTracingAgent::frameNavigated(Frame& frame)
 {
     // If the target node was in this frame, its document will soon be detached.
     if (!m_targetElement || m_targetElement->document().frame() == &frame)
         setTargetElement(nullptr);
@@ -538,21 +595,21 @@ void DOMTracingAgent::commitSnapshot(std::unique_ptr<ElementSnapshot> snapshot)
         uint64_t key = m_currentSnapshot->snapshotId;
         m_savedSnapshotMap.set(key, WTF::move(m_currentSnapshot));
     }
     m_currentSnapshot = WTF::move(snapshot);
 
     if (!m_currentSnapshot->snapshotId)
         return;
 
     ASSERT(m_targetElement);
     m_currentSnapshot->effectiveStyle = createStyleSnapshot(*m_targetElement);
-
+    m_currentSnapshot->subtree = createSubtreeSnapshot(*m_targetElement);
     // Send the committed non-empty snapshot to the inspector frontend.
     int nodeId = m_domAgent->pushNodePathToFrontend(m_targetElement.get());
     ASSERT(nodeId); // This should get an already assigned id, or bind the node and get a new one.
 
     double elapsedTime = m_instrumentingAgents->inspectorEnvironment().executionStopwatch()->elapsedTime();
 
     auto snapshotObject = Inspector::Protocol::DOMTracing::ElementSnapshot::create()
         .setNodeId(nodeId)
         .setSnapshotId(m_currentSnapshot->snapshotId)
         .setBoundingBox(createProtocolObjectForFloatRect(FloatRect(m_currentSnapshot->boundingBox)))
diff --git a/Source/WebCore/inspector/InspectorDOMTracingAgent.h b/Source/WebCore/inspector/InspectorDOMTracingAgent.h
index 07000b4e..b3a5145 100644
--- a/Source/WebCore/inspector/InspectorDOMTracingAgent.h
+++ b/Source/WebCore/inspector/InspectorDOMTracingAgent.h
@@ -50,23 +50,31 @@ namespace Inspector {
 
 struct TraceOperation;
 
 struct StyleSnapshot {
     StyleSnapshot(RefPtr<Inspector::Protocol::DOMTracing::EffectiveStyle>&&);
     ~StyleSnapshot() { }
 
     RefPtr<Inspector::Protocol::DOMTracing::EffectiveStyle> encodedData;
 };
 
+struct SubtreeSnapshot {
+    SubtreeSnapshot(RefPtr<Inspector::Protocol::DOMTracing::DOMTreeSnapshot>&&);
+    ~SubtreeSnapshot() { }
+
+    RefPtr<Inspector::Protocol::DOMTracing::DOMTreeSnapshot> encodedData;
+};
+
 struct ElementSnapshot {
     std::unique_ptr<WebCore::ImageBuffer> imageData;
     std::unique_ptr<StyleSnapshot> effectiveStyle;
+    std::unique_ptr<SubtreeSnapshot> subtree;
     WebCore::LayoutRect boundingBox;
     uint64_t snapshotId {0};
 
     bool isEmpty() const { return !imageData || boundingBox.isEmpty(); }
 
     ElementSnapshot();
     ~ElementSnapshot();
     ElementSnapshot(std::unique_ptr<WebCore::ImageBuffer>, const WebCore::LayoutRect& bounds, uint64_t snapshotId);
 };
 
@@ -100,20 +108,21 @@ public:
 
     bool setTargetElement(WebCore::Element*);
 private:
     void commitSnapshot(std::unique_ptr<ElementSnapshot>);
     void elementAppearanceChanged();
     void pushOperationToFrontend(const Inspector::TraceOperation&);
 
     // Use this rather than manually constructing ElementSnapshot to avoid reentrancy issues.
     std::unique_ptr<ElementSnapshot> createSnapshot(WebCore::Element&);
     std::unique_ptr<StyleSnapshot> createStyleSnapshot(WebCore::Element&);
+    std::unique_ptr<SubtreeSnapshot> createSubtreeSnapshot(WebCore::Element&);
 
     std::unique_ptr<DOMTracingFrontendDispatcher> m_frontendDispatcher;
     RefPtr<DOMTracingBackendDispatcher> m_backendDispatcher;
 
     WebCore::InspectorDOMAgent* m_domAgent {nullptr};
     WebCore::InspectorCSSAgent* m_cssAgent {nullptr};
 
     HashMap<uint64_t, std::unique_ptr<ElementSnapshot>> m_savedSnapshotMap;
     uint64_t m_nextSnapshotId {1};
 
diff --git a/Source/WebInspectorUI/UserInterface/Main.html b/Source/WebInspectorUI/UserInterface/Main.html
index cd1dc5d..6cae89a 100644
--- a/Source/WebInspectorUI/UserInterface/Main.html
+++ b/Source/WebInspectorUI/UserInterface/Main.html
@@ -233,24 +233,26 @@
     <script src="Models/CSSSelector.js"></script>
     <script src="Models/CSSStyleDeclaration.js"></script>
     <script src="Models/CSSStyleSheet.js"></script>
     <script src="Models/CallFrame.js"></script>
     <script src="Models/CollectionEntry.js"></script>
     <script src="Models/CollectionEntryPreview.js"></script>
     <script src="Models/Color.js"></script>
     <script src="Models/ContentFlow.js"></script>
     <script src="Models/CookieStorageObject.js"></script>
     <script src="Models/DOMNode.js"></script>
+    <script src="Models/DOMNodeSnapshot.js"></script>
     <script src="Models/DOMNodeStyles.js"></script>
     <script src="Models/DOMSearchMatchObject.js"></script>
     <script src="Models/DOMStorageObject.js"></script>
     <script src="Models/DOMTree.js"></script>
+    <script src="Models/DOMTreeSnapshot.js"></script>
     <script src="Models/DatabaseObject.js"></script>
     <script src="Models/DatabaseTableObject.js"></script>
     <script src="Models/DebuggerDashboard.js"></script>
     <script src="Models/DefaultDashboard.js"></script>
     <script src="Models/EffectiveStyleSnapshot.js"></script>
     <script src="Models/ElementSnapshot.js"></script>
     <script src="Models/ElementSnapshotDiff.js"></script>
     <script src="Models/ElementTrackingTimeline.js"></script>
     <script src="Models/ElementTrackingTimelineRecord.js"></script>
     <script src="Models/ExecutionContext.js"></script>
diff --git a/Source/WebInspectorUI/UserInterface/Models/DOMNodeSnapshot.js b/Source/WebInspectorUI/UserInterface/Models/DOMNodeSnapshot.js
new file mode 100644
index 0000000..2bad348c
--- /dev/null
+++ b/Source/WebInspectorUI/UserInterface/Models/DOMNodeSnapshot.js
@@ -0,0 +1,139 @@
+/*
+ * Copyright (C) 2015 University of Washington.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
+ * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
+ * THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+// This class acts as a static data source for DOM node data. It can be used in
+// place of WebInspector.DOMTree. It does not update node data as it
+// changes on the page, nor does it support editing or incremental fetching.
+
+WebInspector.DOMNodeSnapshot = function(type, name, value, childOrdinals, attributeMap)
+{
+    this._nodesToResolve = childOrdinals || [];
+    this._attributeMap = attributeMap;
+
+    this._nodeType = type;
+    this._nodeName = name;
+    this._nodeValue = value;
+}
+
+WebInspector.DOMNodeSnapshot.fromPayload = function(payload)
+{
+    var attributeList = payload.attributes || [];
+    console.assert(attributeList.length % 2 === 0, "Attribute list for node snapshot must have even number of entries.");
+
+    var attributeMap = attributeList.length ? {} : null;
+    for (var i = 0; i < attributeList.length; i += 2)
+        attributeMap[attributeList[i]] = attributeList[i + 1];
+
+    return new WebInspector.DOMNodeSnapshot(payload.nodeType, payload.nodeName, payload.nodeValue, payload.children, attributeMap)
+}
+
+WebInspector.DOMNodeSnapshot.prototype = {
+    constructor: WebInspector.DOMNodeSnapshot,
+    __proto__: WebInspector.Object.prototype,
+
+    // Public
+
+    get children()
+    {
+        if (!this._children)
+            return null;
+
+        return this._children.slice();
+    },
+
+    get parentNode()
+    {
+        return this._parentNode || null;
+    },
+
+    get firstChild()
+    {
+        if (this._children && this._children.length)
+            return this._children[0];
+
+        return null;
+    },
+
+    get lastChild()
+    {
+        if (this._children && this._children.length)
+            return this._children.lastValue;
+
+        return null;
+    },
+
+    get nextSibling()
+    {
+        return this._nextSibling || null;
+    },
+
+    get previousSibling()
+    {
+        return this._previousSibling || null;
+    },
+
+    get childNodeCount()
+    {
+        return this._children ? this._children.length : 0;
+    },
+
+    // Protected
+
+    resolveChildren: function(nodeList)
+    {
+        console.assert(this._nodesToResolve, "Already resolved nodes.");
+        if (!this._nodesToResolve)
+            return;
+
+        if (this._nodesToResolve.length) {
+            this._children = [];
+            for (var childOrdinal of this._nodesToResolve) {
+                var isValidIndex = childOrdinal === Number.constrain(childOrdinal, 0, nodeList.length - 1);
+                console.assert(isValidIndex, "Invalid node ordinal is out of range. ", childOrdinal);
+                if (!isValidIndex)
+                    return;
+
+                this._children.push(nodeList[childOrdinal]);
+            }
+        }
+
+        delete this._nodesToResolve;
+        this.linkChildren();
+    },
+
+    linkChildren: function()
+    {
+        if (!this._children)
+            return;
+
+        var childCount = this._children.length;
+        for (var i = 0; i < childCount; ++i) {
+            var child = this._children[i];
+            child._nextSibling = i + 1 < childCount ? this._children[i + 1] : null;
+            child._previousSibling = i - 1 >= 0 ? this._children[i - 1] : null;
+            child._parentNode = this;
+        }
+    }
+}
diff --git a/Source/WebInspectorUI/UserInterface/Models/DOMTreeSnapshot.js b/Source/WebInspectorUI/UserInterface/Models/DOMTreeSnapshot.js
new file mode 100644
index 0000000..66bf591
--- /dev/null
+++ b/Source/WebInspectorUI/UserInterface/Models/DOMTreeSnapshot.js
@@ -0,0 +1,52 @@
+/*
+ * Copyright (C) 2015 University of Washington.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
+ * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
+ * THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+// This class acts as a static data source for DOM node data. It can be used in
+// place of WebInspector.DOMTree. It does not update node data as it
+// changes on the page, nor does it support editing or incremental fetching.
+
+WebInspector.DOMTreeSnapshot = function(rootNode)
+{
+    this._rootNode = rootNode;
+}
+
+WebInspector.DOMTreeSnapshot.fromPayload = function(payload)
+{
+    var nodeList = payload.nodes.map(WebInspector.DOMNodeSnapshot.fromPayload);
+    for (var node of nodeList)
+        node.resolveChildren(nodeList);
+
+    return new WebInspector.DOMTreeSnapshot(nodeList[0]);
+}
+
+WebInspector.DOMTreeSnapshot.prototype = {
+    constructor: WebInspector.DOMTreeSnapshot,
+    __proto__: WebInspector.Object.prototype,
+
+    get rootNode()
+    {
+        return this._rootNode;
+    }
+}
diff --git a/Source/WebInspectorUI/UserInterface/Models/ElementSnapshot.js b/Source/WebInspectorUI/UserInterface/Models/ElementSnapshot.js
index dea24484..48fdc09 100644
--- a/Source/WebInspectorUI/UserInterface/Models/ElementSnapshot.js
+++ b/Source/WebInspectorUI/UserInterface/Models/ElementSnapshot.js
@@ -65,22 +65,23 @@ WebInspector.ElementSnapshotHeader.prototype = {
     {
         // Do nothing, since snapshots are not saved across reloads or reopens.
     }
 }
 
 WebInspector.ElementSnapshot = function(header, payload)
 {
     console.assert(header instanceof WebInspector.ElementSnapshotHeader);
 
     this._header = header;
-    this._imageData = decodeBase64ToBlob(payload.imageData.encodedData, payload.imageData.mimeTpe);
+    this._imageData = decodeBase64ToBlob(payload.imageData.encodedData, payload.imageData.mimeType);
     this._effectiveStyle = WebInspector.EffectiveStyleSnapshot.fromPayload(payload.styleData);
+    this._treeSnapshot = WebInspector.DOMTreeSnapshot.fromPayload(payload.subtreeData);
 }
 
 WebInspector.ElementSnapshot.prototype = {
     constructor: WebInspector.ElementSnapshot,
     __proto__: WebInspector.Object.prototype,
 
     get displayName()
     {
         return this._header.displayName;
     },
@@ -103,12 +104,17 @@ WebInspector.ElementSnapshot.prototype = {
     // This returns an object URL handle that should be revoked when no longer needed.
     createObjectURLForImage: function()
     {
         console.assert(this._imageData instanceof Blob, this._imageData);
         return URL.createObjectURL(this._imageData);
     },
 
     get effectiveStyle()
     {
         return this._effectiveStyle;
+    },
+
+    get treeSnapshot()
+    {
+        return this._treeSnapshot;
     }
 }
-- 
2.3.2

