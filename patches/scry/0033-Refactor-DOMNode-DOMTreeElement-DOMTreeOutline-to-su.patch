From 1571f1e50a7cafb69931c018638b5547c94228b1 Mon Sep 17 00:00:00 2001
From: "Brian J. Burg" <burg@cs.washington.edu>
Date: Fri, 20 Mar 2015 14:08:28 -0700
Subject: [PATCH] Refactor DOMNode, DOMTreeElement, DOMTreeOutline to support
 node snapshots better.

---
 .../WebInspectorUI/UserInterface/Models/DOMNode.js | 10 ++++++
 .../UserInterface/Views/DOMTreeElement.js          | 35 ++++++++++----------
 .../UserInterface/Views/DOMTreeOutline.js          | 38 ++++++++++++++++++----
 3 files changed, 59 insertions(+), 24 deletions(-)

diff --git a/Source/WebInspectorUI/UserInterface/Models/DOMNode.js b/Source/WebInspectorUI/UserInterface/Models/DOMNode.js
index 3057f9a..2ac7119 100644
--- a/Source/WebInspectorUI/UserInterface/Models/DOMNode.js
+++ b/Source/WebInspectorUI/UserInterface/Models/DOMNode.js
@@ -211,20 +211,30 @@ WebInspector.DOMNode = class DOMNode extends WebInspector.Object
     hasShadowRoots()
     {
         return !!this._shadowRoots.length;
     }
 
     isInShadowTree()
     {
         return this._isInShadowTree;
     }
 
+    isEditable()
+    {
+        return !this.isInShadowTree();
+    }
+
+    isTrackable()
+    {
+        return !this.isInShadowTree() && this.nodeType() === Node.ELEMENT_NODE;
+    }
+
     nodeType()
     {
         return this._nodeType;
     }
 
     nodeName()
     {
         return this._nodeName;
     }
 
diff --git a/Source/WebInspectorUI/UserInterface/Views/DOMTreeElement.js b/Source/WebInspectorUI/UserInterface/Views/DOMTreeElement.js
index c099001..9af0481 100644
--- a/Source/WebInspectorUI/UserInterface/Views/DOMTreeElement.js
+++ b/Source/WebInspectorUI/UserInterface/Views/DOMTreeElement.js
@@ -29,21 +29,21 @@
  */
 
 WebInspector.DOMTreeElement = function(node, elementCloseTag)
 {
     this._elementCloseTag = elementCloseTag;
     var hasChildrenOverride = !elementCloseTag && node.hasChildNodes() && !this._showInlineText(node);
 
     // The title will be updated in onattach.
     TreeElement.call(this, "", node, hasChildrenOverride);
 
-    if (this.representedObject.nodeType() === Node.ELEMENT_NODE && !elementCloseTag)
+    if (node.isEditable() && node.nodeType() === Node.ELEMENT_NODE && !elementCloseTag)
         this._canAddAttributes = true;
     this._searchQuery = null;
     this._expandedChildrenLimit = WebInspector.DOMTreeElement.InitialChildrenLimit;
 };
 
 WebInspector.DOMTreeElement.InitialChildrenLimit = 500;
 WebInspector.DOMTreeElement.MaximumInlineTextChildLength = 80;
 
 // A union of HTML4 and HTML5-Draft elements that explicitly
 // or implicitly (for HTML5) forbid the closing tag.
@@ -160,26 +160,24 @@ WebInspector.DOMTreeElement.prototype = {
     },
 
     set hovered(x)
     {
         if (this._hovered === x)
             return;
 
         this._hovered = x;
 
         if (this.listItemElement) {
-            if (x) {
+            if (x)
                 this.updateSelection();
-                this.listItemElement.classList.add("hovered");
-            } else {
-                this.listItemElement.classList.remove("hovered");
-            }
+
+            this.listItemElement.classList.toggle("hovered", x);
         }
     },
 
     get expandedChildrenLimit()
     {
         return this._expandedChildrenLimit;
     },
 
     set expandedChildrenLimit(x)
     {
@@ -280,21 +278,21 @@ WebInspector.DOMTreeElement.prototype = {
     },
 
     onattach: function()
     {
         if (this._hovered) {
             this.updateSelection();
             this.listItemElement.classList.add("hovered");
         }
 
         this.updateTitle();
-        this.listItemElement.draggable = true;
+        this.listItemElement.draggable = this.representedObject.isEditable();
         this.listItemElement.addEventListener("dragstart", this);
     },
 
     onpopulate: function()
     {
         if (this.children.length || this._showInlineText(this.representedObject) || this._elementCloseTag)
             return;
 
         this.updateChildren();
     },
@@ -495,33 +493,33 @@ WebInspector.DOMTreeElement.prototype = {
             else
                 this.listItemElement.scrollIntoViewIfNeeded(false);
         }
     },
 
     onselect: function(treeElement, selectedByUser)
     {
         this.treeOutline.suppressRevealAndSelect = true;
         this.treeOutline.selectDOMNode(this.representedObject, selectedByUser);
         if (selectedByUser)
-            WebInspector.domTreeManager.highlightDOMNode(this.representedObject.id);
+            this.treeOutline.delegate.showHighlightForNode(this.representedObject);
         this.updateSelection();
         this.treeOutline.suppressRevealAndSelect = false;
     },
 
     ondeselect: function(treeElement)
     {
         this.treeOutline.selectDOMNode(null);
     },
 
     ondelete: function()
     {
-        if (this.representedObject.isInShadowTree())
+        if (!this.representedObject.isEditable())
             return false;
 
         var startTagTreeElement = this.treeOutline.findTreeElement(this.representedObject);
         if (startTagTreeElement)
             startTagTreeElement.remove();
         else
             this.remove();
         return true;
     },
 
@@ -575,21 +573,21 @@ WebInspector.DOMTreeElement.prototype = {
         }
 
         this.updateSelection();
     },
 
     _startEditingTarget: function(eventTarget)
     {
         if (this.treeOutline.selectedDOMNode() !== this.representedObject)
             return false;
 
-        if (this.representedObject.isInShadowTree())
+        if (!this.representedObject.isEditable())
             return false;
 
         if (this.representedObject.nodeType() !== Node.ELEMENT_NODE && this.representedObject.nodeType() !== Node.TEXT_NODE)
             return false;
 
         var textNode = eventTarget.enclosingNodeOrSelfWithClass("html-text-node");
         if (textNode)
             return this._startEditingTextNode(textNode);
 
         var attribute = eventTarget.enclosingNodeOrSelfWithClass("html-attribute");
@@ -603,21 +601,21 @@ WebInspector.DOMTreeElement.prototype = {
         var newAttribute = eventTarget.enclosingNodeOrSelfWithClass("add-attribute");
         if (newAttribute)
             return this._addNewAttribute();
 
         return false;
     },
 
     _populateTagContextMenu: function(contextMenu, event)
     {
         var node = this.representedObject;
-        if (!node.isInShadowTree()) {
+        if (node.isEditable()) {
             var attribute = event.target.enclosingNodeOrSelfWithClass("html-attribute");
             var newAttribute = event.target.enclosingNodeOrSelfWithClass("add-attribute");
 
             // Add attribute-related actions.
             contextMenu.appendItem(WebInspector.UIString("Add Attribute"), this._addNewAttribute.bind(this));
             if (attribute && !newAttribute)
                 contextMenu.appendItem(WebInspector.UIString("Edit Attribute"), this._startEditingAttribute.bind(this, attribute, event.target));
             contextMenu.appendSeparator();
 
             if (WebInspector.cssStyleManager.canForcePseudoClasses()) {
@@ -641,59 +639,60 @@ WebInspector.DOMTreeElement.prototype = {
             var enabled = enabledPseudoClasses.contains(pseudoClass);
             subMenu.appendCheckboxItem(label, function() {
                 node.setPseudoClassEnabled(pseudoClass, !enabled);
             }, enabled, false);
         });
     },
 
     _populateTextContextMenu: function(contextMenu, textNode)
     {
         var node = this.representedObject;
-        if (!node.isInShadowTree())
+        if (node.isEditable())
             contextMenu.appendItem(WebInspector.UIString("Edit Text"), this._startEditingTextNode.bind(this, textNode));
 
         this._populateNodeContextMenu(contextMenu);
     },
 
     _populateNodeContextMenu: function(contextMenu)
     {
         // Add free-form node-related actions.
         var node = this.representedObject;
-        if (!node.isInShadowTree())
+        if (node.isEditable())
             contextMenu.appendItem(WebInspector.UIString("Edit as HTML"), this._editAsHTML.bind(this));
-        contextMenu.appendItem(WebInspector.UIString("Copy as HTML"), this._copyHTML.bind(this));
-        if (!node.isInShadowTree())
+        if (typeof node.copyNode === "function")
+            contextMenu.appendItem(WebInspector.UIString("Copy as HTML"), this._copyHTML.bind(this));
+        if (node.isEditable())
             contextMenu.appendItem(WebInspector.UIString("Delete Node"), this.remove.bind(this));
 
         var node = this.representedObject;
-        if (node.nodeType() === Node.ELEMENT_NODE && WebInspector.domTracingManager.targetElement !== node) {
+        if (node.isTrackable() && WebInspector.domTracingManager.targetElement !== node) {
             function startTrackingElement(element) {
                 WebInspector.domTracingManager.startTrackingElement(element)
                 .then(function() {
                     var recording = WebInspector.timelineManager.activeRecording;
                     var timeline = recording && recording.timelines.get(WebInspector.TimelineRecord.Type.ElementTracking);
                     if (timeline) {
                         WebInspector.timelineSidebarPanel.showTimelineViewForTimeline(timeline);
                         WebInspector.timelineSidebarPanel.show();
                     }
                 });
             }
-        }
             contextMenu.appendItem(WebInspector.UIString("Track Element"), startTrackingElement.bind(null, node));
+        }
     },
 
     _startEditing: function()
     {
         if (this.treeOutline.selectedDOMNode() !== this.representedObject)
             return false;
 
-        if (this.representedObject.isInShadowTree())
+        if (!this.representedObject.isEditable())
             return false;
 
         var listItem = this._listItemNode;
 
         if (this._canAddAttributes) {
             var attribute = listItem.getElementsByClassName("html-attribute")[0];
             if (attribute)
                 return this._startEditingAttribute(attribute, attribute.getElementsByClassName("html-attribute-value")[0]);
 
             return this._addNewAttribute();
diff --git a/Source/WebInspectorUI/UserInterface/Views/DOMTreeOutline.js b/Source/WebInspectorUI/UserInterface/Views/DOMTreeOutline.js
index 885f784..a261e02 100644
--- a/Source/WebInspectorUI/UserInterface/Views/DOMTreeOutline.js
+++ b/Source/WebInspectorUI/UserInterface/Views/DOMTreeOutline.js
@@ -21,40 +21,40 @@
  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
-WebInspector.DOMTreeOutline = function(omitRootDOMNode, selectEnabled, showInElementsPanelEnabled)
+WebInspector.DOMTreeOutline = function(omitRootDOMNode, selectEnabled, revealInDOMTreeEnabled)
 {
     this.element = document.createElement("ol");
     this.element.addEventListener("mousedown", this._onmousedown.bind(this), false);
     this.element.addEventListener("mousemove", this._onmousemove.bind(this), false);
     this.element.addEventListener("mouseout", this._onmouseout.bind(this), false);
     this.element.addEventListener("dragstart", this._ondragstart.bind(this), false);
     this.element.addEventListener("dragover", this._ondragover.bind(this), false);
     this.element.addEventListener("dragleave", this._ondragleave.bind(this), false);
     this.element.addEventListener("drop", this._ondrop.bind(this), false);
     this.element.addEventListener("dragend", this._ondragend.bind(this), false);
 
     this.element.classList.add(WebInspector.DOMTreeOutline.StyleClassName);
     this.element.classList.add(WebInspector.SyntaxHighlightedStyleClassName);
 
     TreeOutline.call(this, this.element);
 
     this._includeRootDOMNode = !omitRootDOMNode;
     this._selectEnabled = selectEnabled;
-    this._showInElementsPanelEnabled = showInElementsPanelEnabled;
+    this._revealInDOMTreeEnabled = revealInDOMTreeEnabled;
     this._rootDOMNode = null;
     this._selectedDOMNode = null;
     this._eventSupport = new WebInspector.Object();
     this._editing = false;
 
     this._visible = false;
 
     this.element.addEventListener("contextmenu", this._contextMenuEventFired.bind(this), true);
 
     this._hideElementKeyboardShortcut = new WebInspector.KeyboardShortcut(null, "H", this._hideElement.bind(this), this.element);
@@ -65,20 +65,33 @@ WebInspector.DOMTreeOutline = function(omitRootDOMNode, selectEnabled, showInEle
 
 // FIXME: Move to a WebInspector.Object subclass and we can remove this.
 WebInspector.Object.deprecatedAddConstructorFunctions(WebInspector.DOMTreeOutline);
 
 WebInspector.DOMTreeOutline.StyleClassName = "dom-tree-outline";
 
 WebInspector.DOMTreeOutline.Event = {
     SelectedNodeChanged: "dom-tree-outline-selected-node-changed"
 };
 
+WebInspector.DOMTreeOutline.DefaultDelegate = {
+    showHighlightForNode: function(node)
+    {
+        console.assert(node instanceof WebInspector.DOMNode, node);
+        WebInspector.domTreeManager.highlightDOMNode(node.id);
+    },
+
+    hideNodeHighlight: function()
+    {
+        WebInspector.domTreeManager.hideDOMNodeHighlight();
+    },
+};
+
 WebInspector.DOMTreeOutline.prototype = {
     constructor: WebInspector.DOMTreeOutline,
 
     wireToDomAgent: function()
     {
         this._elementsTreeUpdater = new WebInspector.DOMTreeUpdater(this);
     },
 
     close: function()
     {
@@ -102,20 +115,30 @@ WebInspector.DOMTreeOutline.prototype = {
     addEventListener: function(eventType, listener, thisObject)
     {
         this._eventSupport.addEventListener(eventType, listener, thisObject);
     },
 
     removeEventListener: function(eventType, listener, thisObject)
     {
         this._eventSupport.removeEventListener(eventType, listener, thisObject);
     },
 
+    get delegate()
+    {
+        return this._delegate || WebInspector.DOMTreeOutline.DefaultDelegate;
+    },
+
+    set delegate(value)
+    {
+        this._delegate = value;
+    },
+
     get rootDOMNode()
     {
         return this._rootDOMNode;
     },
 
     set rootDOMNode(x)
     {
         if (this._rootDOMNode === x)
             return;
 
@@ -307,54 +330,57 @@ WebInspector.DOMTreeOutline.prototype = {
 
         if (element) {
             element.hovered = true;
             this._previousHoveredElement = element;
 
             // Lazily compute tag-specific tooltips.
             if (element.representedObject && !element.tooltip && element._createTooltipForNode)
                 element._createTooltipForNode();
         }
 
-        WebInspector.domTreeManager.highlightDOMNode(element ? element.representedObject.id : 0);
+        if (element && typeof this.delegate.showHighlightForNode === "function")
+            this.delegate.showHighlightForNode(element.representedObject);
     },
 
     _onmouseout: function(event)
     {
         var nodeUnderMouse = document.elementFromPoint(event.pageX, event.pageY);
         if (nodeUnderMouse && nodeUnderMouse.isDescendant(this.element))
             return;
 
         if (this._previousHoveredElement) {
             this._previousHoveredElement.hovered = false;
             delete this._previousHoveredElement;
         }
 
-        WebInspector.domTreeManager.hideDOMNodeHighlight();
+        if (typeof this.delegate.hideNodeHighlight === "function")
+            this.delegate.hideNodeHighlight();
     },
 
     _ondragstart: function(event)
     {
         var treeElement = this._treeElementFromEvent(event);
         if (!treeElement)
             return false;
 
         if (!this._isValidDragSourceOrTarget(treeElement))
             return false;
 
         if (treeElement.representedObject.nodeName() === "BODY" || treeElement.representedObject.nodeName() === "HEAD")
             return false;
 
         event.dataTransfer.setData("text/plain", treeElement.listItemElement.textContent);
         event.dataTransfer.effectAllowed = "copyMove";
         this._nodeBeingDragged = treeElement.representedObject;
 
-        WebInspector.domTreeManager.hideDOMNodeHighlight();
+        if (typeof this.delegate.hideNodeHighlight === "function")
+            this.delegate.hideNodeHighlight();
 
         return true;
     },
 
     _ondragover: function(event)
     {
         if (!this._nodeBeingDragged)
             return false;
 
         var treeElement = this._treeElementFromEvent(event);
@@ -490,21 +516,21 @@ WebInspector.DOMTreeOutline.prototype = {
     },
 
     _updateModifiedNodes: function()
     {
         if (this._elementsTreeUpdater)
             this._elementsTreeUpdater._updateModifiedNodes();
     },
 
     _populateContextMenu: function(contextMenu, domNode)
     {
-        if (!this._showInElementsPanelEnabled)
+        if (!this._revealInDOMTreeEnabled)
             return;
 
         function revealElement()
         {
             WebInspector.domTreeManager.inspectElement(domNode.id);
         }
 
         contextMenu.appendSeparator();
         contextMenu.appendItem(WebInspector.UIString("Reveal in DOM Tree"), revealElement);
     },
-- 
2.3.2

