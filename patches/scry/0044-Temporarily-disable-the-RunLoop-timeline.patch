From 2cc9586962fc98db02ff79882bde381dcbb50594 Mon Sep 17 00:00:00 2001
From: "Brian J. Burg" <burg@cs.washington.edu>
Date: Sun, 12 Apr 2015 13:10:34 -0700
Subject: [PATCH] Temporarily disable the RunLoop timeline.

---
 Source/WebInspectorUI/UserInterface/Controllers/TimelineManager.js | 3 ++-
 Source/WebInspectorUI/UserInterface/Models/TimelineRecording.js    | 3 ++-
 2 files changed, 4 insertions(+), 2 deletions(-)

diff --git a/Source/WebInspectorUI/UserInterface/Controllers/TimelineManager.js b/Source/WebInspectorUI/UserInterface/Controllers/TimelineManager.js
index ed77ca4..1314bc6 100644
--- a/Source/WebInspectorUI/UserInterface/Controllers/TimelineManager.js
+++ b/Source/WebInspectorUI/UserInterface/Controllers/TimelineManager.js
@@ -462,21 +462,22 @@ WebInspector.TimelineManager.prototype = {
     },
 
     _loadNewRecording: function()
     {
         if (this._activeRecording && this._activeRecording.isEmpty())
             return;
 
         var identifier = this._nextRecordingIdentifier++;
         var newRecording = new WebInspector.TimelineRecording(identifier, WebInspector.UIString("Timeline Recording %d").format(identifier));
         newRecording.addTimeline(WebInspector.Timeline.create(WebInspector.TimelineRecord.Type.Network, newRecording));
-        newRecording.addTimeline(WebInspector.Timeline.create(WebInspector.TimelineRecord.Type.RunLoop, newRecording));
+        // XXX: hack to remove RunLoop timeline for now.
+        //newRecording.addTimeline(WebInspector.Timeline.create(WebInspector.TimelineRecord.Type.RunLoop, newRecording));
         newRecording.addTimeline(WebInspector.Timeline.create(WebInspector.TimelineRecord.Type.Layout, newRecording));
         newRecording.addTimeline(WebInspector.Timeline.create(WebInspector.TimelineRecord.Type.Script, newRecording));
 
         this._recordings.push(newRecording);
         this.dispatchEventToListeners(WebInspector.TimelineManager.Event.RecordingCreated, {recording: newRecording});
 
         console.assert(newRecording.isWritable());
 
         if (this._isCapturing)
             this.stopCapturing();
diff --git a/Source/WebInspectorUI/UserInterface/Models/TimelineRecording.js b/Source/WebInspectorUI/UserInterface/Models/TimelineRecording.js
index 297c272..30130d4 100644
--- a/Source/WebInspectorUI/UserInterface/Models/TimelineRecording.js
+++ b/Source/WebInspectorUI/UserInterface/Models/TimelineRecording.js
@@ -147,21 +147,22 @@ WebInspector.TimelineRecording = class TimelineRecording extends WebInspector.Ob
     }
 
     addEventMarker(eventMarker)
     {
         this._eventMarkers.push(eventMarker);
     }
 
     addRecord(record)
     {
         var hasCorrespondingTimeline = this._timelines.has(record.type);
-        console.assert(hasCorrespondingTimeline, record, this._timelines);
+        // XXX: hack to disable RunLoop timeline for now.
+        //console.assert(hasCorrespondingTimeline, record, this._timelines);
         if (!hasCorrespondingTimeline)
             return;
 
         // Add the record to the global timeline by type.
         this._timelines.get(record.type).addRecord(record);
 
         // Network records don't have source code timelines.
         if (record.type === WebInspector.TimelineRecord.Type.Network)
             return;
 
-- 
2.3.2

