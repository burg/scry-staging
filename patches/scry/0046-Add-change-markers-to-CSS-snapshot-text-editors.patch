From 1f3eeabf637df2454b5e6b32c1478836af916e3b Mon Sep 17 00:00:00 2001
From: "Brian J. Burg" <burg@cs.washington.edu>
Date: Sun, 12 Apr 2015 18:09:05 -0700
Subject: [PATCH] Add change markers to CSS snapshot text editors.

---
 .../Views/CSSStyleDeclarationTextEditor.js         | 68 +++++++++++++++++-----
 .../Views/ElementSnapshotDiffContentView.js        |  8 +++
 .../Views/ElementSnapshotStyleContentView.css      | 52 +++++++++++++++++
 .../Views/ElementSnapshotStyleContentView.js       | 52 ++++++++++++++++-
 4 files changed, 162 insertions(+), 18 deletions(-)

diff --git a/Source/WebInspectorUI/UserInterface/Views/CSSStyleDeclarationTextEditor.js b/Source/WebInspectorUI/UserInterface/Views/CSSStyleDeclarationTextEditor.js
index 703c95b..b009d1e 100644
--- a/Source/WebInspectorUI/UserInterface/Views/CSSStyleDeclarationTextEditor.js
+++ b/Source/WebInspectorUI/UserInterface/Views/CSSStyleDeclarationTextEditor.js
@@ -450,20 +450,26 @@ WebInspector.CSSStyleDeclarationTextEditor = class CSSStyleDeclarationTextEditor
             classNames.push("not-inherited");
 
         if (!property.valid && property.hasOtherVendorNameOrKeyword())
             classNames.push("other-vendor");
         else if (!property.valid)
             classNames.push("invalid");
 
         if (!property.enabled)
             classNames.push("disabled");
 
+        if (this._delegate && typeof this._delegate.styleDeclarationTextEditorCustomHighlightClass === "function") {
+            var highlightClass = this._delegate.styleDeclarationTextEditorCustomHighlightClass(this, property);
+            if (highlightClass)
+                classNames.push(highlightClass);
+        }
+
         var classNamesString = classNames.join(" ");
 
         // If there is already a text marker and it's in the same document, then try to avoid recreating it.
         // FIXME: If there are multiple CSSStyleDeclarationTextEditors for the same style then this will cause
         // both editors to fight and always recreate their text markers. This isn't really common.
         if (property.__propertyTextMarker && property.__propertyTextMarker.doc.cm === this._codeMirror && property.__propertyTextMarker.find()) {
             // If the class name is the same then we don't need to make a new marker.
             if (property.__propertyTextMarker.className === classNamesString)
                 return;
 
@@ -940,71 +946,101 @@ WebInspector.CSSStyleDeclarationTextEditor = class CSSStyleDeclarationTextEditor
         this._clearTextMarkers(false, true);
 
         this._ignoreCodeMirrorContentDidChangeEvent = true;
         this._codeMirror.operation(update.bind(this));
         delete this._ignoreCodeMirrorContentDidChangeEvent;
     }
 
     _updateJumpToSymbolTrackingMode()
     {
         var oldJumpToSymbolTrackingModeEnabled = this._jumpToSymbolTrackingModeEnabled;
+        var enableForJumpingToCustomHighlights = false;
 
-        if (!this._style || !this._style.ownerRule || !this._style.ownerRule.sourceCodeLocation)
+        // Force token tracking to always be on when showing a style snapshot instead of live data.
+        // This allows the delegate to get a notification when the custom highlight is clicked.
+        if (this._style && this._delegate && typeof this._delegate.styleDeclarationTextEditorCustomHighlightsAreClickable === "function" && this._delegate.styleDeclarationTextEditorCustomHighlightsAreClickable())
+            this._jumpToSymbolTrackingModeEnabled = enableForJumpingToCustomHighlights = true;
+        else if (!this._style || !this._style.ownerRule || !this._style.ownerRule.sourceCodeLocation)
             this._jumpToSymbolTrackingModeEnabled = false;
         else
             this._jumpToSymbolTrackingModeEnabled = WebInspector.modifierKeys.altKey && !WebInspector.modifierKeys.metaKey && !WebInspector.modifierKeys.shiftKey;
 
         if (oldJumpToSymbolTrackingModeEnabled !== this._jumpToSymbolTrackingModeEnabled) {
             if (this._jumpToSymbolTrackingModeEnabled) {
                 this._tokenTrackingController.highlightLastHoveredRange();
-                this._tokenTrackingController.enabled = !this._codeMirror.getOption("readOnly");
+                this._tokenTrackingController.enabled = enableForJumpingToCustomHighlights || !this._codeMirror.getOption("readOnly");
             } else {
                 this._tokenTrackingController.removeHighlightedRange();
                 this._tokenTrackingController.enabled = false;
             }
         }
     }
 
+    _propertyForTokenTrackingControllerCandidate()
+    {
+        var marks = this._codeMirror.findMarksAt(this._tokenTrackingController.candidate.hoveredTokenRange.start);
+        for (var mark of marks) {
+            var property = mark.__cssProperty;
+            if (property)
+                return property;
+        }
+        return null;
+    }
+
     tokenTrackingControllerHighlightedRangeWasClicked(tokenTrackingController)
     {
-        console.assert(this._style.ownerRule.sourceCodeLocation);
-        if (!this._style.ownerRule.sourceCodeLocation)
+        // Special case clicking a custom highlight.
+        if (this._delegate && typeof this._delegate.styleDeclarationTextEditorCustomHighlightClicked === "function") {
+            var property = this._propertyForTokenTrackingControllerCandidate();
+            if (property)
+                this._delegate.styleDeclarationTextEditorCustomHighlightClicked(this, property);
+            return;
+        }
+
+        var sourceCodeLocation = this._style.ownerRule.sourceCodeLocation;
+        console.assert(sourceCodeLocation);
+        if (!sourceCodeLocation)
             return;
 
         // Special case command clicking url(...) links.
         var token = this._tokenTrackingController.candidate.hoveredToken;
         if (/\blink\b/.test(token.type)) {
             var url = token.string;
-            var baseURL = this._style.ownerRule.sourceCodeLocation.sourceCode.url;
+            var baseURL = sourceCodeLocation.sourceCode.url;
             WebInspector.openURL(absoluteURL(url, baseURL));
             return;
         }
 
-        // Jump to the rule if we can't find a property.
         // Find a better source code location from the property that was clicked.
-        var sourceCodeLocation = this._style.ownerRule.sourceCodeLocation;
-        var marks = this._codeMirror.findMarksAt(this._tokenTrackingController.candidate.hoveredTokenRange.start);
-        for (var i = 0; i < marks.length; ++i) {
-            var mark = marks[i];
-            var property = mark.__cssProperty;
-            if (property) {
-                var sourceCode = sourceCodeLocation.sourceCode;
-                var styleSheetTextRange = property.styleSheetTextRange;
-                sourceCodeLocation = sourceCode.createSourceCodeLocation(styleSheetTextRange.startLine, styleSheetTextRange.startColumn);
-            }
+        // Jump to the rule if we can't find the property.
+        var hoveredProperty = this._propertyForTokenTrackingControllerCandidate();
+        if (hoveredProperty) {
+            var sourceCode = sourceCodeLocation.sourceCode;
+            var styleSheetTextRange = hoveredProperty.styleSheetTextRange;
+            sourceCodeLocation = sourceCode.createSourceCodeLocation(styleSheetTextRange.startLine, styleSheetTextRange.startColumn);
         }
 
         WebInspector.resourceSidebarPanel.showSourceCodeLocation(sourceCodeLocation);
     }
 
     tokenTrackingControllerNewHighlightCandidate(tokenTrackingController, candidate)
     {
+        var property = this._propertyForTokenTrackingControllerCandidate();
+        if (!property)
+            return;
+
+        if (this._delegate && typeof this._delegate.styleDeclarationTextEditorCustomHighlightClass === "function") {
+            var className = this._delegate.styleDeclarationTextEditorCustomHighlightClass(this, property);
+            if (!className)
+                return;
+        }
+
         this._tokenTrackingController.highlightRange(candidate.hoveredTokenRange);
     }
 };
 
 WebInspector.CSSStyleDeclarationTextEditor.StyleClassName = "css-style-text-editor";
 WebInspector.CSSStyleDeclarationTextEditor.ReadOnlyStyleClassName = "read-only";
 WebInspector.CSSStyleDeclarationTextEditor.ColorSwatchElementStyleClassName = "color-swatch";
 WebInspector.CSSStyleDeclarationTextEditor.CheckboxPlaceholderElementStyleClassName = "checkbox-placeholder";
 WebInspector.CSSStyleDeclarationTextEditor.EditingLineStyleClassName = "editing-line";
 WebInspector.CSSStyleDeclarationTextEditor.CommitCoalesceDelay = 250;
diff --git a/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotDiffContentView.js b/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotDiffContentView.js
index 6e91255..d9571ee 100644
--- a/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotDiffContentView.js
+++ b/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotDiffContentView.js
@@ -73,20 +73,23 @@ WebInspector.ElementSnapshotDiffContentView = function(snapshotDiff)
     this.element.appendChild(this._rightWidthResizer.element);
 
     var displayName = WebInspector.UIString("View Changes (Snapshots %dâ€“%d)").format(this._preState.ordinal, this._postState.ordinal);
     this._pathComponent = new WebInspector.HierarchicalPathComponent(displayName, WebInspector.ElementSnapshotDiffContentView.IconStyleClassName, this, false, false);
 
     this.element.classList.add(WebInspector.ElementSnapshotDiffContentView.StyleClassName);
 
     this._preStateDOMTreeContentView.addEventListener(WebInspector.ElementSnapshotDOMTreeContentView.Event.SelectedNodeChanged, this._selectedNodeChanged, this);
     this._postStateDOMTreeContentView.addEventListener(WebInspector.ElementSnapshotDOMTreeContentView.Event.SelectedNodeChanged, this._selectedNodeChanged, this);
 
+    this._preStateStyleContentView.addEventListener(WebInspector.ElementSnapshotStyleContentView.Event.ChangeMarkerSelected, this._changeMarkerSelected, this);
+    this._postStateStyleContentView.addEventListener(WebInspector.ElementSnapshotStyleContentView.Event.ChangeMarkerSelected, this._changeMarkerSelected, this);
+
     this._repositionHeightResizer(0.5);
     this._repositionWidthResizers(0.3, 0.7);
 };
 
 WebInspector.ElementSnapshotDiffContentView.IconStyleClassName = "snapshot-diff-icon";
 WebInspector.ElementSnapshotDiffContentView.StyleClassName = "element-snapshot-diff";
 
 WebInspector.ElementSnapshotDiffContentView.prototype = {
     constructor: WebInspector.ElementSnapshotDiffContentView,
     __proto__: WebInspector.ContentView.prototype,
@@ -222,11 +225,16 @@ WebInspector.ElementSnapshotDiffContentView.prototype = {
         this._postStateDOMTreeContentView.selectNode(postStateNodeSnapshot, true);
 
         var changeSummary = this._snapshotDiff.changeSummaryForNode(selectedNodeSnapshot.id);
         console.log(changeSummary);
         this._preStateDOMTreeContentView.updateChangeMarkers(changeSummary.nodeChanges.filter(WebInspector.NodeChangeSummary.changeIsRelevantToPreState));
         this._postStateDOMTreeContentView.updateChangeMarkers(changeSummary.nodeChanges.filter(WebInspector.NodeChangeSummary.changeIsRelevantToPostState));
 
         this._preStateStyleContentView.updateChangeMarkers(changeSummary.styleChanges.filter(WebInspector.NodeChangeSummary.changeIsRelevantToPreState));
         this._postStateStyleContentView.updateChangeMarkers(changeSummary.styleChanges.filter(WebInspector.NodeChangeSummary.changeIsRelevantToPostState));
     },
+
+    _changeMarkerSelected: function(event)
+    {
+        console.log("Change marker selected: ", event.data.node, event.data.change, event.target.representedObject);
+    }
 };
diff --git a/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotStyleContentView.css b/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotStyleContentView.css
index 9746074..4342b6d 100644
--- a/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotStyleContentView.css
+++ b/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotStyleContentView.css
@@ -18,10 +18,62 @@
  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  * THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 .content-view.element-snapshot-style {
 }
+
+.content-view.element-snapshot-style .css-style-text-editor > .CodeMirror .CodeMirror-lines .css-style-declaration-property.css-property-changed {
+    /* unfocused background color */
+    background-color: rgb(234, 222, 255);
+    /* unfocused foreground color */
+    /* rgb(199, 167, 255); */
+    /* focused foreground color */
+    /* rgb(151, 107, 231); */
+}
+
+.content-view.element-snapshot-style .css-style-text-editor > .CodeMirror .CodeMirror-lines pre:hover .css-style-declaration-property.css-property-changed {
+    /* focused background color */
+    background-color: rgb(193, 179, 239);
+    /* focused foreground color */
+    /* rgb(151, 107, 231); */
+}
+
+.content-view.element-snapshot-style .css-style-text-editor > .CodeMirror .CodeMirror-lines .css-style-declaration-property.css-property-added {
+    /* unfocused background color */
+    background-color: rgb(218, 255, 216);
+    /* focused foreground color */
+    /* rgb(87, 186, 79); */
+}
+
+.content-view.element-snapshot-style .css-style-text-editor > .CodeMirror .CodeMirror-lines pre:hover .css-style-declaration-property.css-property-added {
+    /* focused background color */
+    background-color: rgb(154, 230, 149);
+}
+
+.content-view.element-snapshot-style .css-style-text-editor > .CodeMirror .CodeMirror-lines .css-style-declaration-property.css-property-removed {
+    /* unfocused background color */
+    background-color: rgb(254, 232, 232);
+    /* focused background color */
+    /* rgb(238, 196, 196); */
+
+    /* focused foreground color */
+    /* rgb(232, 78, 81); */
+}
+
+.content-view.element-snapshot-style .css-style-text-editor > .CodeMirror .CodeMirror-lines .css-style-declaration-property.css-property-removed {
+    /* unfocused background color */
+    background-color: rgb(254, 232, 232);
+    /* focused background color */
+    /* rgb(238, 196, 196); */
+
+    /* focused foreground color */
+    /* rgb(232, 78, 81); */
+}
+
+.content-view.element-snapshot-style .css-style-text-editor > .CodeMirror .CodeMirror-lines .css-style-declaration-property:matches(.css-property-changed, .css-property-added, .css-property-removed) {
+    cursor: pointer;
+}
diff --git a/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotStyleContentView.js b/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotStyleContentView.js
index 5dde6ef..b796f66 100644
--- a/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotStyleContentView.js
+++ b/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotStyleContentView.js
@@ -23,20 +23,23 @@
  * THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 WebInspector.ElementSnapshotStyleContentView = function(snapshot)
 {
     console.assert(snapshot instanceof WebInspector.ElementSnapshot, snapshot);
     WebInspector.ContentView.call(this, snapshot);
 
     this.element.classList.add(WebInspector.ElementSnapshotStyleContentView.StyleClassName);
 
+    this._nodeSnapshot = null;
+    this._cachedStyleChangeMap = new Map;
+
     this._matchedPropertiesTextEditor = new WebInspector.CSSStyleDeclarationTextEditor(this, null);
     this._matchedPropertiesTextEditor.showsImplicitProperties = false;
     this._matchedPropertiesTextEditor.sortProperties = true;
 
     this._inheritedPropertiesTextEditor = new WebInspector.CSSStyleDeclarationTextEditor(this, null);
     this._inheritedPropertiesTextEditor.showsImplicitProperties = false;
     this._inheritedPropertiesTextEditor.sortProperties = true;
 
     this._animatedPropertiesTextEditor = new WebInspector.CSSStyleDeclarationTextEditor(this, null);
     this._animatedPropertiesTextEditor.showsImplicitProperties = false;
@@ -51,20 +54,24 @@ WebInspector.ElementSnapshotStyleContentView = function(snapshot)
 
     this._matchedPropertiesSection = createSingletonSection(this._matchedPropertiesTextEditor.element, "effective-style-matched-properties", WebInspector.UIString("Matched Properties"));
     this._inheritedPropertiesSection = createSingletonSection(this._inheritedPropertiesTextEditor.element, "effective-style-inherited-properties", WebInspector.UIString("Inherited Properties"));
     this._animatedPropertiesSection = createSingletonSection(this._animatedPropertiesTextEditor.element, "effective-style-animated-properties", WebInspector.UIString("Animated Properties"));
 
     this.element.appendChild(this._animatedPropertiesSection.element);
     this.element.appendChild(this._matchedPropertiesSection.element);
     this.element.appendChild(this._inheritedPropertiesSection.element);
 };
 
+WebInspector.ElementSnapshotStyleContentView.Event = {
+    ChangeMarkerSelected: Symbol("change-marker-selected"),
+}
+
 WebInspector.ElementSnapshotStyleContentView.StyleClassName = "element-snapshot-style";
 
 WebInspector.ElementSnapshotStyleContentView.prototype = {
     constructor: WebInspector.ElementSnapshotStyleContentView,
     __proto__: WebInspector.ContentView.prototype,
 
     shown: function()
     {
         WebInspector.ContentView.prototype.shown.call(this);
 
@@ -73,20 +80,22 @@ WebInspector.ElementSnapshotStyleContentView.prototype = {
 
     updateLayout: function()
     {
         this._matchedPropertiesTextEditor.updateLayout();
         this._inheritedPropertiesTextEditor.updateLayout();
         this._animatedPropertiesTextEditor.updateLayout();
     },
 
     showStyleForNode: function(nodeSnapshot)
     {
+        this._nodeSnapshot = nodeSnapshot;
+
         var canShowStyle = nodeSnapshot && nodeSnapshot.effectiveStyle;
         if (canShowStyle) {
             this._matchedPropertiesTextEditor.style = nodeSnapshot.effectiveStyle.matchedPropertiesDeclaration;
             this._inheritedPropertiesTextEditor.style = nodeSnapshot.effectiveStyle.inheritedPropertiesDeclaration;
             this._animatedPropertiesTextEditor.style = nodeSnapshot.effectiveStyle.animatedPropertiesDeclaration;
         } else {
             this._matchedPropertiesTextEditor.style = null;
             this._inheritedPropertiesTextEditor.style = null;
             this._animatedPropertiesTextEditor.style = null;
         }
@@ -98,15 +107,54 @@ WebInspector.ElementSnapshotStyleContentView.prototype = {
         // Don't hide all property sections; we want "No Properties" to appear at least once for text nodes.
         this._matchedPropertiesSection.element.classList.toggle("hidden", !hasMatchedProperties && (hasInheritedProperties || hasAnimatedProperties));
         this._inheritedPropertiesSection.element.classList.toggle("hidden", !hasInheritedProperties);
         this._animatedPropertiesSection.element.classList.toggle("hidden", !hasAnimatedProperties);
 
         this.updateLayout();
     },
 
     updateChangeMarkers: function(styleChanges)
     {
-        console.log("updating style change markers:", styleChanges);
-        //                                              
+        this._cachedStyleChangeMap.clear();
+        for (var change of styleChanges)
+            this._cachedStyleChangeMap.set(change.key, change);
+
+        this._matchedPropertiesTextEditor.refresh();
+        this._inheritedPropertiesTextEditor.refresh();
+        this._animatedPropertiesTextEditor.refresh();
+    },
+
+    // Protected
+
+    styleDeclarationTextEditorCustomHighlightsAreClickable: function(textEditor)
+    {
+        return true;
     },
 
+    styleDeclarationTextEditorCustomHighlightClass: function(textEditor, property)
+    {
+        function classNameForChange(change) {
+            if (change.type === WebInspector.NodeChangeSummary.ChangeTypes.PropertyAdded)
+                return "css-property-added";
+            else if (change.type === WebInspector.NodeChangeSummary.ChangeTypes.PropertyRemoved)
+                return "css-property-removed";
+            else if (change.type === WebInspector.NodeChangeSummary.ChangeTypes.PropertyChanged)
+                return "css-property-changed";
+
+            console.error("Unknown change type.", change);
+        }
+
+        console.assert(property instanceof WebInspector.CSSProperty, property);
+        if (this._cachedStyleChangeMap.has(property.name))
+            return classNameForChange(this._cachedStyleChangeMap.get(property.name));
+        return null;
+    },
+
+    styleDeclarationTextEditorCustomHighlightClicked: function(textEditor, property)
+    {
+        if (!this._cachedStyleChangeMap.has(property.name))
+            return;
+
+        var data = {node: this._nodeSnapshot, change: this._cachedStyleChangeMap.get(property.name)};
+        this.dispatchEventToListeners(WebInspector.ElementSnapshotStyleContentView.Event.ChangeMarkerSelected, data);
+    },
 };
-- 
2.3.5

