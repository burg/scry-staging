From 759f17189debc15dc69e2f4b7a9641e073c0e8b5 Mon Sep 17 00:00:00 2001
From: "Brian J. Burg" <burg@cs.washington.edu>
Date: Sun, 12 Apr 2015 14:02:20 -0700
Subject: [PATCH] Compute per-node change summaries. Add updateChangeMarker
 stubs to UI classes.

---
 .../WebInspectorUI/UserInterface/Base/Utilities.js |  46 ++++++
 .../UserInterface/Models/DOMNodeSnapshot.js        |   8 ++
 .../UserInterface/Models/EffectiveStyleSnapshot.js |   5 +
 .../UserInterface/Models/ElementSnapshotDiff.js    | 154 ++++++++++++++++++++-
 .../Views/ElementSnapshotDOMTreeContentView.js     |  10 +-
 .../Views/ElementSnapshotDiffContentView.js        |   8 ++
 .../Views/ElementSnapshotStyleContentView.js       |   9 +-
 7 files changed, 236 insertions(+), 4 deletions(-)

diff --git a/Source/WebInspectorUI/UserInterface/Base/Utilities.js b/Source/WebInspectorUI/UserInterface/Base/Utilities.js
index 537838a..b0966d8 100644
--- a/Source/WebInspectorUI/UserInterface/Base/Utilities.js
+++ b/Source/WebInspectorUI/UserInterface/Base/Utilities.js
@@ -93,20 +93,66 @@ Object.defineProperty(Object.prototype, "valueForCaseInsensitiveKey",
 Object.defineProperty(Map.prototype, "take",
 {
     value: function(key)
     {
         var deletedValue = this.get(key);
         this.delete(key);
         return deletedValue;
     }
 });
 
+// Computes {this} \ {other}
+Object.defineProperty(Set.prototype, "difference",
+{
+    value: function(other)
+    {
+        console.assert(other instanceof Set);
+        var result = new Set;
+        for (var key of this) {
+            if (!other.has(key))
+                result.add(key);
+        }
+        return result;
+    }
+});
+
+// Computes {this} U {other}
+Object.defineProperty(Set.prototype, "union",
+{
+    value: function(other)
+    {
+        console.assert(other instanceof Set);
+
+        var result = new Set(this);
+        for (var key of other)
+            result.add(key);
+
+        return result;
+    }
+});
+
+// Computes {this} X {other}
+Object.defineProperty(Set.prototype, "intersection",
+{
+    value: function(other)
+    {
+        console.assert(other instanceof Set);
+
+        var result = new Set;
+        for (var key of this) {
+            if (other.has(key))
+                result.add(key);
+        }
+        return result;
+    }
+});
+
 Object.defineProperty(Node.prototype, "enclosingNodeOrSelfWithClass",
 {
     value: function(className)
     {
         for (var node = this; node && node !== this.ownerDocument; node = node.parentNode)
             if (node.nodeType === Node.ELEMENT_NODE && node.classList.contains(className))
                 return node;
         return null;
     }
 });
diff --git a/Source/WebInspectorUI/UserInterface/Models/DOMNodeSnapshot.js b/Source/WebInspectorUI/UserInterface/Models/DOMNodeSnapshot.js
index 64c64b3..73fa224 100644
--- a/Source/WebInspectorUI/UserInterface/Models/DOMNodeSnapshot.js
+++ b/Source/WebInspectorUI/UserInterface/Models/DOMNodeSnapshot.js
@@ -90,20 +90,25 @@ WebInspector.DOMNodeSnapshot = class DOMNodeSnapshot extends WebInspector.Object
     get nextSibling()
     {
         return this._nextSibling || null;
     }
 
     get previousSibling()
     {
         return this._previousSibling || null;
     }
 
+    get ordinalAmongSiblings()
+    {
+        return this._ordinal || 0;
+    }
+
     get childNodeCount()
     {
         return this._children ? this._children.length : 0;
     }
 
     nodeType()
     {
         return this._nodeType;
     }
 
@@ -167,20 +172,22 @@ WebInspector.DOMNodeSnapshot = class DOMNodeSnapshot extends WebInspector.Object
     hasChildNodes() { return this.childNodeCount > 0; }
     hasShadowRoots() { return false; }
     hasAttributes() { return !!this._attributeMap; }
     nodeNameInCorrectCase() { return this.nodeName().toLowerCase(); }
     getSubtree(depth, callback) { setTimeout(callback, 0); }
     getChildNodes(callback) { setTimeout(callback, 0); }
     get enabledPseudoClasses() { return []; }
 
     // Protected
 
+    get attributeMap() { return this._attributeMap || new Map; }
+
     set effectiveStyle(value)
     {
         this._effectiveStyle = value;
     }
 
     resolveChildren(nodeList)
     {
         console.assert(this._nodesToResolve, "Already resolved nodes.");
         if (!this._nodesToResolve)
             return;
@@ -202,16 +209,17 @@ WebInspector.DOMNodeSnapshot = class DOMNodeSnapshot extends WebInspector.Object
     }
 
     linkChildren()
     {
         if (!this._children)
             return;
 
         var childCount = this._children.length;
         for (var i = 0; i < childCount; ++i) {
             var child = this._children[i];
+            child._ordinal = i;
             child._nextSibling = i + 1 < childCount ? this._children[i + 1] : null;
             child._previousSibling = i - 1 >= 0 ? this._children[i - 1] : null;
             child._parentNode = this;
         }
     }
 };
diff --git a/Source/WebInspectorUI/UserInterface/Models/EffectiveStyleSnapshot.js b/Source/WebInspectorUI/UserInterface/Models/EffectiveStyleSnapshot.js
index f5551d6..5a5415c 100644
--- a/Source/WebInspectorUI/UserInterface/Models/EffectiveStyleSnapshot.js
+++ b/Source/WebInspectorUI/UserInterface/Models/EffectiveStyleSnapshot.js
@@ -41,20 +41,25 @@ WebInspector.EffectiveStyleSnapshot = class EffectiveStyleSnapshot extends WebIn
         this._inlineStyles = inlineStyles;
     }
 
     // Public
 
     get element()
     {
         return this._element;
     }
 
+    get allProperties()
+    {
+        return [].concat(this.matchedProperties, this.inheritedProperties, this.animatedProperties);
+    }
+
     get matchedProperties()
     {
         return this._matchedProperties.slice();
     }
 
     get inheritedProperties()
     {
         return this._inheritedProperties.slice();
     }
 
diff --git a/Source/WebInspectorUI/UserInterface/Models/ElementSnapshotDiff.js b/Source/WebInspectorUI/UserInterface/Models/ElementSnapshotDiff.js
index e644e8b..1ed0b6e 100644
--- a/Source/WebInspectorUI/UserInterface/Models/ElementSnapshotDiff.js
+++ b/Source/WebInspectorUI/UserInterface/Models/ElementSnapshotDiff.js
@@ -16,25 +16,177 @@
  * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
  * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  * THE POSSIBILITY OF SUCH DAMAGE.
  */
 
-WebInspector.ElementSnapshotDiff = class ElementSnapshotDiff extends WebInspector.Object
+WebInspector.NodeChangeSummary = class NodeChangeSummary extends WebInspector.Object
 {
+    constructor(nodeId, nodeChanges, styleChanges)
+    {
+        super();
+
+        this.nodeId = nodeId;
+        this.nodeChanges = nodeChanges;
+        this.styleChanges = styleChanges;
+    }
+
+    static changeIsRelevantToPreState(change)
+    {
+        var changeType = change.type;
+        if (changeType === WebInspector.NodeChangeSummary.ChangeTypes.AttributeRemoved ||
+            changeType === WebInspector.NodeChangeSummary.ChangeTypes.AttributeChanged ||
+            changeType === WebInspector.NodeChangeSummary.ChangeTypes.NodeRemoved ||
+            changeType === WebInspector.NodeChangeSummary.ChangeTypes.TextChanged ||
+            changeType === WebInspector.NodeChangeSummary.ChangeTypes.ParentChanged ||
+            changeType === WebInspector.NodeChangeSummary.ChangeTypes.OrdinalChanged ||
+            changeType === WebInspector.NodeChangeSummary.ChangeTypes.PropertyRemoved ||
+            changeType === WebInspector.NodeChangeSummary.ChangeTypes.PropertyChanged)
+            return true;
+
+        return false;
+    }
+
+    static changeIsRelevantToPostState(change)
+    {
+        var changeType = change.type;
+        if (changeType === WebInspector.NodeChangeSummary.ChangeTypes.AttributeAdded ||
+            changeType === WebInspector.NodeChangeSummary.ChangeTypes.AttributeChanged ||
+            changeType === WebInspector.NodeChangeSummary.ChangeTypes.NodeAdded ||
+            changeType === WebInspector.NodeChangeSummary.ChangeTypes.TextChanged ||
+            changeType === WebInspector.NodeChangeSummary.ChangeTypes.ParentChanged ||
+            changeType === WebInspector.NodeChangeSummary.ChangeTypes.OrdinalChanged ||
+            changeType === WebInspector.NodeChangeSummary.ChangeTypes.PropertyAdded ||
+            changeType === WebInspector.NodeChangeSummary.ChangeTypes.PropertyChanged)
+            return true;
+
+        return false;
+    }
+};
+
+WebInspector.NodeChangeSummary.ChangeTypes = {
+    AttributeAdded: Symbol("attribute-added"),
+    AttributeRemoved: Symbol("attribute-removed"),
+    AttributeChanged: Symbol("attribute-changed"),
 
+    NodeAdded: Symbol("node-added"),
+    NodeRemoved: Symbol("node-removed"),
+    ParentChanged: Symbol("parent-changed"),
+    OrdinalChanged: Symbol("ordinal-changed"),
+    TextChanged: Symbol("text-changed"),
+
+    PropertyAdded: Symbol("property-added"),
+    PropertyRemoved: Symbol("property-removed"),
+    PropertyChanged: Symbol("property-changed"),
+};
+
+WebInspector.ElementSnapshotDiff = class ElementSnapshotDiff extends WebInspector.Object
+{
     constructor(preState, postState)
     {
         super();
 
         console.assert(preState instanceof WebInspector.ElementSnapshot, preState);
         console.assert(postState instanceof WebInspector.ElementSnapshot, postState);
         console.assert(preState !== postState, "Cannot diff a snapshot with itself.");
 
         this.preState = preState;
         this.postState = postState;
     }
+
+    changeSummaryForNode(nodeId)
+    {
+        function createPropertyMap(effectiveStyle) {
+            var result = new Map;
+            var properties = effectiveStyle.allProperties;
+            for (var property of properties)
+                result.set(property.name, property);
+
+            return result;
+        }
+
+        var nodeChanges = [];
+        var styleChanges = [];
+
+        var preNode = this.preState.treeSnapshot.findNode(nodeId);
+        var postNode = this.postState.treeSnapshot.findNode(nodeId);
+        console.assert(preNode || postNode);
+        if (preNode && !postNode) {
+            nodeChanges.push({type: WebInspector.NodeChangeSummary.ChangeTypes.NodeRemoved});
+            for (var key of preNode.attributeMap.keys())
+                nodeChanges.push({type: WebInspector.NodeChangeSummary.ChangeTypes.AttributeRemoved, key: key});
+
+            if (preNode.nodeType() === Node.ELEMENT_NODE) {
+                var properties = createPropertyMap(preNode.effectiveStyle);
+                for (var key of properties.keys())
+                    styleChanges.push({type: WebInspector.NodeChangeSummary.ChangeTypes.PropertyRemoved, key: key});
+            }
+        } else if (!preNode && postNode) {
+            nodeChanges.push({type: WebInspector.NodeChangeSummary.ChangeTypes.NodeAdded});
+            for (var key of postNode.attributeMap.keys())
+                nodeChanges.push({type: WebInspector.NodeChangeSummary.ChangeTypes.AttributeAdded, key: key});
+
+            if (postNode.nodeType() === Node.ELEMENT_NODE) {
+                var properties = createPropertyMap(postNode.effectiveStyle);
+                for (var key of properties.keys())
+                    styleChanges.push({type: WebInspector.NodeChangeSummary.ChangeTypes.PropertyAdded, key: key});
+            }
+        } else {
+            console.assert(preNode.nodeType === postNode.nodeType, [preNode, postNode]);
+            console.assert(preNode.nodeName === postNode.nodeName, [preNode, postNode]);
+
+            // Text Content
+            if (preNode.nodeType === Node.TEXT_NODE && preNode.nodeValue !== postNode.nodeValue)
+                nodeChanges.push({type: WebInspector.NodeChangeSummary.ChangeTypes.TextChanged});
+
+            // Node Movement
+            if (preNode.ordinalAmongSiblings !== postNode.ordinalAmongSiblings)
+                nodeChanges.push({type: WebInspector.NodeChangeSummary.ChangeTypes.OrdinalChanged});
+
+            var preParent = preNode.parentNode ? preNode.parentNode.id : 0;
+            var postParent = postNode.parentNode ? postNode.parentNode.id : 0;
+            if (preParent !== postParent)
+                nodeChanges.push({type: WebInspector.NodeChangeSummary.ChangeTypes.ParentChanged});
+
+            // Attributes
+            var preAttributes = new Set(preNode.attributeMap.keys());
+            var postAttributes = new Set(postNode.attributeMap.keys());
+            var commonAttributes = preAttributes.intersection(postAttributes);
+            for (var key of commonAttributes) {
+                if (preNode.getAttribute(key) !== postNode.getAttribute(key))
+                    nodeChanges.push({type: WebInspector.NodeChangeSummary.ChangeTypes.AttributeChanged, key: key});
+            }
+
+            for (var key of preAttributes.difference(commonAttributes))
+                nodeChanges.push({type: WebInspector.NodeChangeSummary.ChangeTypes.AttributeRemoved, key: key});
+
+            for (var key of postAttributes.difference(commonAttributes))
+                nodeChanges.push({type: WebInspector.NodeChangeSummary.ChangeTypes.AttributeAdded, key: key});
+
+            if (postNode.nodeType() === Node.ELEMENT_NODE) {
+                // Styles
+                var preProperties = createPropertyMap(preNode.effectiveStyle);
+                var prePropertyNames = new Set(preProperties.keys());
+                var postProperties = createPropertyMap(postNode.effectiveStyle);
+                var postPropertyNames = new Set(postProperties.keys());
+                var commonProperties = prePropertyNames.intersection(postPropertyNames);
+
+                for (var key of commonProperties) {
+                    if (preProperties.get(key).value !== postProperties.get(key).value)
+                        styleChanges.push({type: WebInspector.NodeChangeSummary.ChangeTypes.PropertyChanged, key: key});
+                }
+
+                for (var key of prePropertyNames.difference(commonProperties))
+                    styleChanges.push({type: WebInspector.NodeChangeSummary.ChangeTypes.PropertyRemoved, key: key});
+
+                for (var key of postPropertyNames.difference(commonProperties))
+                    styleChanges.push({type: WebInspector.NodeChangeSummary.ChangeTypes.PropertyAdded, key: key});
+            }
+        }
+
+        return new WebInspector.NodeChangeSummary(nodeId, nodeChanges, styleChanges);
+    }
 };
diff --git a/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotDOMTreeContentView.js b/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotDOMTreeContentView.js
index 9113aaa..6fca424 100644
--- a/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotDOMTreeContentView.js
+++ b/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotDOMTreeContentView.js
@@ -32,25 +32,25 @@ WebInspector.ElementSnapshotDOMTreeContentView = function(snapshot)
 
     var options = [
         false, // omitRootDOMNode
         true, // selectEnabled
         false, // revealInDOMTreeEnabled
     ];
     this._domTreeOutline = new WebInspector.DOMTreeOutline(...options);
     this._domTreeOutline.addEventListener(WebInspector.DOMTreeOutline.Event.SelectedNodeChanged, this._selectedNodeDidChange, this);
 
     function showHighlightForNode(node) {
-        console.log("highlighting node", node);
+        //console.log("highlighting node", node);
     }
 
     function hideNodeHighlight() {
-        console.log("hiding highlight");
+        //console.log("hiding highlight");
     }
 
     this._domTreeOutline.delegate = { showHighlightForNode, hideNodeHighlight };
     this.element.appendChild(this._domTreeOutline.element);
 
     this._domTreeOutline.rootDOMNode = snapshot.treeSnapshot.rootNode;
     // Expand the tree a bit so it's not so empty.
     this._domTreeOutline.children[0].expandRecursively(-1);
 
     // Select the root tree element after giving a chance for the parent content view to add listeners.
@@ -144,20 +144,26 @@ WebInspector.ElementSnapshotDOMTreeContentView.prototype = {
 
         var options = [
             true, // omitFocus
             false, // selectedByUser
             true, // suppressOnSelect
             false, // suppressOnDeselect
         ];
         treeElement.revealAndSelect(...options);
     },
 
+    updateChangeMarkers: function(nodeChanges)
+    {
+        console.log("updating dom tree change markers:", nodeChanges);
+        //                                              
+    },
+
     // Private
 
     _pathComponentSelected: function(event)
     {
         console.assert(event.data.pathComponent instanceof WebInspector.DOMTreeElementPathComponent);
         console.assert(event.data.pathComponent.domTreeElement instanceof WebInspector.DOMTreeElement);
 
         this._domTreeOutline.selectDOMNode(event.data.pathComponent.domTreeElement.representedObject, true);
     },
 
diff --git a/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotDiffContentView.js b/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotDiffContentView.js
index 2f09a3b..6e91255 100644
--- a/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotDiffContentView.js
+++ b/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotDiffContentView.js
@@ -213,12 +213,20 @@ WebInspector.ElementSnapshotDiffContentView.prototype = {
         }
 
         this._preStateStyleContentView.showStyleForNode(preStateNodeSnapshot);
         this._postStateStyleContentView.showStyleForNode(postStateNodeSnapshot);
 
         if (!selectedNodeSnapshot)
             return;
 
         this._preStateDOMTreeContentView.selectNode(preStateNodeSnapshot, true);
         this._postStateDOMTreeContentView.selectNode(postStateNodeSnapshot, true);
+
+        var changeSummary = this._snapshotDiff.changeSummaryForNode(selectedNodeSnapshot.id);
+        console.log(changeSummary);
+        this._preStateDOMTreeContentView.updateChangeMarkers(changeSummary.nodeChanges.filter(WebInspector.NodeChangeSummary.changeIsRelevantToPreState));
+        this._postStateDOMTreeContentView.updateChangeMarkers(changeSummary.nodeChanges.filter(WebInspector.NodeChangeSummary.changeIsRelevantToPostState));
+
+        this._preStateStyleContentView.updateChangeMarkers(changeSummary.styleChanges.filter(WebInspector.NodeChangeSummary.changeIsRelevantToPreState));
+        this._postStateStyleContentView.updateChangeMarkers(changeSummary.styleChanges.filter(WebInspector.NodeChangeSummary.changeIsRelevantToPostState));
     },
 };
diff --git a/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotStyleContentView.js b/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotStyleContentView.js
index 5f65b20..5dde6ef 100644
--- a/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotStyleContentView.js
+++ b/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotStyleContentView.js
@@ -94,12 +94,19 @@ WebInspector.ElementSnapshotStyleContentView.prototype = {
         var hasMatchedProperties = !!this._matchedPropertiesTextEditor.style;
         var hasInheritedProperties = !!this._inheritedPropertiesTextEditor.style;
         var hasAnimatedProperties = !!this._animatedPropertiesTextEditor.style;
 
         // Don't hide all property sections; we want "No Properties" to appear at least once for text nodes.
         this._matchedPropertiesSection.element.classList.toggle("hidden", !hasMatchedProperties && (hasInheritedProperties || hasAnimatedProperties));
         this._inheritedPropertiesSection.element.classList.toggle("hidden", !hasInheritedProperties);
         this._animatedPropertiesSection.element.classList.toggle("hidden", !hasAnimatedProperties);
 
         this.updateLayout();
-    }
+    },
+
+    updateChangeMarkers: function(styleChanges)
+    {
+        console.log("updating style change markers:", styleChanges);
+        //                                              
+    },
+
 };
-- 
2.3.2

