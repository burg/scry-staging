From 23b1dc6746b4a54259191a32643ade0db5b4dd79 Mon Sep 17 00:00:00 2001
From: "Brian J. Burg" <burg@cs.washington.edu>
Date: Mon, 13 Apr 2015 14:40:33 -0700
Subject: [PATCH] WIP: hook up other diff views.

---
 .../UserInterface/Controllers/DOMTracingManager.js |  11 +-
 Source/WebInspectorUI/UserInterface/Main.html      |   3 +
 .../UserInterface/Models/ElementSnapshotDiff.js    |  47 ++++-
 .../TraceOperation.js}                             |  38 ++--
 .../Views/ElementSnapshotDiffContentView.js        |  36 ++--
 .../Views/ElementSnapshotOperationPreviewView.js   |   9 +-
 .../Views/ElementSnapshotOperationTraceView.js     |  57 +++++-
 .../UserInterface/Views/OperationDataGrid.js       | 200 +++++++++++++++++++++
 ...tionPreviewView.js => OperationDataGridNode.js} |  49 +++--
 9 files changed, 380 insertions(+), 70 deletions(-)
 copy Source/WebInspectorUI/UserInterface/{Views/ElementSnapshotOperationPreviewView.js => Models/TraceOperation.js} (56%)
 create mode 100644 Source/WebInspectorUI/UserInterface/Views/OperationDataGrid.js
 copy Source/WebInspectorUI/UserInterface/Views/{ElementSnapshotOperationPreviewView.js => OperationDataGridNode.js} (50%)

diff --git a/Source/WebInspectorUI/UserInterface/Controllers/DOMTracingManager.js b/Source/WebInspectorUI/UserInterface/Controllers/DOMTracingManager.js
index ce19893..2d38b8f 100644
--- a/Source/WebInspectorUI/UserInterface/Controllers/DOMTracingManager.js
+++ b/Source/WebInspectorUI/UserInterface/Controllers/DOMTracingManager.js
@@ -23,20 +23,21 @@
  * THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 WebInspector.DOMTracingManager = function()
 {
     // FIXME: Convert this to a WebInspector.Object subclass, and call super().
     // WebInspector.Object.call(this);
 
     this._snapshotHeaderMap = new Map;
     this._targetNode = null;
+    this._activeTimeline = null;
 
     // This maps from key "prestate.snapshotId:poststate.snapshotId" to a promise
     // that resolves to an ElementSnapshotDiff instance for the states.
     this._snapshotDiffPromises = new Map;
 
     WebInspector.TimelineManager.addEventListener(WebInspector.TimelineManager.Event.CapturingStopped, this._timelineCapturingStopped, this);
 };
 
 WebInspector.DOMTracingManager.prototype = {
     constructor: WebInspector.DOMTracingManager,
@@ -47,22 +48,24 @@ WebInspector.DOMTracingManager.prototype = {
     startTrackingElement: function(node)
     {
         this._targetNode = node;
 
         var result = Promise.resolve();
         if (!WebInspector.timelineManager.isCapturing())
             result = WebInspector.timelineManager.startCapturing();
 
         var recording = WebInspector.timelineManager.activeRecording;
         var timelineType = WebInspector.TimelineRecord.Type.ElementTracking
-        if (!recording.timelines.has(timelineType))
-            recording.addTimeline(WebInspector.Timeline.create(timelineType));
+        if (!recording.timelines.has(timelineType)) {
+            this._activeTimeline = WebInspector.Timeline.create(timelineType);
+            recording.addTimeline(this._activeTimeline);
+        }
 
         result = result.then(function() {
             DOMTracingAgent.startTrackingElement(node.id);
         });
         return result;
     },
 
     stopTracking: function()
     {
         console.assert(this._targetNode, "Tried to clear target element, but none was set.");
@@ -86,22 +89,22 @@ WebInspector.DOMTracingManager.prototype = {
         var [prestate, poststate] = [first, second];
         if (first.ordinal > second.ordinal)
             [prestate, poststate] = [second, first];
 
         var key = "%d:%d".format(prestate.snapshotId, poststate.snapshotId);
         if (this._snapshotDiffPromises.has(key))
             return this._snapshotDiffPromises.get(key);
 
         var result = Promise.all([prestate.fetchData(), poststate.fetchData()])
             .then(function([prestateData, poststateData]) {
-                return new WebInspector.ElementSnapshotDiff(prestateData, poststateData);
-            });
+                return new WebInspector.ElementSnapshotDiff(prestateData, poststateData, this._activeTimeline);
+            }.bind(this));
 
         this._snapshotDiffPromises.set(key, result);
         return result;
     },
 
     // Protected - Called by DOMTracingObserver
 
     snapshotCreated: function(snapshotPayload)
     {
         var header = new WebInspector.ElementSnapshotHeader(snapshotPayload);
diff --git a/Source/WebInspectorUI/UserInterface/Main.html b/Source/WebInspectorUI/UserInterface/Main.html
index 5abd2d4..ec44bd8 100644
--- a/Source/WebInspectorUI/UserInterface/Main.html
+++ b/Source/WebInspectorUI/UserInterface/Main.html
@@ -299,20 +299,21 @@
     <script src="Models/SourceCodeRevision.js"></script>
     <script src="Models/SourceCodeSearchMatchObject.js"></script>
     <script src="Models/SourceCodeTextRange.js"></script>
     <script src="Models/SourceCodeTimeline.js"></script>
     <script src="Models/SourceMap.js"></script>
     <script src="Models/SourceMapResource.js"></script>
     <script src="Models/TextMarker.js"></script>
     <script src="Models/TextRange.js"></script>
     <script src="Models/TimelineMarker.js"></script>
     <script src="Models/TimelineRecording.js"></script>
+    <script src="Models/TraceOperation.js"></script>
     <script src="Models/TraceOperationTimelineRecord.js"></script>
     <script src="Models/TypeSet.js"></script>
     <script src="Models/UnitBezier.js"></script>
 
     <script src="Views/LegacyConsoleMessage.js"></script>
     <script src="Views/ContentView.js"></script>
     <script src="Views/DataGrid.js"></script>
     <script src="Views/DetailsSectionRow.js"></script>
     <script src="Views/HierarchicalPathComponent.js"></script>
     <script src="Views/NavigationItem.js"></script>
@@ -451,20 +452,22 @@
     <script src="Views/MetricsStyleDetailsPanel.js"></script>
     <script src="Views/NavigationBar.js"></script>
     <script src="Views/NetworkTimelineOverviewGraph.js"></script>
     <script src="Views/NetworkTimelineView.js"></script>
     <script src="Views/ObjectPreviewView.js"></script>
     <script src="Views/ObjectTreeArrayIndexTreeElement.js"></script>
     <script src="Views/ObjectTreeMapEntryTreeElement.js"></script>
     <script src="Views/ObjectTreePropertyTreeElement.js"></script>
     <script src="Views/ObjectTreeSetIndexTreeElement.js"></script>
     <script src="Views/ObjectTreeView.js"></script>
+    <script src="Views/OperationDataGrid.js"></script>
+    <script src="Views/OperationDataGridNode.js"></script>
     <script src="Views/OverviewTimelineView.js"></script>
     <script src="Views/Popover.js"></script>
     <script src="Views/ProbeDetailsSidebarPanel.js"></script>
     <script src="Views/ProbeSetDataGrid.js"></script>
     <script src="Views/ProbeSetDataGridNode.js"></script>
     <script src="Views/ProbeSetDetailsSection.js"></script>
     <script src="Views/ProfileNodeDataGridNode.js"></script>
     <script src="Views/ProfileNodeTreeElement.js"></script>
     <script src="Views/QuickConsole.js"></script>
     <script src="Views/QuickConsoleNavigationBar.js"></script>
diff --git a/Source/WebInspectorUI/UserInterface/Models/ElementSnapshotDiff.js b/Source/WebInspectorUI/UserInterface/Models/ElementSnapshotDiff.js
index 1ed0b6e..2686e18 100644
--- a/Source/WebInspectorUI/UserInterface/Models/ElementSnapshotDiff.js
+++ b/Source/WebInspectorUI/UserInterface/Models/ElementSnapshotDiff.js
@@ -78,30 +78,68 @@ WebInspector.NodeChangeSummary.ChangeTypes = {
     OrdinalChanged: Symbol("ordinal-changed"),
     TextChanged: Symbol("text-changed"),
 
     PropertyAdded: Symbol("property-added"),
     PropertyRemoved: Symbol("property-removed"),
     PropertyChanged: Symbol("property-changed"),
 };
 
 WebInspector.ElementSnapshotDiff = class ElementSnapshotDiff extends WebInspector.Object
 {
-    constructor(preState, postState)
+    constructor(preState, postState, timeline)
     {
         super();
 
         console.assert(preState instanceof WebInspector.ElementSnapshot, preState);
         console.assert(postState instanceof WebInspector.ElementSnapshot, postState);
         console.assert(preState !== postState, "Cannot diff a snapshot with itself.");
+        console.assert(timeline instanceof WebInspector.ElementTrackingTimeline, timeline);
 
         this.preState = preState;
         this.postState = postState;
+        this._timeline = timeline;
+    }
+
+    get relevantOperations()
+    {
+        if (this._relevantOperations)
+            return this._relevantOperations;
+
+        // FIXME: doesn't properly compute an array slice.
+        var records = this._timeline.records;
+        var preStateIndex = 0;
+        var postStateIndex = 0;
+        var i = 0;
+        for (; i < records.length; ++i) {
+            var record = records[i];
+            if (record.eventType !== WebInspector.ElementTrackingTimelineRecord.EventType.OutputChanged)
+                continue;
+
+            if (record.snapshotHeader === this.preState.header)
+                preStateIndex = i;
+            else if (record.snapshotHeader === this.postState.header) {
+                postStateIndex = i;
+                break;
+            }
+        }
+
+        var relevantRecords = this._timeline.records.slice(preStateIndex, postStateIndex);
+        console.log(relevantRecords);
+        this._relevantOperations = [];
+        for (var record of relevantRecords) {
+            if (!(record instanceof WebInspector.TraceOperationTimelineRecord))
+                continue;
+
+            this._relevantOperations.push(new WebInspector.TraceOperation(record));
+        };
+
+        return this._relevantOperations;
     }
 
     changeSummaryForNode(nodeId)
     {
         function createPropertyMap(effectiveStyle) {
             var result = new Map;
             var properties = effectiveStyle.allProperties;
             for (var property of properties)
                 result.set(property.name, property);
 
@@ -182,11 +220,18 @@ WebInspector.ElementSnapshotDiff = class ElementSnapshotDiff extends WebInspecto
                 for (var key of prePropertyNames.difference(commonProperties))
                     styleChanges.push({type: WebInspector.NodeChangeSummary.ChangeTypes.PropertyRemoved, key: key});
 
                 for (var key of postPropertyNames.difference(commonProperties))
                     styleChanges.push({type: WebInspector.NodeChangeSummary.ChangeTypes.PropertyAdded, key: key});
             }
         }
 
         return new WebInspector.NodeChangeSummary(nodeId, nodeChanges, styleChanges);
     }
+
+    computeOperationTraceForChange(change, nodeId)
+    {
+        console.log(this);
+        // FIXME: IMPLEMENT                             
+        return this.relevantOperations;
+    }
 };
diff --git a/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotOperationPreviewView.js b/Source/WebInspectorUI/UserInterface/Models/TraceOperation.js
similarity index 56%
copy from Source/WebInspectorUI/UserInterface/Views/ElementSnapshotOperationPreviewView.js
copy to Source/WebInspectorUI/UserInterface/Models/TraceOperation.js
index f681a5c..43d21d3 100644
--- a/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotOperationPreviewView.js
+++ b/Source/WebInspectorUI/UserInterface/Models/TraceOperation.js
@@ -1,12 +1,12 @@
 /*
- * Copyright (C) 2015 University of Washington. All rights reserved.
+ * Copyright (C) 2015 University of Washington.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
  *    notice, this list of conditions and the following disclaimer.
  * 2. Redistributions in binary form must reproduce the above copyright
  *    notice, this list of conditions and the following disclaimer in the
  *    documentation and/or other materials provided with the distribution.
  *
@@ -16,44 +16,28 @@
  * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
  * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  * THE POSSIBILITY OF SUCH DAMAGE.
  */
 
-WebInspector.ElementSnapshotOperationPreviewView = function(snapshot)
+WebInspector.TraceOperation = class TraceOperation extends WebInspector.Object
 {
-    console.assert(snapshot instanceof WebInspector.ElementSnapshot, snapshot);
-    WebInspector.ContentView.call(this, snapshot);
-
-    // TODO: make a content browser or something, show source code
-
-    this.element.classList.add(WebInspector.ElementSnapshotOperationPreviewView.StyleClassName);
-};
-
-WebInspector.ElementSnapshotOperationPreviewView.StyleClassName = "element-snapshot-preview";
-
-WebInspector.ElementSnapshotOperationPreviewView.prototype = {
-    constructor: WebInspector.ElementSnapshotOperationPreviewView,
-    __proto__: WebInspector.ContentView.prototype,
-
-    shown: function()
+    constructor(record)
     {
-        WebInspector.ContentView.prototype.shown.call(this);
+        super();
 
-        this.updateLayout();
-    },
+        console.assert(record instanceof WebInspector.TraceOperationTimelineRecord, record);
 
-    updateLayout: function()
-    {
-        WebInspector.ContentView.prototype.updateLayout.call(this);
-    },
+        this._record = record;
+    }
+
+    // Public
 
-    clearPreview: function()
+    get record()
     {
-        // TODO: SOMETHING
-        console.log("cleared preview.");
+        return this._record;
     }
 };
diff --git a/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotDiffContentView.js b/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotDiffContentView.js
index 4328e8e..5181469 100644
--- a/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotDiffContentView.js
+++ b/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotDiffContentView.js
@@ -106,22 +106,24 @@ WebInspector.ElementSnapshotDiffContentView = function(snapshotDiff)
         view.element.classList.add("post-state");
 
     this._preStateDOMTreeContentView.addEventListener(WebInspector.ElementSnapshotDOMTreeContentView.Event.SelectedNodeChanged, this._selectedNodeChanged, this);
     this._postStateDOMTreeContentView.addEventListener(WebInspector.ElementSnapshotDOMTreeContentView.Event.SelectedNodeChanged, this._selectedNodeChanged, this);
 
     this._preStateStyleContentView.addEventListener(WebInspector.ElementSnapshotStyleContentView.Event.ChangeMarkerSelected, this._changeMarkerSelected, this);
     this._preStateStyleContentView.addEventListener(WebInspector.ElementSnapshotStyleContentView.Event.ChangeMarkerDeselected, this._changeMarkerDeselected, this);
     this._postStateStyleContentView.addEventListener(WebInspector.ElementSnapshotStyleContentView.Event.ChangeMarkerSelected, this._changeMarkerSelected, this);
     this._postStateStyleContentView.addEventListener(WebInspector.ElementSnapshotStyleContentView.Event.ChangeMarkerDeselected, this._changeMarkerDeselected, this);
 
-    this._preStateTraceContentView.addEventListener(WebInspector.ElementSnapshotOperationTraceView.Event.OperationSelected, this._selectedOperationChanged, this);
-    this._postStateTraceContentView.addEventListener(WebInspector.ElementSnapshotOperationTraceView.Event.OperationSelected, this._selectedOperationChanged, this);
+    this._preStateTraceContentView.addEventListener(WebInspector.ElementSnapshotOperationTraceView.Event.OperationSelected, this._operationSelected, this);
+    this._preStateTraceContentView.addEventListener(WebInspector.ElementSnapshotOperationTraceView.Event.CallFrameSelected, this._operationCallFrameSelected, this);
+    this._postStateTraceContentView.addEventListener(WebInspector.ElementSnapshotOperationTraceView.Event.OperationSelected, this._operationSelected, this);
+    this._postStateTraceContentView.addEventListener(WebInspector.ElementSnapshotOperationTraceView.Event.CallFrameSelected, this._operationCallFrameSelected, this);
 
     this._repositionHeightResizer(0.5);
     this._repositionWidthResizers(0.3, 0.7);
 };
 
 WebInspector.ElementSnapshotDiffContentView.IconStyleClassName = "snapshot-diff-icon";
 WebInspector.ElementSnapshotDiffContentView.StyleClassName = "element-snapshot-diff";
 
 WebInspector.ElementSnapshotDiffContentView.prototype = {
     constructor: WebInspector.ElementSnapshotDiffContentView,
@@ -162,25 +164,21 @@ WebInspector.ElementSnapshotDiffContentView.prototype = {
         this._repositionWidthResizers(this._leftWidthResizerPercent, this._rightWidthResizerPercent, forceUpdates);
 
         if (!this._preStateSelectedChange) {
             this._preStateTraceContentView.hidden();
             this._preStatePreviewContentView.hidden();
             this._preStateDOMTreeContentView.shown();
             this._preStateStyleContentView.shown();
             return;
         }
 
-        // TODO: ask diff object to compute trace.                      
-        var trackingTimeline = WebInspector.timelineSidebarPanel.displayedRecording.timelines.get(WebInspector.TimelineRecord.Type.ElementTracking);
-        if (!trackingTimeline)
-            return;
-        this._preStateTraceContentView.operationTrace = trackingTimeline.traceRecords;
+        this._preStateTraceContentView.operationTrace = this._snapshotDiff.computeOperationTraceForChange(this._preStateSelectedChange.change, this._preStateSelectedChange.node);
         this._preStatePreviewContentView.clearPreview();
 
     },
 
     get postStateSelectedChange()
     {
         return this._postStateSelectedChange || null;
     },
 
     set postStateSelectedChange(value)
@@ -197,25 +195,21 @@ WebInspector.ElementSnapshotDiffContentView.prototype = {
         this._repositionWidthResizers(this._leftWidthResizerPercent, this._rightWidthResizerPercent, forceUpdates);
 
         if (!this._postStateSelectedChange) {
             this._postStateTraceContentView.hidden();
             this._postStatePreviewContentView.hidden();
             this._postStateDOMTreeContentView.shown();
             this._postStateStyleContentView.shown();
             return;
         }
 
-        // TODO: ask diff object to compute trace.                      
-        var trackingTimeline = WebInspector.timelineSidebarPanel.displayedRecording.timelines.get(WebInspector.TimelineRecord.Type.ElementTracking);
-        if (!trackingTimeline)
-            return;
-        this._postStateTraceContentView.operationTrace = trackingTimeline.traceRecords;
+        this._postStateTraceContentView.operationTrace = this._snapshotDiff.computeOperationTraceForChange(this._postStateSelectedChange, this._postStateSelectedChange.node);
         this._postStatePreviewContentView.clearPreview();
     },
 
     // Protected
 
     shown: function()
     {
         WebInspector.ContentView.prototype.shown.call(this);
 
         for (var contentView of this._contentViews)
@@ -415,19 +409,31 @@ WebInspector.ElementSnapshotDiffContentView.prototype = {
 
     _changeMarkerDeselected: function(event)
     {
         var snapshot = event.target.representedObject;
         if (snapshot === this._preState)
             this.preStateSelectedChange = null;
         else if (snapshot === this._postState)
             this.postStateSelectedChange = null;
     },
 
-    _selectedOperationChanged: function(event)
+    _operationSelected: function(event)
+    {
+        var operation = event.data.operation;
+        var sourceCodeLocation = operation ? operation.record.initiatorCallFrame.sourceCodeLocation : null;
+        if (event.target.representedObject === this._preState) {
+            this._preStatePreviewContentView.showSourceCodeLocation(sourceCodeLocation);
+        } else if (event.target.representedObject === this._postState) {
+            this._postStatePreviewContentView.showSourceCodeLocation(sourceCodeLocation);
+        }
+    },
+
+    _operationCallFrameSelected: function(event)
     {
+        var sourceCodeLocation = event.data.callFrame.sourceCodeLocation;
         if (event.target.representedObject === this._preState) {
-            // DO SOMETHING TO this._preStatePreviewContentView.                            
+            this._preStatePreviewContentView.showSourceCodeLocation(sourceCodeLocation);
         } else if (event.target.representedObject === this._postState) {
-            // DO SOMETHING TO this._postStatePreviewContentView.                            
+            this._postStatePreviewContentView.showSourceCodeLocation(sourceCodeLocation);
         }
     }
 };
diff --git a/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotOperationPreviewView.js b/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotOperationPreviewView.js
index f681a5c..0a7d28c 100644
--- a/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotOperationPreviewView.js
+++ b/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotOperationPreviewView.js
@@ -44,16 +44,23 @@ WebInspector.ElementSnapshotOperationPreviewView.prototype = {
         WebInspector.ContentView.prototype.shown.call(this);
 
         this.updateLayout();
     },
 
     updateLayout: function()
     {
         WebInspector.ContentView.prototype.updateLayout.call(this);
     },
 
+    showSourceCodeLocation: function(sourceCodeLocation)
+    {
+        if (!sourceCodeLocation)
+            this.clearPreview();
+        else
+            console.log("show source code location");
+    },
+
     clearPreview: function()
     {
-        // TODO: SOMETHING
         console.log("cleared preview.");
     }
 };
diff --git a/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotOperationTraceView.js b/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotOperationTraceView.js
index 849ba26..d25d1a1 100644
--- a/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotOperationTraceView.js
+++ b/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotOperationTraceView.js
@@ -25,48 +25,97 @@
 
 WebInspector.ElementSnapshotOperationTraceView = function(snapshot)
 {
     console.assert(snapshot instanceof WebInspector.ElementSnapshot, snapshot);
     WebInspector.ContentView.call(this, snapshot);
 
     this.element.classList.add(WebInspector.ElementSnapshotOperationTraceView.StyleClassName);
 
     this._operationTrace = [];
 
-    // ADD A DATA GRID                                  
+    var columns = {eventType: {}, initiatorCallFrame: {}, relationToTarget: {}, startTime: {}};
+
+    columns.eventType.title = WebInspector.UIString("Type");
+    columns.eventType.width = "15%";
+
+    columns.initiatorCallFrame.title = WebInspector.UIString("Location");
+    columns.initiatorCallFrame.width = "25%";
+
+    columns.relationToTarget.title = WebInspector.UIString("Relation to Target");
+    columns.relationToTarget.width = "10%";
+
+    columns.startTime.title = WebInspector.UIString("Time");
+    columns.startTime.width = "8%";
+    columns.startTime.aligned = "right";
+    columns.startTime.sortable = true;
+
+    this._dataGrid = new WebInspector.OperationDataGrid(columns, this);
+    this._dataGrid.addEventListener(WebInspector.DataGrid.Event.SelectedNodeChanged, this._dataGridNodeSelected, this);
+
+    this._dataGrid.sortColumnIdentifier = "startTime";
+    this._dataGrid.sortOrder = WebInspector.DataGrid.SortOrder.Ascending;
+
+    this.element.appendChild(this._dataGrid.element);
 };
 
 WebInspector.ElementSnapshotOperationTraceView.Event = {
+    CallFrameSelected: Symbol("call-frame-selected"),
     OperationSelected: Symbol("operation-selected"),
 }
 
 WebInspector.ElementSnapshotOperationTraceView.StyleClassName = "element-snapshot-trace";
 
 WebInspector.ElementSnapshotOperationTraceView.prototype = {
     constructor: WebInspector.ElementSnapshotOperationTraceView,
     __proto__: WebInspector.ContentView.prototype,
 
     shown: function()
     {
         WebInspector.ContentView.prototype.shown.call(this);
 
-        this.updateLayout();
+        this._dataGrid.shown();
     },
 
     updateLayout: function()
     {
         WebInspector.ContentView.prototype.updateLayout.call(this);
+
+        this._dataGrid.updateLayout();
     },
 
     get operationTrace()
     {
         return this._operationTrace.slice();
     },
 
     set operationTrace(value)
     {
         this._operationTrace = value || [];
 
-        // DO SOMETHING WITH TRACE                                      
-        this.dispatchEventToListeners(WebInspector.ElementSnapshotOperationTraceView.Event.OperationSelected, null);
+        console.log("set operation trace", value);
+
+        this._dataGrid.reset();
+        for (var operation of this._operationTrace)
+            this._dataGrid.appendChild(new WebInspector.OperationDataGridNode(operation));
+
+        console.log(this._dataGrid);
+        this._dataGrid.needsRefresh();
+
+        this.dispatchEventToListeners(WebInspector.ElementSnapshotOperationTraceView.Event.OperationSelected, {operation: null});
+    },
+
+    // Protected
+
+    operationDataGridShowCallFrame: function(callFrame)
+    {
+        console.log("show call frame event");
+        this.dispatchEventToListeners(WebInspector.ElementSnapshotOperationTraceView.Event.CallFrameSelected, {callFrame});
+    },
+
+    // Private
+
+    _dataGridNodeSelected: function(event)
+    {
+        console.log("show operation event");
+        this.dispatchEventToListeners(WebInspector.ContentView.Event.OperationSelected, {operation: this._dataGrid.selectedNode.operation});
     },
 };
diff --git a/Source/WebInspectorUI/UserInterface/Views/OperationDataGrid.js b/Source/WebInspectorUI/UserInterface/Views/OperationDataGrid.js
new file mode 100644
index 0000000..4eae449
--- /dev/null
+++ b/Source/WebInspectorUI/UserInterface/Views/OperationDataGrid.js
@@ -0,0 +1,200 @@
+/*
+ * Copyright (C) 2013 Apple Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
+ * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
+ * THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+WebInspector.OperationDataGrid = function(columns, delegate)
+{
+    WebInspector.DataGrid.call(this, columns);
+
+    this.element.classList.add(WebInspector.OperationDataGrid.StyleClassName);
+
+    this.addEventListener(WebInspector.DataGrid.Event.SelectedNodeChanged, this._dataGridSelectedNodeChanged, this);
+
+    window.addEventListener("resize", this._windowResized.bind(this));
+}
+
+WebInspector.OperationDataGrid.StyleClassName = "operation";
+WebInspector.OperationDataGrid.DelayedPopoverShowTimeout = 250;
+WebInspector.OperationDataGrid.DelayedPopoverHideContentClearTimeout = 500;
+
+WebInspector.OperationDataGrid.Event = {
+    FiltersDidChange: "OperationDataGrid-filters-did-change"
+};
+
+WebInspector.OperationDataGrid.prototype = {
+    constructor: WebInspector.OperationDataGrid,
+    __proto__: WebInspector.DataGrid.prototype,
+
+    // Public
+
+    reset: function()
+    {
+        // May be overridden by subclasses. If so, they should call the superclass.
+
+        this._hidePopover();
+    },
+
+    hidden: function()
+    {
+        // May be overridden by subclasses. If so, they should call the superclass.
+
+        this._hidePopover();
+    },
+
+    callFramePopoverAnchorElement: function()
+    {
+        return this.selectedNode.elementWithColumnIdentifier("initiatorCallFrame");
+    },
+
+    shouldIgnoreSelectionEvent: function()
+    {
+        return this._ignoreSelectionEvent || false;
+    },
+
+    // Protected
+
+    // Private
+    _dataGridSelectedNodeChanged: function(event)
+    {
+        if (!this.selectedNode) {
+            this._hidePopover();
+            return;
+        }
+
+        var record = this.selectedNode.record;
+        if (!record || !record.callFrames || !record.callFrames.length) {
+            this._hidePopover();
+            return;
+        }
+
+        this._showPopoverForSelectedNodeSoon();
+    },
+
+    _windowResized: function(event)
+    {
+        if (this._popover && this._popover.visible)
+            this._updatePopoverForSelectedNode(false);
+    },
+
+    _showPopoverForSelectedNodeSoon: function()
+    {
+        if (this._showPopoverTimeout)
+            return;
+
+        function delayedWork()
+        {
+            if (!this._popover)
+                this._popover = new WebInspector.Popover;
+
+            this._updatePopoverForSelectedNode(true);
+        }
+
+        this._showPopoverTimeout = setTimeout(delayedWork.bind(this), WebInspector.OperationDataGrid.DelayedPopoverShowTimeout);
+    },
+
+    _hidePopover: function()
+    {
+        if (this._showPopoverTimeout) {
+            clearTimeout(this._showPopoverTimeout);
+            delete this._showPopoverTimeout;
+        }
+
+        if (this._popover)
+            this._popover.dismiss();
+
+        function delayedWork()
+        {
+            if (this._popoverCallStackTreeOutline)
+                this._popoverCallStackTreeOutline.removeChildren();
+        }
+
+        if (this._hidePopoverContentClearTimeout)
+            clearTimeout(this._hidePopoverContentClearTimeout);
+        this._hidePopoverContentClearTimeout = setTimeout(delayedWork.bind(this), WebInspector.OperationDataGrid.DelayedPopoverHideContentClearTimeout);
+    },
+
+    _updatePopoverForSelectedNode: function(updateContent)
+    {
+        if (!this._popover || !this.selectedNode)
+            return;
+
+        var targetPopoverElement = this.callFramePopoverAnchorElement();
+        console.assert(targetPopoverElement, "OperationDataGrid should always return a valid element from callFramePopoverAnchorElement.");
+        if (!targetPopoverElement)
+            return;
+
+        var targetFrame = WebInspector.Rect.rectFromClientRect(targetPopoverElement.getBoundingClientRect());
+
+        // The element might be hidden if it does not have a width and height.
+        if (!targetFrame.size.width && !targetFrame.size.height)
+            return;
+
+        if (this._hidePopoverContentClearTimeout) {
+            clearTimeout(this._hidePopoverContentClearTimeout);
+            delete this._hidePopoverContentClearTimeout;
+        }
+
+        if (updateContent)
+            this._popover.content = this._createPopoverContent();
+
+        this._popover.present(targetFrame.pad(2), [WebInspector.RectEdge.MAX_Y, WebInspector.RectEdge.MIN_Y, WebInspector.RectEdge.MAX_X]);
+    },
+
+    _createPopoverContent: function()
+    {
+        if (!this._popoverCallStackTreeOutline) {
+            var contentElement = document.createElement("ol");
+            contentElement.classList.add("timeline-data-grid-tree-outline");
+            this._popoverCallStackTreeOutline = new TreeOutline(contentElement);
+            this._popoverCallStackTreeOutline.onselect = this._popoverCallStackTreeElementSelected.bind(this);
+        } else
+            this._popoverCallStackTreeOutline.removeChildren();
+
+        var callFrames = this.selectedNode.record.callFrames;
+        for (var i = 0 ; i < callFrames.length; ++i) {
+            var callFrameTreeElement = new WebInspector.CallFrameTreeElement(callFrames[i]);
+            this._popoverCallStackTreeOutline.appendChild(callFrameTreeElement);
+        }
+
+        var content = document.createElement("div");
+        content.className = "timeline-data-grid-popover";
+        content.appendChild(this._popoverCallStackTreeOutline.element);
+        return content;
+    },
+
+    _popoverCallStackTreeElementSelected: function(treeElement, selectedByUser)
+    {
+        this._popover.dismiss();
+
+        console.assert(treeElement instanceof WebInspector.CallFrameTreeElement, "TreeElements in OperationDataGrid popover should always be CallFrameTreeElements");
+        var callFrame = treeElement.callFrame;
+        if (!callFrame.sourceCodeLocation)
+            return;
+
+        if (this._delegate && typeof this._delegate.operationDataGridShowSourceCodeLocation === "function")
+            this._delegate.operationDataGridShowCallFrame(callFrame);
+        else
+            WebInspector.resourceSidebarPanel.showSourceCodeLocation(callFrame.sourceCodeLocation);
+    }
+};
diff --git a/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotOperationPreviewView.js b/Source/WebInspectorUI/UserInterface/Views/OperationDataGridNode.js
similarity index 50%
copy from Source/WebInspectorUI/UserInterface/Views/ElementSnapshotOperationPreviewView.js
copy to Source/WebInspectorUI/UserInterface/Views/OperationDataGridNode.js
index f681a5c..e318161 100644
--- a/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotOperationPreviewView.js
+++ b/Source/WebInspectorUI/UserInterface/Views/OperationDataGridNode.js
@@ -16,44 +16,57 @@
  * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
  * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  * THE POSSIBILITY OF SUCH DAMAGE.
  */
 
-WebInspector.ElementSnapshotOperationPreviewView = function(snapshot)
+WebInspector.OperationDataGridNode = function(operation)
 {
-    console.assert(snapshot instanceof WebInspector.ElementSnapshot, snapshot);
-    WebInspector.ContentView.call(this, snapshot);
+    console.assert(operation instanceof WebInspector.TraceOperation, operation);
 
-    // TODO: make a content browser or something, show source code
+    WebInspector.DataGridNode.call(this, false, null);
 
-    this.element.classList.add(WebInspector.ElementSnapshotOperationPreviewView.StyleClassName);
+    this._operation = operation;
 };
 
-WebInspector.ElementSnapshotOperationPreviewView.StyleClassName = "element-snapshot-preview";
+// FIXME: Move to a WebInspector.Object subclass and we can remove this.
+WebInspector.Object.deprecatedAddConstructorFunctions(WebInspector.OperationDataGridNode);
 
-WebInspector.ElementSnapshotOperationPreviewView.prototype = {
-    constructor: WebInspector.ElementSnapshotOperationPreviewView,
-    __proto__: WebInspector.ContentView.prototype,
+WebInspector.OperationDataGridNode.IconStyleClassName = "icon";
+WebInspector.OperationDataGridNode.SubtitleStyleClassName = "subtitle";
 
-    shown: function()
-    {
-        WebInspector.ContentView.prototype.shown.call(this);
+WebInspector.OperationDataGridNode.prototype = {
+    constructor: WebInspector.OperationDataGridNode,
+    __proto__: WebInspector.TimelineDataGridNode.prototype,
+
+    // Public
 
-        this.updateLayout();
+    get data()
+    {
+        return this._operation.record;
     },
 
-    updateLayout: function()
+    get operation()
     {
-        WebInspector.ContentView.prototype.updateLayout.call(this);
+        return this._operation;
     },
 
-    clearPreview: function()
+    createCellContent: function(columnIdentifier, cell)
     {
-        // TODO: SOMETHING
-        console.log("cleared preview.");
+        var value = this.data[columnIdentifier];
+
+        switch (columnIdentifier) {
+        case "eventType":
+            return WebInspector.TraceOperationTimelineRecord.displayNameForEventType(value);
+        case "relationToTarget":
+            return WebInspector.TraceOperationTimelineRecord.displayNameForElementRelation(value);
+        case "startTime":
+            return Number.secondsToString(value, true);
+        }
+
+        return WebInspector.DataGridNode.prototype.createCellContent.call(this, columnIdentifier, cell);
     }
 };
-- 
2.3.2

