From b974956105661013112f3027d24cd5a9d3c42b77 Mon Sep 17 00:00:00 2001
From: "Brian J. Burg" <burg@cs.washington.edu>
Date: Tue, 14 Apr 2015 00:07:55 -0700
Subject: [PATCH] Add change markers for DOM elements.

---
 Source/WebInspectorUI/UserInterface/Main.html      |   1 +
 .../UserInterface/Models/DOMTreeSnapshot.js        |   5 +
 .../UserInterface/Models/ElementSnapshotDiff.js    |  13 ++-
 .../UserInterface/Views/DOMTreeElement.js          |  64 +++++++++++-
 .../UserInterface/Views/DOMTreeOutline.js          |   5 +
 .../Views/ElementSnapshotDOMTreeContentView.css    | 112 +++++++++++++++++++++
 .../Views/ElementSnapshotDOMTreeContentView.js     |  85 +++++++++++++++-
 .../Views/ElementSnapshotDiffContentView.js        |  37 +++++--
 8 files changed, 311 insertions(+), 11 deletions(-)
 create mode 100644 Source/WebInspectorUI/UserInterface/Views/ElementSnapshotDOMTreeContentView.css

diff --git a/Source/WebInspectorUI/UserInterface/Main.html b/Source/WebInspectorUI/UserInterface/Main.html
index 4f9417f..2acdacd 100644
--- a/Source/WebInspectorUI/UserInterface/Main.html
+++ b/Source/WebInspectorUI/UserInterface/Main.html
@@ -67,20 +67,21 @@
     <link rel="stylesheet" href="Views/DataGrid.css">
     <link rel="stylesheet" href="Views/DatabaseContentView.css">
     <link rel="stylesheet" href="Views/DatabaseIcon.css">
     <link rel="stylesheet" href="Views/DatabaseTableContentView.css">
     <link rel="stylesheet" href="Views/DatabaseTableIcon.css">
     <link rel="stylesheet" href="Views/DebuggerSidebarPanel.css">
     <link rel="stylesheet" href="Views/DetailsSection.css">
     <link rel="stylesheet" href="Views/DividerNavigationItem.css">
     <link rel="stylesheet" href="Views/Editing.css">
     <link rel="stylesheet" href="Views/ElementSnapshotContentView.css">
+    <link rel="stylesheet" href="Views/ElementSnapshotDOMTreeContentView.css">
     <link rel="stylesheet" href="Views/ElementSnapshotDiffContentView.css">
     <link rel="stylesheet" href="Views/ElementSnapshotOperationPreviewView.css">
     <link rel="stylesheet" href="Views/ElementSnapshotOutputContentView.css">
     <link rel="stylesheet" href="Views/ElementSnapshotStyleContentView.css">
     <link rel="stylesheet" href="Views/ElementTrackingTimelineOverviewGraph.css">
     <link rel="stylesheet" href="Views/EventListenerSectionGroup.css">
     <link rel="stylesheet" href="Views/FilterBar.css">
     <link rel="stylesheet" href="Views/FindBanner.css">
     <link rel="stylesheet" href="Views/FlexibleSpaceNavigationItem.css">
     <link rel="stylesheet" href="Views/FolderIcon.css">
diff --git a/Source/WebInspectorUI/UserInterface/Models/DOMTreeSnapshot.js b/Source/WebInspectorUI/UserInterface/Models/DOMTreeSnapshot.js
index 98ed9b2..9cd6fea 100644
--- a/Source/WebInspectorUI/UserInterface/Models/DOMTreeSnapshot.js
+++ b/Source/WebInspectorUI/UserInterface/Models/DOMTreeSnapshot.js
@@ -340,11 +340,16 @@ WebInspector.DOMTreeSnapshot = class DOMTreeSnapshot extends WebInspector.Object
 
     get rootNode()
     {
         return this._rootNode;
     }
 
     findNode(id)
     {
         return this._nodeMap.get(id);
     }
+
+    get allNodes()
+    {
+        return new Set(this._nodeMap.keys());
+    }
 };
diff --git a/Source/WebInspectorUI/UserInterface/Models/ElementSnapshotDiff.js b/Source/WebInspectorUI/UserInterface/Models/ElementSnapshotDiff.js
index 2686e18..5208104 100644
--- a/Source/WebInspectorUI/UserInterface/Models/ElementSnapshotDiff.js
+++ b/Source/WebInspectorUI/UserInterface/Models/ElementSnapshotDiff.js
@@ -90,20 +90,21 @@ WebInspector.ElementSnapshotDiff = class ElementSnapshotDiff extends WebInspecto
         super();
 
         console.assert(preState instanceof WebInspector.ElementSnapshot, preState);
         console.assert(postState instanceof WebInspector.ElementSnapshot, postState);
         console.assert(preState !== postState, "Cannot diff a snapshot with itself.");
         console.assert(timeline instanceof WebInspector.ElementTrackingTimeline, timeline);
 
         this.preState = preState;
         this.postState = postState;
         this._timeline = timeline;
+        this._cachedChangeSummaries = new Map;
     }
 
     get relevantOperations()
     {
         if (this._relevantOperations)
             return this._relevantOperations;
 
         // FIXME: doesn't properly compute an array slice.
         var records = this._timeline.records;
         var preStateIndex = 0;
@@ -130,20 +131,23 @@ WebInspector.ElementSnapshotDiff = class ElementSnapshotDiff extends WebInspecto
                 continue;
 
             this._relevantOperations.push(new WebInspector.TraceOperation(record));
         };
 
         return this._relevantOperations;
     }
 
     changeSummaryForNode(nodeId)
     {
+        if (this._cachedChangeSummaries.has(nodeId))
+            return this._cachedChangeSummaries.get(nodeId);
+
         function createPropertyMap(effectiveStyle) {
             var result = new Map;
             var properties = effectiveStyle.allProperties;
             for (var property of properties)
                 result.set(property.name, property);
 
             return result;
         }
 
         var nodeChanges = [];
@@ -218,20 +222,27 @@ WebInspector.ElementSnapshotDiff = class ElementSnapshotDiff extends WebInspecto
                 }
 
                 for (var key of prePropertyNames.difference(commonProperties))
                     styleChanges.push({type: WebInspector.NodeChangeSummary.ChangeTypes.PropertyRemoved, key: key});
 
                 for (var key of postPropertyNames.difference(commonProperties))
                     styleChanges.push({type: WebInspector.NodeChangeSummary.ChangeTypes.PropertyAdded, key: key});
             }
         }
 
-        return new WebInspector.NodeChangeSummary(nodeId, nodeChanges, styleChanges);
+        for (var change of nodeChanges)
+            change.nodeId = nodeId;
+        for (var change of styleChanges)
+            change.nodeId = nodeId;
+
+        var summary = new WebInspector.NodeChangeSummary(nodeId, nodeChanges, styleChanges);
+        this._cachedChangeSummaries.set(nodeId, summary);
+        return summary;
     }
 
     computeOperationTraceForChange(change, nodeId)
     {
         console.log(this);
         // FIXME: IMPLEMENT                             
         return this.relevantOperations;
     }
 };
diff --git a/Source/WebInspectorUI/UserInterface/Views/DOMTreeElement.js b/Source/WebInspectorUI/UserInterface/Views/DOMTreeElement.js
index 9af0481..ec0a215 100644
--- a/Source/WebInspectorUI/UserInterface/Views/DOMTreeElement.js
+++ b/Source/WebInspectorUI/UserInterface/Views/DOMTreeElement.js
@@ -55,20 +55,31 @@ WebInspector.DOMTreeElement.ForbiddenClosingTagElements = [
 
 // These tags we do not allow editing their tag name.
 WebInspector.DOMTreeElement.EditTagBlacklist = [
     "html", "head", "body"
 ].keySet();
 
 WebInspector.DOMTreeElement.SearchHighlightStyleClassName = "search-highlight";
 WebInspector.DOMTreeElement.BouncyHighlightStyleClassName = "bouncy-highlight";
 
 WebInspector.DOMTreeElement.prototype = {
+    get changeMarkers()
+    {
+        return this._changeMarkers || [];
+    },
+
+    set changeMarkers(value)
+    {
+        this._changeMarkers = value || [];
+        this.updateTitle();
+    },
+
     isCloseTag: function()
     {
         return this._elementCloseTag;
     },
 
     highlightSearchResults: function(searchQuery)
     {
         if (this._searchQuery !== searchQuery) {
             this._updateSearchHighlight(false);
             delete this._highlightResult; // A new search query.
@@ -280,20 +291,23 @@ WebInspector.DOMTreeElement.prototype = {
     onattach: function()
     {
         if (this._hovered) {
             this.updateSelection();
             this.listItemElement.classList.add("hovered");
         }
 
         this.updateTitle();
         this.listItemElement.draggable = this.representedObject.isEditable();
         this.listItemElement.addEventListener("dragstart", this);
+
+        if (this.treeOutline.delegate && typeof this.treeOutline.delegate.domTreeOutlineChangeForNode === "function")
+            this.changeMarkers = this.treeOutline.delegate.domTreeOutlineChangeForNode(this.representedObject) || [];
     },
 
     onpopulate: function()
     {
         if (this.children.length || this._showInlineText(this.representedObject) || this._elementCloseTag)
             return;
 
         this.updateChildren();
     },
 
@@ -1063,52 +1077,74 @@ WebInspector.DOMTreeElement.prototype = {
         delete this.selectionElement;
         this.updateSelection();
         this._highlightSearchResults();
     },
 
     _buildAttributeDOM: function(parentElement, name, value, node)
     {
         var hasText = (value.length > 0);
         var attrSpanElement = parentElement.createChild("span", "html-attribute");
         var attrNameElement = attrSpanElement.createChild("span", "html-attribute-name");
+        var attrValueElement = null;
         attrNameElement.textContent = name;
 
         if (hasText)
             attrSpanElement.appendChild(document.createTextNode("=\u200B\""));
 
         if (name === "src" || name === "href") {
             var baseURL = node.ownerDocument ? node.ownerDocument.documentURL : null;
             var rewrittenURL = absoluteURL(value, baseURL);
 
             value = value.insertWordBreakCharacters();
 
             if (!rewrittenURL) {
-                var attrValueElement = attrSpanElement.createChild("span", "html-attribute-value");
+                attrValueElement = attrSpanElement.createChild("span", "html-attribute-value");
                 attrValueElement.textContent = value;
             } else {
                 if (value.startsWith("data:"))
                     value = value.trimMiddle(60);
 
                 var linkElement = document.createElement("a");
                 linkElement.href = rewrittenURL;
                 linkElement.textContent = value;
 
                 attrSpanElement.appendChild(linkElement);
             }
         } else {
             value = value.insertWordBreakCharacters();
-            var attrValueElement = attrSpanElement.createChild("span", "html-attribute-value");
+            attrValueElement = attrSpanElement.createChild("span", "html-attribute-value");
             attrValueElement.textContent = value;
         }
 
         if (hasText)
             attrSpanElement.appendChild(document.createTextNode("\""));
+
+        for (var change of this.changeMarkers) {
+            if (change.nodeId !== node.id)
+                continue;
+
+            if (change.type === WebInspector.NodeChangeSummary.ChangeTypes.AttributeAdded)
+                attrSpanElement.classList.add("attribute-added");
+            else if (change.type === WebInspector.NodeChangeSummary.ChangeTypes.AttributeRemoved)
+                attrSpanElement.classList.add("attribute-removed");
+            else if (attrValueElement && change.type === WebInspector.NodeChangeSummary.ChangeTypes.AttributeChanged)
+                attrValueElement.classList.add("attribute-changed");
+            else
+                continue;
+
+            var notifyChangeMarkerSelected = function(event) {
+                if (this.treeOutline.delegate && typeof this.treeOutline.delegate.domTreeOutlineSelectChangeMarker === "function")
+                    this.treeOutline.delegate.domTreeOutlineSelectChangeMarker(change);
+            }
+
+            attrSpanElement.addEventListener("click", notifyChangeMarkerSelected.bind(this));
+        }
     },
 
     _buildTagDOM: function(parentElement, tagName, isClosingTag, isDistinctTreeElement)
     {
         var node = this.representedObject;
         var classes = [ "html-tag" ];
         if (isClosingTag && isDistinctTreeElement)
             classes.push("close");
         if (node.isInShadowTree())
             classes.push("shadow");
@@ -1119,20 +1155,44 @@ WebInspector.DOMTreeElement.prototype = {
         if (!isClosingTag && node.hasAttributes()) {
             var attributes = node.attributes();
             for (var i = 0; i < attributes.length; ++i) {
                 var attr = attributes[i];
                 tagElement.appendChild(document.createTextNode(" "));
                 this._buildAttributeDOM(tagElement, attr.name, attr.value, node);
             }
         }
         tagElement.appendChild(document.createTextNode(">"));
         parentElement.appendChild(document.createTextNode("\u200B"));
+
+        for (var change of this.changeMarkers) {
+            if (change.nodeId !== node.id)
+                continue;
+
+            var changeClassName = null;
+            if (change.type === WebInspector.NodeChangeSummary.ChangeTypes.NodeAdded)
+                changeClassName = "node-added";
+            else if (change.type === WebInspector.NodeChangeSummary.ChangeTypes.NodeRemoved)
+                changeClassName = "node-removed";
+            else if (change.type === WebInspector.NodeChangeSummary.ChangeTypes.ParentChanged || change.type === WebInspector.NodeChangeSummary.ChangeTypes.OrdinalChanged)
+                changeClassName = "node-changed";
+            else
+                continue;
+
+            tagElement.classList.add(changeClassName);
+
+            var notifyChangeMarkerSelected = function(event) {
+                if (this.treeOutline.delegate && typeof this.treeOutline.delegate.domTreeOutlineSelectChangeMarker === "function")
+                    this.treeOutline.delegate.domTreeOutlineSelectChangeMarker(change);
+            }
+
+            tagElement.addEventListener("click", notifyChangeMarkerSelected.bind(this));
+        }
     },
 
     _nodeTitleInfo: function()
     {
         var node = this.representedObject;
         var info = {titleDOM: document.createDocumentFragment(), hasChildren: this.hasChildren};
 
         switch (node.nodeType()) {
             case Node.DOCUMENT_FRAGMENT_NODE:
                 var fragmentElement = info.titleDOM.createChild("span", "webkit-html-fragment");
diff --git a/Source/WebInspectorUI/UserInterface/Views/DOMTreeOutline.js b/Source/WebInspectorUI/UserInterface/Views/DOMTreeOutline.js
index a261e02..580a948 100644
--- a/Source/WebInspectorUI/UserInterface/Views/DOMTreeOutline.js
+++ b/Source/WebInspectorUI/UserInterface/Views/DOMTreeOutline.js
@@ -76,20 +76,25 @@ WebInspector.DOMTreeOutline.DefaultDelegate = {
     showHighlightForNode: function(node)
     {
         console.assert(node instanceof WebInspector.DOMNode, node);
         WebInspector.domTreeManager.highlightDOMNode(node.id);
     },
 
     hideNodeHighlight: function()
     {
         WebInspector.domTreeManager.hideDOMNodeHighlight();
     },
+
+    domTreeOutlineSelectChangeMarker: function()
+    {
+        // Do nothing.
+    }
 };
 
 WebInspector.DOMTreeOutline.prototype = {
     constructor: WebInspector.DOMTreeOutline,
 
     wireToDomAgent: function()
     {
         this._elementsTreeUpdater = new WebInspector.DOMTreeUpdater(this);
     },
 
diff --git a/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotDOMTreeContentView.css b/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotDOMTreeContentView.css
new file mode 100644
index 0000000..7fc6e7f
--- /dev/null
+++ b/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotDOMTreeContentView.css
@@ -0,0 +1,112 @@
+/*
+ * Copyright (C) 2015 University of Washington.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
+ * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
+ * THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+.content-view.element-snapshot-dom-tree {
+}
+
+.content-view.element-snapshot-dom-tree .fixed-wrapper {
+    position: fixed;
+}
+
+.content-view.element-snapshot-dom-tree.change-selected .fixed-wrapper {
+    z-index: 1000;
+}
+
+.content-view.element-snapshot-dom-tree label.deselect-change-link {
+    position: absolute;
+    top: 0;
+    right: 0;
+    bottom: 0;
+    height: 18px;
+
+    background-color: rgb(34, 131, 246);
+    color: #fff;
+    border-radius: 3px;
+    padding: 2px 5px;
+
+    display: none;
+}
+
+.content-view.element-snapshot-dom-tree.change-selected label.deselect-change-link {
+    display: block;
+}
+
+.content-view.element-snapshot-dom-tree label.deselect-change-link:hover {
+    background-color: rgba(136, 178, 250);
+    cursor: pointer;
+}
+
+.content-view.element-snapshot-dom-tree .html-attribute-value.attribute-changed,
+.content-view.element-snapshot-dom-tree .html-tag.node-changed > span:first-of-type,
+ {
+    /* unfocused background color */
+    background-color: rgb(234, 222, 255);
+    /* unfocused foreground color */
+    /* rgb(199, 167, 255); */
+    /* focused foreground color */
+    /* rgb(151, 107, 231); */
+}
+
+.content-view.element-snapshot-dom-tree .html-attribute-value.attribute-changed,
+.content-view.element-snapshot-dom-tree .html-attribute-value.attribute-changed.selected
+.content-view.element-snapshot-dom-tree .html-tag.node-changed.selected > span:first-of-type {
+    /* focused background color */
+    background-color: rgb(193, 179, 239);
+    /* focused foreground color */
+    /* rgb(151, 107, 231); */
+}
+
+.content-view.element-snapshot-dom-tree .html-attribute.attribute-added,
+.content-view.element-snapshot-dom-tree .html-tag.node-added > span:first-of-type {
+    /* unfocused background color */
+    background-color: rgb(218, 255, 216);
+    /* focused foreground color */
+    /* rgb(87, 186, 79); */
+}
+
+.content-view.element-snapshot-dom-tree .html-attribute.attribute-added.selected,
+.content-view.element-snapshot-dom-tree .html-tag.node-added.selected > span:first-of-type {
+    /* focused background color */
+    background-color: rgb(154, 230, 149);
+}
+
+.content-view.element-snapshot-dom-tree .html-attribute.attribute-removed,
+.content-view.element-snapshot-dom-tree .html-tag.node-removed > span:first-of-type {
+    /* unfocused background color */
+    background-color: rgb(254, 232, 232);
+
+    /* focused foreground color */
+    /* rgb(232, 78, 81); */
+}
+
+.content-view.element-snapshot-dom-tree .html-attribute.attribute-removed.selected,
+.content-view.element-snapshot-dom-tree .html-tag.node-removed.selected > span:first-of-type {
+    /* focused background color */
+    background-color: rgb(238, 196, 196);
+}
+
+.content-view.element-snapshot-dom-tree :matches(.attribute-changed, .attribute-added, .attribute-removed, .node-added, .node-removed, .node-changed) {
+    cursor: pointer;
+}
diff --git a/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotDOMTreeContentView.js b/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotDOMTreeContentView.js
index 6fca424..b27d5c7 100644
--- a/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotDOMTreeContentView.js
+++ b/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotDOMTreeContentView.js
@@ -21,39 +21,70 @@
  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  * THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 WebInspector.ElementSnapshotDOMTreeContentView = function(snapshot)
 {
     console.assert(snapshot instanceof WebInspector.ElementSnapshot, snapshot);
     WebInspector.ContentView.call(this, snapshot);
 
+    this._changesByNodeId = new Map;
+
     this.element.classList.add(WebInspector.ElementSnapshotDOMTreeContentView.StyleClassName);
 
+    var deselectTheSelection = function() {
+        this.selectedChange = null;
+    }.bind(this);
+
+    this._fixedPositionWrapperElement = document.createElement("div");
+    this._fixedPositionWrapperElement.className = "fixed-wrapper";
+
+    this._deselectChangeMarkerLabelElement = document.createElement("label");
+    this._deselectChangeMarkerLabelElement.className = "deselect-change-link";
+    this._deselectChangeMarkerLabelElement.textContent = WebInspector.UIString("Go Back");
+    this._deselectChangeMarkerLabelElement.addEventListener("click", deselectTheSelection);
+    this._fixedPositionWrapperElement.appendChild(this._deselectChangeMarkerLabelElement);
+    this.element.appendChild(this._fixedPositionWrapperElement);
+
     var options = [
         false, // omitRootDOMNode
         true, // selectEnabled
         false, // revealInDOMTreeEnabled
     ];
     this._domTreeOutline = new WebInspector.DOMTreeOutline(...options);
     this._domTreeOutline.addEventListener(WebInspector.DOMTreeOutline.Event.SelectedNodeChanged, this._selectedNodeDidChange, this);
 
     function showHighlightForNode(node) {
         //console.log("highlighting node", node);
     }
 
     function hideNodeHighlight() {
         //console.log("hiding highlight");
     }
 
-    this._domTreeOutline.delegate = { showHighlightForNode, hideNodeHighlight };
+    var view = this;
+    function domTreeOutlineSelectChangeMarker(change) {
+        view.selectedChange = change;
+    }
+
+    function domTreeOutlineChangeForNode(node) {
+        return view._changesByNodeId.get(node.id);
+    }
+
+    this._domTreeOutline.delegate = {
+        showHighlightForNode,
+        hideNodeHighlight,
+        domTreeOutlineSelectChangeMarker,
+        domTreeOutlineChangeForNode,
+    };
+
     this.element.appendChild(this._domTreeOutline.element);
 
     this._domTreeOutline.rootDOMNode = snapshot.treeSnapshot.rootNode;
     // Expand the tree a bit so it's not so empty.
     this._domTreeOutline.children[0].expandRecursively(-1);
 
     // Select the root tree element after giving a chance for the parent content view to add listeners.
     function delayedWork() {
         var options = [
             true, // omitFocus
@@ -63,52 +94,84 @@ WebInspector.ElementSnapshotDOMTreeContentView = function(snapshot)
         ];
         this._domTreeOutline.children[0].revealAndSelect(...options);
     }
     setTimeout(delayedWork.bind(this), 0);
 };
 
 WebInspector.ElementSnapshotDOMTreeContentView.StyleClassName = "element-snapshot-dom-tree";
 
 WebInspector.ElementSnapshotDOMTreeContentView.Event = {
     SelectedNodeChanged: Symbol("selected-node-changed"),
+    ChangeMarkerSelected: Symbol("change-marker-selected"),
+    ChangeMarkerDeselected: Symbol("change-marker-deselected"),
 }
 
 WebInspector.ElementSnapshotDOMTreeContentView.prototype = {
     constructor: WebInspector.ElementSnapshotDOMTreeContentView,
     __proto__: WebInspector.ContentView.prototype,
 
     // Public
 
     updateLayout: function()
     {
         WebInspector.ContentView.prototype.updateLayout.call(this);
 
         this._domTreeOutline.updateSelection();
+
+        var widthOfLabel = this._deselectChangeMarkerLabelElement.offsetWidth || 66;
+        var heightOfLabel = this._deselectChangeMarkerLabelElement.offsetHeight || 16;
+        var marginTop = 4;
+        var marginRight = 22;
+
+        this._fixedPositionWrapperElement.style.top = (this.element.totalOffsetTop + marginTop) + 'px';
+        this._fixedPositionWrapperElement.style.left = (this.element.totalOffsetLeft + this.element.offsetWidth - widthOfLabel - marginRight - marginTop) + 'px';
+        this._fixedPositionWrapperElement.style.width = (widthOfLabel) + 'px';
+        this._fixedPositionWrapperElement.style.height = (heightOfLabel) + 'px';
     },
 
     shown: function()
     {
         WebInspector.ContentView.prototype.shown.call(this);
 
         this._domTreeOutline.setVisible(true, WebInspector.isConsoleFocused());
     },
 
     hidden: function()
     {
         this._domTreeOutline.setVisible(false);
     },
 
     closed: function()
     {
         this._domTreeOutline.close();
     },
 
+    get selectedChange()
+    {
+        return this._selectedChange;
+    },
+
+    set selectedChange(value)
+    {
+        if (this._selectedChange === value)
+            return;
+
+        this._selectedChange = value;
+        this.element.classList.toggle("change-selected", !!this._selectedChange);
+
+        if (this._selectedChange) {
+            var data = {node: this._nodeSnapshot, change: this._selectedChange};
+            this.dispatchEventToListeners(WebInspector.ElementSnapshotDOMTreeContentView.Event.ChangeMarkerSelected, data);
+        } else
+            this.dispatchEventToListeners(WebInspector.ElementSnapshotDOMTreeContentView.Event.ChangeMarkerDeselected);
+    },
+
     get selectedNode()
     {
         return this._domTreeOutline.selectedDOMNode();
     },
 
     get selectionPathComponents()
     {
         var treeElement = this._domTreeOutline.selectedTreeElement;
         var pathComponents = [];
 
@@ -147,21 +210,39 @@ WebInspector.ElementSnapshotDOMTreeContentView.prototype = {
             false, // selectedByUser
             true, // suppressOnSelect
             false, // suppressOnDeselect
         ];
         treeElement.revealAndSelect(...options);
     },
 
     updateChangeMarkers: function(nodeChanges)
     {
         console.log("updating dom tree change markers:", nodeChanges);
-        //                                              
+        this._changesByNodeId.clear();
+        for (var change of nodeChanges) {
+            if (!this._changesByNodeId.has(change.nodeId))
+                this._changesByNodeId.set(change.nodeId, []);
+
+            this._changesByNodeId.get(change.nodeId).push(change);
+        }
+
+        for (var [nodeId, changes] of this._changesByNodeId) {
+            var nodeSnapshot = this.representedObject.treeSnapshot.findNode(nodeId);
+            if (!nodeSnapshot)
+                continue;
+
+            var treeElement = this._domTreeOutline.findTreeElement(nodeSnapshot);
+            if (!treeElement)
+                continue;
+
+            treeElement.changeMarkers = changes;
+        }
     },
 
     // Private
 
     _pathComponentSelected: function(event)
     {
         console.assert(event.data.pathComponent instanceof WebInspector.DOMTreeElementPathComponent);
         console.assert(event.data.pathComponent.domTreeElement instanceof WebInspector.DOMTreeElement);
 
         this._domTreeOutline.selectDOMNode(event.data.pathComponent.domTreeElement.representedObject, true);
diff --git a/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotDiffContentView.js b/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotDiffContentView.js
index a8976d2..57697d9 100644
--- a/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotDiffContentView.js
+++ b/Source/WebInspectorUI/UserInterface/Views/ElementSnapshotDiffContentView.js
@@ -99,34 +99,58 @@ WebInspector.ElementSnapshotDiffContentView = function(snapshotDiff)
     this._pathComponent = new WebInspector.HierarchicalPathComponent(displayName, WebInspector.ElementSnapshotDiffContentView.IconStyleClassName, this, false, false);
 
     this.element.classList.add(WebInspector.ElementSnapshotDiffContentView.StyleClassName);
 
     for (var view of this._preStateContentViews)
         view.element.classList.add("pre-state");
     for (var view of this._postStateContentViews)
         view.element.classList.add("post-state");
 
     this._preStateDOMTreeContentView.addEventListener(WebInspector.ElementSnapshotDOMTreeContentView.Event.SelectedNodeChanged, this._selectedNodeChanged, this);
+    this._preStateDOMTreeContentView.addEventListener(WebInspector.ElementSnapshotDOMTreeContentView.Event.ChangeMarkerSelected, this._changeMarkerSelected, this);
+    this._preStateDOMTreeContentView.addEventListener(WebInspector.ElementSnapshotDOMTreeContentView.Event.ChangeMarkerDeselected, this._changeMarkerDeselected, this);
     this._postStateDOMTreeContentView.addEventListener(WebInspector.ElementSnapshotDOMTreeContentView.Event.SelectedNodeChanged, this._selectedNodeChanged, this);
+    this._postStateDOMTreeContentView.addEventListener(WebInspector.ElementSnapshotDOMTreeContentView.Event.ChangeMarkerSelected, this._changeMarkerSelected, this);
+    this._postStateDOMTreeContentView.addEventListener(WebInspector.ElementSnapshotDOMTreeContentView.Event.ChangeMarkerDeselected, this._changeMarkerDeselected, this);
 
     this._preStateStyleContentView.addEventListener(WebInspector.ElementSnapshotStyleContentView.Event.ChangeMarkerSelected, this._changeMarkerSelected, this);
     this._preStateStyleContentView.addEventListener(WebInspector.ElementSnapshotStyleContentView.Event.ChangeMarkerDeselected, this._changeMarkerDeselected, this);
     this._postStateStyleContentView.addEventListener(WebInspector.ElementSnapshotStyleContentView.Event.ChangeMarkerSelected, this._changeMarkerSelected, this);
     this._postStateStyleContentView.addEventListener(WebInspector.ElementSnapshotStyleContentView.Event.ChangeMarkerDeselected, this._changeMarkerDeselected, this);
 
     this._preStateTraceContentView.addEventListener(WebInspector.ElementSnapshotOperationTraceView.Event.OperationSelected, this._operationSelected, this);
     this._preStateTraceContentView.addEventListener(WebInspector.ElementSnapshotOperationTraceView.Event.CallFrameSelected, this._operationCallFrameSelected, this);
     this._postStateTraceContentView.addEventListener(WebInspector.ElementSnapshotOperationTraceView.Event.OperationSelected, this._operationSelected, this);
     this._postStateTraceContentView.addEventListener(WebInspector.ElementSnapshotOperationTraceView.Event.CallFrameSelected, this._operationCallFrameSelected, this);
 
     this._repositionHeightResizer(0.5);
     this._repositionWidthResizers(0.3, 0.7);
+
+    function delayedWork() {
+        var allNodes = this._preState.treeSnapshot.allNodes;
+        allNodes = allNodes.union(this._postState.treeSnapshot.allNodes);
+        changeSummaries = [];
+        for (var nodeId of allNodes.keys())
+            changeSummaries.push(this._snapshotDiff.changeSummaryForNode(nodeId));
+
+        var nodeChanges = [];
+        for (var summary of changeSummaries)
+            nodeChanges = nodeChanges.concat(summary.nodeChanges);
+
+        this._preStateDOMTreeContentView.updateChangeMarkers(nodeChanges.filter(WebInspector.NodeChangeSummary.changeIsRelevantToPreState));
+        this._postStateDOMTreeContentView.updateChangeMarkers(nodeChanges.filter(WebInspector.NodeChangeSummary.changeIsRelevantToPostState));
+    }
+
+    // Calculating all change summaries could be expensive. Do it on its own run loop.
+    // NOTE: this seems to race with the tree, which may not have appended all nodes yet.
+    // In practice, this delay seems to avoid the race.
+    setTimeout(delayedWork.bind(this), 1000);
 };
 
 WebInspector.ElementSnapshotDiffContentView.IconStyleClassName = "snapshot-diff-icon";
 WebInspector.ElementSnapshotDiffContentView.StyleClassName = "element-snapshot-diff";
 
 WebInspector.ElementSnapshotDiffContentView.prototype = {
     constructor: WebInspector.ElementSnapshotDiffContentView,
     __proto__: WebInspector.ContentView.prototype,
 
     get selectionPathComponents()
@@ -195,21 +219,21 @@ WebInspector.ElementSnapshotDiffContentView.prototype = {
         this._repositionWidthResizers(this._leftWidthResizerPercent, this._rightWidthResizerPercent, forceUpdates);
 
         if (!this._postStateSelectedChange) {
             this._postStateTraceContentView.hidden();
             this._postStatePreviewContentView.hidden();
             this._postStateDOMTreeContentView.shown();
             this._postStateStyleContentView.shown();
             return;
         }
 
-        this._postStateTraceContentView.operationTrace = this._snapshotDiff.computeOperationTraceForChange(this._postStateSelectedChange, this._postStateSelectedChange.node);
+        this._postStateTraceContentView.operationTrace = this._snapshotDiff.computeOperationTraceForChange(this._postStateSelectedChange, this._postStateSelectedChange.nodeId);
         this._postStatePreviewContentView.clearPreview();
     },
 
     // Protected
 
     shown: function()
     {
         WebInspector.ContentView.prototype.shown.call(this);
 
         for (var contentView of this._contentViews)
@@ -375,26 +399,27 @@ WebInspector.ElementSnapshotDiffContentView.prototype = {
 
         this._preStateStyleContentView.showStyleForNode(preStateNodeSnapshot);
         this._postStateStyleContentView.showStyleForNode(postStateNodeSnapshot);
 
         if (!selectedNodeSnapshot)
             return;
 
         this._preStateDOMTreeContentView.selectNode(preStateNodeSnapshot, true);
         this._postStateDOMTreeContentView.selectNode(postStateNodeSnapshot, true);
 
-        var changeSummary = this._snapshotDiff.changeSummaryForNode(selectedNodeSnapshot.id);
-        this._preStateDOMTreeContentView.updateChangeMarkers(changeSummary.nodeChanges.filter(WebInspector.NodeChangeSummary.changeIsRelevantToPreState));
-        this._postStateDOMTreeContentView.updateChangeMarkers(changeSummary.nodeChanges.filter(WebInspector.NodeChangeSummary.changeIsRelevantToPostState));
+        var changeSummaries = [this._snapshotDiff.changeSummaryForNode(selectedNodeSnapshot.id)];
+        var styleChanges = [];
+        for (var summary of changeSummaries)
+            styleChanges = styleChanges.concat(summary.styleChanges);
 
-        this._preStateStyleContentView.updateChangeMarkers(changeSummary.styleChanges.filter(WebInspector.NodeChangeSummary.changeIsRelevantToPreState));
-        this._postStateStyleContentView.updateChangeMarkers(changeSummary.styleChanges.filter(WebInspector.NodeChangeSummary.changeIsRelevantToPostState));
+        this._preStateStyleContentView.updateChangeMarkers(styleChanges.filter(WebInspector.NodeChangeSummary.changeIsRelevantToPreState));
+        this._postStateStyleContentView.updateChangeMarkers(styleChanges.filter(WebInspector.NodeChangeSummary.changeIsRelevantToPostState));
     },
 
     _changeMarkerSelected: function(event)
     {
         var selectedChange = {
             node: event.data.node,
             change: event.data.change,
             sourceView: event.target
         };
         var snapshot = event.target.representedObject;
-- 
2.3.2

